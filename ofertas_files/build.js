!function(l){function I(I){for(var g,C,n=I[0],A=I[1],t=0,e=[];t<n.length;t++)C=n[t],Object.prototype.hasOwnProperty.call(c,C)&&c[C]&&e.push(c[C][0]),c[C]=0;for(g in A)Object.prototype.hasOwnProperty.call(A,g)&&(l[g]=A[g]);for(i&&i(I);e.length;)e.shift()()}var C={},c={build:0};function A(I){var g;return(C[I]||(g=C[I]={i:I,l:!1,exports:{}},l[I].call(g.exports,g,g.exports,A),g.l=!0,g)).exports}A.m=l,A.c=C,A.d=function(I,g,C){A.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:C})},A.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},A.t=function(g,I){if(1&I&&(g=A(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var C=Object.create(null);if(A.r(C),Object.defineProperty(C,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var n in g)A.d(C,n,function(I){return g[I]}.bind(null,n));return C},A.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return A.d(g,"a",g),g},A.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},A.p="",A.oe=function(I){throw console.error(I),I};var g=(n=window.webpackJsonp=window.webpackJsonp||[]).push.bind(n);n.push=I;for(var n=n.slice(),t=0;t<n.length;t++)I(n[t]);var i=g;A(A.s=0)}({"./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n")},"./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/setimmediate/setImmediate.js\n')},"./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||\n            (typeof self !== "undefined" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");\n// On some exotic environments, it\'s not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||\n                       (typeof global !== "undefined" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||\n                         (typeof global !== "undefined" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz81MTE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxtQkFBTyxDQUFDLGlFQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/timers-browserify/main.js\n')},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n')},"./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/*! exports provided: Headers, Request, Response, DOMException, fetch */function(module,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Headers\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Request\", function() { return Request; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Response\", function() { return Response; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOMException\", function() { return DOMException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetch\", function() { return fetch; });\n/* eslint-disable no-prototype-builtins */\nvar g =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof self !== 'undefined' && self) ||\n  // eslint-disable-next-line no-undef\n  (typeof global !== 'undefined' && global) ||\n  {}\n\nvar support = {\n  searchParams: 'URLSearchParams' in g,\n  iterable: 'Symbol' in g && 'iterator' in Symbol,\n  blob:\n    'FileReader' in g &&\n    'Blob' in g &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in g,\n  arrayBuffer: 'ArrayBuffer' in g\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      if (header.length != 2) {\n        throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length)\n      }\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body._noBody) return\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type)\n  var encoding = match ? match[1] : 'utf-8'\n  reader.readAsText(blob, encoding)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    // eslint-disable-next-line no-self-assign\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._noBody = true;\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n  }\n\n  this.arrayBuffer = function() {\n    if (this._bodyArrayBuffer) {\n      var isConsumed = consumed(this)\n      if (isConsumed) {\n        return isConsumed\n      } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n        return Promise.resolve(\n          this._bodyArrayBuffer.buffer.slice(\n            this._bodyArrayBuffer.byteOffset,\n            this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n          )\n        )\n      } else {\n        return Promise.resolve(this._bodyArrayBuffer)\n      }\n    } else if (support.blob) {\n      return this.blob().then(readBlobAsArrayBuffer)\n    } else {\n      throw new Error('could not read as ArrayBuffer')\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal || (function () {\n    if ('AbortController' in g) {\n      var ctrl = new AbortController();\n      return ctrl.signal;\n    }\n  }());\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\n      // Search for a '_' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())\n      } else {\n        // Otherwise add a new '_' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n  // https://github.com/github/fetch/issues/748\n  // https://github.com/zloirock/core-js/issues/751\n  preProcessedHeaders\n    .split('\\r')\n    .map(function(header) {\n      return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n    })\n    .forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        try {\n          headers.append(key, value)\n        } catch (error) {\n          console.warn('Response ' + error.message)\n        }\n      }\n    })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  if (this.status < 200 || this.status > 599) {\n    throw new RangeError(\"Failed to construct 'Response': The status provided (0) is outside the range [200, 599].\")\n  }\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = options.statusText === undefined ? '' : '' + options.statusText\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 200, statusText: ''})\n  response.ok = false\n  response.status = 0\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = g.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      // This check if specifically for when a user fetches a file locally from the file system\n      // Only if the status is out of a normal range\n      if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {\n        options.status = 200;\n      } else {\n        options.status = xhr.status;\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request timed out'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === '' && g.location.href ? g.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob'\n      } else if (\n        support.arrayBuffer\n      ) {\n        xhr.responseType = 'arraybuffer'\n      }\n    }\n\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {\n      var names = [];\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        names.push(normalizeName(name))\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n      request.headers.forEach(function(value, name) {\n        if (names.indexOf(name) === -1) {\n          xhr.setRequestHeader(name, value)\n        }\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!g.fetch) {\n  g.fetch = fetch\n  g.Headers = Headers\n  g.Request = Request\n  g.Response = Response\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/whatwg-fetch/fetch.js\n")},"./web/app/builder/build.js":
/*!**********************************!*\
  !*** ./web/app/builder/build.js ***!
  \**********************************/
/*! no exports provided */function(module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _assets_less_js_less_min_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../assets/less.js/less.min.js */ "./web/assets/less.js/less.min.js");\n/* harmony import */ var _assets_less_js_less_min_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_assets_less_js_less_min_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _assets_spectrum_spectrum_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../assets/spectrum/spectrum.js */ "./web/assets/spectrum/spectrum.js");\n/* harmony import */ var _assets_spectrum_spectrum_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_assets_spectrum_spectrum_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _summernote_summernote_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./summernote/summernote.js */ "./web/app/builder/summernote/summernote.js");\n/* harmony import */ var _summernote_summernote_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_summernote_summernote_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _summernote_lang_en_US_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./summernote/lang/en-US.js */ "./web/app/builder/summernote/lang/en-US.js");\n/* harmony import */ var _summernote_lang_en_US_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_summernote_lang_en_US_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_button_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./summernote/plugin/summernote-ext-mbr-button.js */ "./web/app/builder/summernote/plugin/summernote-ext-mbr-button.js");\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_button_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_summernote_plugin_summernote_ext_mbr_button_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_fonts_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./summernote/plugin/summernote-ext-mbr-fonts.js */ "./web/app/builder/summernote/plugin/summernote-ext-mbr-fonts.js");\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_fonts_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_summernote_plugin_summernote_ext_mbr_fonts_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_color_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./summernote/plugin/summernote-ext-mbr-color.js */ "./web/app/builder/summernote/plugin/summernote-ext-mbr-color.js");\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_color_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_summernote_plugin_summernote_ext_mbr_color_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_link_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./summernote/plugin/summernote-ext-mbr-link.js */ "./web/app/builder/summernote/plugin/summernote-ext-mbr-link.js");\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_link_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_summernote_plugin_summernote_ext_mbr_link_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_align_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./summernote/plugin/summernote-ext-mbr-align.js */ "./web/app/builder/summernote/plugin/summernote-ext-mbr-align.js");\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_align_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_summernote_plugin_summernote_ext_mbr_align_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_multiline_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./summernote/plugin/summernote-ext-mbr-multiline.js */ "./web/app/builder/summernote/plugin/summernote-ext-mbr-multiline.js");\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_multiline_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_summernote_plugin_summernote_ext_mbr_multiline_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_iconfont_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./summernote/plugin/summernote-ext-mbr-iconfont.js */ "./web/app/builder/summernote/plugin/summernote-ext-mbr-iconfont.js");\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_iconfont_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_summernote_plugin_summernote_ext_mbr_iconfont_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_short_mode_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./summernote/plugin/summernote-ext-mbr-short-mode.js */ "./web/app/builder/summernote/plugin/summernote-ext-mbr-short-mode.js");\n/* harmony import */ var _summernote_plugin_summernote_ext_mbr_short_mode_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_summernote_plugin_summernote_ext_mbr_short_mode_js__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _assets_bootbox_bootbox_min_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../assets/bootbox/bootbox.min.js */ "./web/assets/bootbox/bootbox.min.js");\n/* harmony import */ var _assets_bootbox_bootbox_min_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_assets_bootbox_bootbox_min_js__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _assets_tooltipster_js_jquery_tooltipster_min_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../assets/tooltipster/js/jquery.tooltipster.min.js */ "./web/assets/tooltipster/js/jquery.tooltipster.min.js");\n/* harmony import */ var _assets_tooltipster_js_jquery_tooltipster_min_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_assets_tooltipster_js_jquery_tooltipster_min_js__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _js_builder_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./js/builder.js */ "./web/app/builder/js/builder.js");\n/* harmony import */ var _js_builder_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_js_builder_js__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _js_builder_components_load_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./js/builder-components-load.js */ "./web/app/builder/js/builder-components-load.js");\n/* harmony import */ var _js_builder_components_load_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_js_builder_components_load_js__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _js_builder_components_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./js/builder-components.js */ "./web/app/builder/js/builder-components.js");\n/* harmony import */ var _js_builder_components_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_js_builder_components_js__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _js_builder_pages_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./js/builder-pages.js */ "./web/app/builder/js/builder-pages.js");\n/* harmony import */ var _js_builder_pages_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_js_builder_pages_js__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _js_builder_cleaners_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./js/builder-cleaners.js */ "./web/app/builder/js/builder-cleaners.js");\n/* harmony import */ var _js_builder_cleaners_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_js_builder_cleaners_js__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var _js_builder_plugin_media_editor_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./js/builder-plugin-media-editor.js */ "./web/app/builder/js/builder-plugin-media-editor.js");\n/* harmony import */ var _js_builder_plugin_media_editor_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_js_builder_plugin_media_editor_js__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var _js_builder_plugin_summernote_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./js/builder-plugin-summernote.js */ "./web/app/builder/js/builder-plugin-summernote.js");\n/* harmony import */ var _js_builder_plugin_summernote_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_js_builder_plugin_summernote_js__WEBPACK_IMPORTED_MODULE_20__);\n/* harmony import */ var _js_builder_plugin_iconfont_editor_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./js/builder-plugin-iconfont-editor.js */ "./web/app/builder/js/builder-plugin-iconfont-editor.js");\n/* harmony import */ var _js_builder_plugin_iconfont_editor_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_js_builder_plugin_iconfont_editor_js__WEBPACK_IMPORTED_MODULE_21__);\n/* harmony import */ var _js_builder_plugin_tooltips_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./js/builder-plugin-tooltips.js */ "./web/app/builder/js/builder-plugin-tooltips.js");\n/* harmony import */ var _js_builder_plugin_tooltips_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(_js_builder_plugin_tooltips_js__WEBPACK_IMPORTED_MODULE_22__);\n/* harmony import */ var _js_builder_plugin_sortable_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./js/builder-plugin-sortable.js */ "./web/app/builder/js/builder-plugin-sortable.js");\n/* harmony import */ var _js_builder_plugin_sortable_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(_js_builder_plugin_sortable_js__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var _js_builder_plugin_class_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./js/builder-plugin-class.js */ "./web/app/builder/js/builder-plugin-class.js");\n/* harmony import */ var _js_builder_plugin_class_js__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(_js_builder_plugin_class_js__WEBPACK_IMPORTED_MODULE_24__);\n/* harmony import */ var _js_builder_migrate_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./js/builder-migrate.js */ "./web/app/builder/js/builder-migrate.js");\n/* harmony import */ var _js_builder_migrate_js__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(_js_builder_migrate_js__WEBPACK_IMPORTED_MODULE_25__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvYXBwL2J1aWxkZXIvYnVpbGQuanM/MmJmZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXlDOztBQUVDOztBQUVQO0FBQ0E7QUFDc0I7QUFDRDtBQUNBO0FBQ0Q7QUFDQztBQUNJO0FBQ0Q7QUFDRTs7QUFFakI7O0FBRWtCOztBQUV0QztBQUNnQjtBQUNMO0FBQ0w7QUFDRztBQUNXO0FBQ0Y7QUFDSztBQUNQO0FBQ0E7QUFDSCIsImZpbGUiOiIuL3dlYi9hcHAvYnVpbGRlci9idWlsZC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uLy4uL2Fzc2V0cy9sZXNzLmpzL2xlc3MubWluLmpzXCJcblxuaW1wb3J0IFwiLi4vLi4vYXNzZXRzL3NwZWN0cnVtL3NwZWN0cnVtLmpzXCJcblxuaW1wb3J0IFwiLi9zdW1tZXJub3RlL3N1bW1lcm5vdGUuanNcIlxuaW1wb3J0IFwiLi9zdW1tZXJub3RlL2xhbmcvZW4tVVMuanNcIlxuaW1wb3J0IFwiLi9zdW1tZXJub3RlL3BsdWdpbi9zdW1tZXJub3RlLWV4dC1tYnItYnV0dG9uLmpzXCJcbmltcG9ydCBcIi4vc3VtbWVybm90ZS9wbHVnaW4vc3VtbWVybm90ZS1leHQtbWJyLWZvbnRzLmpzXCJcbmltcG9ydCBcIi4vc3VtbWVybm90ZS9wbHVnaW4vc3VtbWVybm90ZS1leHQtbWJyLWNvbG9yLmpzXCJcbmltcG9ydCBcIi4vc3VtbWVybm90ZS9wbHVnaW4vc3VtbWVybm90ZS1leHQtbWJyLWxpbmsuanNcIlxuaW1wb3J0IFwiLi9zdW1tZXJub3RlL3BsdWdpbi9zdW1tZXJub3RlLWV4dC1tYnItYWxpZ24uanNcIlxuaW1wb3J0IFwiLi9zdW1tZXJub3RlL3BsdWdpbi9zdW1tZXJub3RlLWV4dC1tYnItbXVsdGlsaW5lLmpzXCJcbmltcG9ydCBcIi4vc3VtbWVybm90ZS9wbHVnaW4vc3VtbWVybm90ZS1leHQtbWJyLWljb25mb250LmpzXCJcbmltcG9ydCBcIi4vc3VtbWVybm90ZS9wbHVnaW4vc3VtbWVybm90ZS1leHQtbWJyLXNob3J0LW1vZGUuanNcIlxuXG5pbXBvcnQgXCIuLi8uLi9hc3NldHMvYm9vdGJveC9ib290Ym94Lm1pbi5qc1wiXG5cbmltcG9ydCBcIi4uLy4uL2Fzc2V0cy90b29sdGlwc3Rlci9qcy9qcXVlcnkudG9vbHRpcHN0ZXIubWluLmpzXCJcblxuaW1wb3J0IFwiLi9qcy9idWlsZGVyLmpzXCJcbmltcG9ydCBcIi4vanMvYnVpbGRlci1jb21wb25lbnRzLWxvYWQuanNcIlxuaW1wb3J0IFwiLi9qcy9idWlsZGVyLWNvbXBvbmVudHMuanNcIlxuaW1wb3J0IFwiLi9qcy9idWlsZGVyLXBhZ2VzLmpzXCJcbmltcG9ydCBcIi4vanMvYnVpbGRlci1jbGVhbmVycy5qc1wiXG5pbXBvcnQgXCIuL2pzL2J1aWxkZXItcGx1Z2luLW1lZGlhLWVkaXRvci5qc1wiXG5pbXBvcnQgXCIuL2pzL2J1aWxkZXItcGx1Z2luLXN1bW1lcm5vdGUuanNcIlxuaW1wb3J0IFwiLi9qcy9idWlsZGVyLXBsdWdpbi1pY29uZm9udC1lZGl0b3IuanNcIlxuaW1wb3J0IFwiLi9qcy9idWlsZGVyLXBsdWdpbi10b29sdGlwcy5qc1wiXG5pbXBvcnQgXCIuL2pzL2J1aWxkZXItcGx1Z2luLXNvcnRhYmxlLmpzXCJcbmltcG9ydCBcIi4vanMvYnVpbGRlci1wbHVnaW4tY2xhc3MuanNcIlxuaW1wb3J0IFwiLi9qcy9idWlsZGVyLW1pZ3JhdGUuanNcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./web/app/builder/build.js\n')},"./web/app/builder/js/builder-cleaners.js":
/*!************************************************!*\
  !*** ./web/app/builder/js/builder-cleaners.js ***!
  \************************************************/
/*! no static exports found */function(module,exports){eval("/**\n * @module mbrAppCore/cleaners\n */\n(function($, CORE) {\n    'use strict';\n\n    // uncomment jquery plugin\n    // Author: Romuald Brunet <romuald@chivil.com>\n    // usage: $('body').uncomment(true, 'ABC');\n    // will remove all html comments with ABC inside\n    $.fn.uncomment = function(recurse, contains) {\n        $(this).contents().each(function() {\n            if(this.tagName === 'IFRAME') {\n                // do nothing\n            } else if ( recurse && this.hasChildNodes() ) {\n                $(this).uncomment(recurse, contains);\n            } else if ( this.nodeType == 8 ) {\n                if(contains && !RegExp(contains, 'g').test(this.nodeValue)) {\n                    return;\n                }\n                $(this).remove();\n            }\n        });\n    };\n\n    var recursiveReplace = function(str, regexp, replaceStr) {\n        var newStr = str.replace(regexp, replaceStr);\n        if(newStr === str) {\n            return newStr;\n        } else {\n            return recursiveReplace(newStr, regexp, replaceStr);\n        }\n    }\n\n    CORE.regExtension({\n        name: 'cleaners',\n        /** @lends module:mbrAppCore/cleaners */\n        global: {\n\n           /**\n            * clean html string / jquery object\n            *\n            * remove all Mobirise attributes / classnames\n            * @param HTML\n            * @param forJSON\n            */\n            cleanHTMLplease: function(HTML, forJSON) {\n                var isString = typeof HTML == 'string';\n                var isJQuery = typeof HTML == 'object' && !!HTML.jQuery;\n\n                // check if no html string and no jquery object - return with no changes\n                if(!isString && !isJQuery) {\n                    return HTML;\n                }\n\n                // add wrapper\n                HTML = $('<div>').html(HTML);\n\n                // find <b> and <i> tags and change it to <strong> and <em>\n                HTML.find('b:not([class])').each(function() {\n                    let attributes = this.attributes;\n                    const $strong = $('<strong>' + this.innerHTML + '</strong>')\n                    $(this).replaceWith($strong);\n                    for (const attr of attributes) {\n                        $strong.attr(attr.name, attr.value);\n                    }\n                });\n                \n                HTML.find('i:not([class])').each(function() {\n                    let attributes = this.attributes;\n                    const $em = $('<em>' + this.innerHTML + '</em>')\n                    $(this).replaceWith($em);\n                    for (const attr of attributes) {\n                        $em.attr(attr.name, attr.value);\n                    }\n                });\n\n                // find [data-app-remove-it] attr and remove item\n                HTML.find('[data-app-remove-it]').remove();\n\n                // find and remove attributes / classnames / styles\n                HTML.find('[data-app-edit], [data-app-btn]')\n                    .removeAttr('data-app-edit contenteditable id' + (forJSON?'':' data-app-btn data-app-list-item'))\n                    .removeClass('note-air-editor note-editable');\n\n                // remove all mbr-... attributes\n                HTML.find('*').each(function() {\n                    var attributes = '';\n                    for (var i = 0, atts = this.attributes, n = atts.length; i < n; i++) {\n                        if(/mbr-/g.test(atts[i].nodeName)) {\n                            attributes += atts[i].nodeName + ' ';\n                        }\n                    }\n                    $(this).removeAttr(attributes);\n                });\n\n                // remove revets comments\n                HTML.uncomment(true, 'rivets:');\n\n                // remove menu items classname\n                if(!forJSON) {\n                    HTML.find('.mbr-menu-item').removeClass('mbr-menu-item');\n\n                    // remove toolbar attrs\n                    HTML.find('[data-toolbar]').removeAttr('data-toolbar');\n\n                    // remove placeholder attrs\n                    HTML.find('[data-app-placeholder]').removeAttr('data-app-placeholder');\n\n                    // remove selector attrs\n                    HTML.find('[data-app-selector]').removeAttr('data-app-selector');\n\n                    // remove multiline attrs\n                    HTML.find('[data-multiline]').removeAttr('data-multiline');\n                }\n\n                // remove image attrs\n                HTML.find('[data-app-img-width], [data-app-img-height]')\n                    .removeAttr('data-app-img-width data-app-img-height');\n\n\n                /**\n                 * clean html filter\n                 * @filter mbrAppCore->cleanHTMLplease\n                 * @param {jQuery} HTML\n                 * @param {Bool} forJSON\n                 */\n                HTML = this.applyFilter('cleanHTMLplease', HTML, forJSON);\n\n                if(isString) {\n                    HTML = HTML.html();\n\n                    // fix for iframe\n                    HTML = HTML.replace(/(<iframe\\b[^>]*>)(.*?)(<\\/iframe>)/g, function($0, $1, $2, $3) {\n                        $2 = recursiveReplace($2, /\\&amp;/g, '&');\n                        $2 = $('<textarea/>').html($2).text();\n                        return $1 + $2 + $3;\n                    });\n                } else {\n                    HTML = HTML.unwrap();\n                }\n\n                return HTML;\n            },\n\n            /**\n             * Checking object serializability\n             * @param  {Object} obj\n             * @return {Bool}\n             */\n            isSerializableObject: function(obj) {\n                return (typeof obj == 'object') && (Array.isArray(obj) || $.isPlainObject(obj));\n            },\n\n           /**\n            * clean project json - remove some system settings and clean html strings\n            *\n            * remove all Mobirise attributes / classnames\n            * @param project\n            * @param {Bool} HTMLonly only clean html strings without settings\n            */\n            cleanJSONPlease: function(project, HTMLonly) {\n                if(this.isSerializableObject(project)) {\n                    for(var k in project) {\n                        // remove _id\n                        // remove functions\n                        if(/_id|_alwaysTop|_alwaysBottom|_positionAbsolute|_noDrag|_once|_group|_global|_autoPadding|_css|_js|_plugins/g.test(k) || typeof project[k] === 'function') {\n                            if(!HTMLonly) {\n                                delete project[k];\n                            }\n                        } else {\n                            project[k] = this.cleanJSONPlease(project[k], HTMLonly);\n                        }\n                    }\n                }\n                \n                // clean html\n                else if (typeof project === 'string' && /data-app-btn=|contenteditable=|note-editable/g.test(project)) {\n                    project = this.cleanHTMLplease( project, true );\n                }\n\n                return project;\n            }\n        }\n    });\n}(jQuery, mbrAppCore));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder-cleaners.js\n")},"./web/app/builder/js/builder-components-load.js":
/*!*******************************************************!*\
  !*** ./web/app/builder/js/builder-components-load.js ***!
  \*******************************************************/
/*! no static exports found */function(module,exports){eval("/**\n * @module  mbrAppCore/components-load\n *\n * @description components load\n *\n *\n */\n(function($, CORE) {\n    'use strict';\n\n    var renderTimeout;\n    var $insertBefore = $('#insertBefore');\n\n\n    CORE.regExtension({\n        name: 'components-load',\n        /** @lends module:mbrAppCore/components-load */\n        global: {\n           /**\n            * Clear all blocks\n            */\n            clearBlocks: function() {\n               /**\n                * @event mbrAppCore:clearBlocks\n                */\n                this.fire('clearBlocks');\n                this.$template.html('');\n               /**\n                * @event mbrAppCore:clearedBlocks\n                */\n                this.fire('clearedBlocks');\n            },\n\n           /**\n            * Prepare Component Blocks for designer\n            * @param {Object} component - component params\n            * @return {String} html - result html\n            */\n            prepareComponent: function(component) {\n                var result = '';\n\n                // if component not available\n                if((CORE.theme.type == 'secondary' ? false : typeof CORE.components[component._name] === 'undefined') || typeof component._id === 'undefined') {\n                    return result;\n                }\n\n                var draggable = !component._noDrag;\n                var alwaysBottom = component._alwaysBottom;\n                var alwaysTop = component._alwaysTop;\n                var posAbsolute = component._positionAbsolute;\n\n                var withParams = component._params;\n\n                const paramsCheck = function() {\n                    return typeof withParams === 'object' && withParams && Object.keys(withParams).length\n                }\n\n                result += [\n                    '<div class=\"app-component'+(draggable?'':' no-sortable')+(posAbsolute?' pos-absolute':'')+'\" data-app-component-id=\"'+component._id+'\"'+(alwaysBottom?' data-app-always-bottom=\"true\"':'')+(alwaysTop?' data-app-always-top=\"true\"':'')+'>',\n                        '<div class=\"app-component-menu\">',\n                            '<div class=\"app-component-edit\">',\n                                draggable?'<span class=\"mbr-btn sortable mbr-icon-arrows-vertical\" data-tooltipster=\"bottom\" title=\"Drag Block\"></span>':'',\n                                paramsCheck()?'<span class=\"mbr-btn component-params mbr-icon-cog\" data-tooltipster=\"bottom\" title=\"Block Parameters\"></span>':'',\n                                '<span class=\"mbr-btn component-remove mbr-icon-trash\" data-tooltipster=\"bottom\" title=\"Remove Block\"></span>',\n                                '<span class=\"mbr-btn component-show-more mbr-icon-horizontal-ellipsis\" data-tooltipster=\"bottom\" title=\"Show More\"></span>',\n                            '</div>',\n                        '</div>',\n                        '<div class=\"app-component-content\"></div>',\n                    '</div>'\n                ].join('');\n\n                /**\n                 * Prepare component\n                 * @filter mbrAppCore->prepareComponent\n                 * @param {String} componentStringSkeleton\n                 * @param {Object} component\n                 */\n                return this.applyFilter('prepareComponent', result, component);\n            },\n           /**\n            * Prepare All Component Blocks\n            * @param components\n            */\n            prepareAllComponents: function(components) {\n                var result = '';\n\n                //filter restricted components\n                components = components.filter(function(el) {\n                    if (!Object.keys(CORE.APP.restrictedAddons).length) return true;\n                    return !CORE.APP.restrictedAddons[el.alias]; \n                });\n\n                // prepare all top components\n                for(var k in components) {\n                    if(components[k]._alwaysTop) {\n                        result += this.prepareComponent(components[k]);\n                    }\n                }\n\n                // prepare all components instead bottom\n                for(var k in components) {\n                    if(!components[k]._alwaysBottom && !components[k]._alwaysTop) {\n                        result += this.prepareComponent(components[k]);\n                    }\n                }\n\n                // prepare all bottom components\n                for(var k in components) {\n                    if(components[k]._alwaysBottom) {\n                        result += this.prepareComponent(components[k]);\n                    }\n                }\n\n                return result;\n            },\n\n            publishAssets: [],\n           /**\n            * prepare style.css and script.js of component\n            * @param componentName\n            */\n            prepareComponentAssets: function(componentName) {\n\n                var component = CORE.components[componentName];\n                var path = (component.alias ? CORE.APP.getAddonDir(component.alias) : this.theme.pathExport + '/components') + '/' + componentName;\n                var pathCore = component.alias? path: this.theme.pathCore + '/components/' + componentName\n\n                // style.css\n                if(component._css) {\n                    // add to list of assets\n                    this.publishAssets.push({\n                        src: path + '/style.css',\n                        dest: 'assets/mobirise/css/style.css'\n                    });\n\n                    // add link to head\n                    if(!$('#CSS-' + componentName).length) {\n                        $insertBefore.before('<link id=\"CSS-' + componentName + '\" rel=\"stylesheet\" href=\"' + pathCore + '/style.css\">');\n                    }\n                }\n\n                // script.js\n                if(component._js) {\n                    // add to list of assets\n                    this.publishAssets.push({\n                        src: path + '/script.js',\n                        dest: 'assets/mobirise/js/script.js'\n                    });\n\n                    // add link to head\n                    if(!$('#JS-' + componentName).length) {\n                        $insertBefore.before('<script id=\"JS-' + componentName + '\" src=\"' + pathCore + '/script.js\">');\n                    }\n                }\n            },\n\n\n           /**\n            * Load Components and append to prepared Blocks\n            * @param {Object} component - component params\n            * @param {jQuery} context - context to insert\n            * @param {Object} pageJSON\n            * @param {String} page - page name\n            * @param {bool} publish - request for is publish\n            */\n            loadEachComponent: function(component, context, pageJSON, page, publish) {\n\n                var name = component._name;\n                var _this = this;\n\n                if(CORE.isSecondaryComponent(component) && component._cid && !component._customHTML) {\n                    console.log(\"Error: component '\" + name + \"' is broken\");\n                    return;\n                };\n                if (publish && CORE.isSecondaryComponent(component)) {\n                    component = $.extend(true, {}, component);\n                }\n\n                if (component._id === undefined){\n                    console.log(\"Error: component '\" + name + \"' is not initialized\");\n                    return;\n                }\n\n                if (!component._sourceTheme) {\n                    component._sourceTheme = CORE.theme.name;\n                }\n\n                // if (CORE.APP.accountMode.isOffline() && !CORE.APP.isBuildInAddon(component._sourceTheme)) {\n                //     console.log(\"Error: component '\" + name + \"' from \" + component._sourceTheme + \" needs account information. Unavailable in the offline mode.\");\n                //     return;\n                // }\n\n                /**\n                 * Load component template\n                 * @filter mbrAppCore->loadComponentTemplate\n                 * @param {String} template - html template\n                 * @param {jQuery} context - context to insert\n                 * @param {bool} publish - request for is publish\n                 */\n                var templateHTML = _this.applyFilter('loadComponentTemplate', CORE.APP.cachedTemplates[name] || '', component, publish, component._styles || {});\n\n                // when there is cached template, use it\n                if(templateHTML) {\n                    // add uniq anchor\n                    if(typeof component._anchor === 'undefined') {\n                        // prefix for unique ID\n                        var prefix = component._name.replace(/^pro\\./i, '');\n                        prefix = prefix.replace(/\\./g, '_') + '-';\n\n\t\t\t\t\t\tcomponent._anchor = prefix + _this.getUniqCompName();\n                    }\n                   /**\n                    * @event mbrAppCore:loadComponent\n                    * @param {Object} component\n                    * @param {String} page\n                    * @param {jQuery} context\n                    */\n                    _this.fire('loadComponent', component, page, context);\n\n                    // render template\n                    var $sandbox = $( document.createElement('DIV') );\n                    var rendered = $sandbox.html(templateHTML).find('> *');\n\n                    // add some additional attributes\n                    rendered.find('[data-app-edit=\"content\"], [data-app-edit=\"full\"], [data-app-edit=\"buttons\"], [data-app-edit=\"menu\"]').each(function() {\n                        $(this).attr('mbr-content-edit', $(this).attr('mbr-html'));\n                    });\n\n                    // additional method for publish checking\n                    component._checkPublish = function() {\n                        return publish;\n                    }\n\n                    // render for adding to block\n                    // var _component = jQuery.extend(true, {}, component);\n                    //_this.replaceSystemVariables(component, component);\n\n                    rivets.bind(rendered, component);\n\n                    context.find('[data-app-component-id='+component._id+']')\n                        .find('> .app-component-content').html(rendered);\n\n                   /**\n                    * @event mbrAppCore:loadedComponent\n                    * @param {Object} component\n                    * @param {String} page  -- {String} publish before 3.06.4\n                    * @param {jQuery} context\n                    * @param {publish} boolean -- since 3.06.4\n                    */\n                    _this.fire('loadedComponent', component, page, context, publish);\n\n                    // fire publish filter\n                    if(publish && component._publishFilter) {\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tcomponent._publishFilter(context.find('[data-app-component-id=' + component._id + '] > .app-component-content'), pageJSON);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(e){\n\t\t\t\t\t\t\tconsole.error(\"Error of _publishFilter of component(\" + component._id + \") on the page(\" + page + \"):\", e);\n\t\t\t\t\t\t}\n                    }\n                }\n            },\n\n           /**\n            * Render Component Blocks\n            * @param id - component id, if undefined then render all components\n            * @param callback\n            */\n            render: function(id, callback) {\n                var _this = this;\n                clearTimeout(renderTimeout);\n                renderTimeout = setTimeout(function() {\n\n                   /**\n                    * @event mbrAppCore:render\n                    * @param id\n                    */\n                    _this.fire('render', id);\n\n                    try {\n                        // render the specified component by ID\n                        if(typeof id !== 'undefined') {\n                            var component = _this.getComponent(id);\n\n                            // load each component content\n                            _this.loadEachComponent(component, _this.$template, _this.resultJSON[_this.currentPage], _this.currentPage, false);\n\n                            // fire _onParamsChange without any var names and values\n                            if(typeof component._onParamsChange !== 'undefined') {\n                                try{\n                                    component._onParamsChange(_this.$template.find('[data-app-component-id=' + id + '] > .app-component-content'));\n                                }\n                                catch(e){\n                                    console.log(\"Error execution _onParamsChange of compoment(_name=\", component&&component._name, \", _id-\", component&&component._id, \"):\", e)\n                                }\n                            }\n                        }\n\n                        // render all components\n                        else {\n                            _this.clearBlocks();\n                            var components = _this.resultJSON[_this.currentPage].components;\n                            var preparedHtml = _this.prepareAllComponents(components);\n                            var brokenBlocks = [];\n                            var restrictedBlocks = [];\n\n                            // append all blocks\n                            _this.$template.append(preparedHtml);\n\n                            // load each component content\n                            for(var k in components) {\n                                var component = components[k];\n                                if ( component._id === undefined ) {\n                                    continue;\n                                }\n\n                                // Search for broken blocks\n                                if(CORE.isSecondaryComponent(component) && component._cid && !component._customHTML) {\n                                    console.log(\"Error: component '\" + component._name + \"' is broken\");\n                                    brokenBlocks.push(component._id);\n                                    continue;\n                                };\n\n                                // Search for restricted blocks\n                                if(component.alias && CORE.APP.restrictedAddons[component.alias]) {\n                                    console.log(\"Error: component '\" + component._name + \"' is restricted\");\n                                    restrictedBlocks.push(component._id);\n                                    continue;\n                                };\n\n                                _this.loadEachComponent(component, _this.$template, _this.resultJSON[_this.currentPage], _this.currentPage, false);\n\n                                // fire _onParamsChange without any var names and values\n                                if(typeof component._onParamsChange !== 'undefined') {\n                                    try{\n                                        component._onParamsChange(_this.$template.find('[data-app-component-id=' + component._id + '] > .app-component-content'));\n                                    }\n                                    catch(e){\n                                        console.log(\"Error execution _onParamsChange of compoment(_name=\", component&&component._name, \", _id-\", component&&component._id, \"):\", e)\n                                    }\n                                }\n                            }\n\n                            if (brokenBlocks.length) {\n                                _this.showDialog({\n                                    title: CORE.APP.TR('Broken blocks were found. Remove them?'),\n                                    cancelLabel: CORE.APP.TR('Skip'),\n                                    successLabel: CORE.APP.TR('Remove'),\n                                    success: () => {\n                                        _this.resultJSON[_this.currentPage].components = components.filter(comp => !brokenBlocks.includes(comp._id));\n                                        CORE.APP.runSaveProject();\n                                    },\n                                    cancel: () => {}\n                                });\n                            }\n\n                            if (restrictedBlocks.length) {\n                                _this.resultJSON[_this.currentPage].components = components.filter(comp => !restrictedBlocks.includes(comp._id));\n                                CORE.APP.runSaveProject();\n                            }\n                        }   \n                    }\n                    catch(err){\n                        console.log(err);\n                    }\n\n                   /**\n                    * @event mbrAppCore:rendered\n                    * @param id\n                    */\n                    _this.fire('rendered', id);\n\n                    if(typeof callback === 'function') {\n                        callback();\n                    }\n                }, 50);\n            }\n        },\n        events: {}\n    });\n}(jQuery, mbrAppCore));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder-components-load.js\n")},"./web/app/builder/js/builder-components.js":
/*!**************************************************!*\
  !*** ./web/app/builder/js/builder-components.js ***!
  \**************************************************/
/*! no static exports found */function(module,exports){eval("/**\n * @module  mbrAppCore/components\n *\n * @description components\n *\n * @listens module:mbrAppCore/plugins/sortable~mbrAppCore:changeComponentPosition\n * @listens module:mbrAppCore/components-load~mbrAppCore:rendered\n *\n * @ADDON_DIR@\n * @USER_EMAIL@\n */\n(function($, CORE) {\n    'use strict';\n\n    var $addStyles = $('<style name=\"theme-styles\">').appendTo('body');\n\n    CORE.regExtension({\n        name: 'components',\n        /** @lends module:mbrAppCore/components */\n        global: {\n            /**\n             * replace variables in string like @USER_EMAIL@, @ADDON_DIR@\n             * @param {String} str\n             * @param component\n             * @return {String}\n             */\n            replaceSystemVariables: function(str, component) {\n                var _this = this;\n\n                if (typeof str === 'string') {\n                    if (/@USER_EMAIL@/g.test(str)) {\n                        var user_email = (function() {\n                            var userInfo = _this.APP.getUserInfo();\n                            if (userInfo && userInfo.email) {\n                                return userInfo.email;\n                            }\n                            return '';\n                        }());\n                        str = str.replace(/@USER_EMAIL@/g, user_email);\n                    }\n                    //\n                    if (/@ADDON_DIR@/g.test(str)) {\n                        // alias\n                        str = str.replace(/@ADDON_DIR@/g,\n                            _this.APP.path2core(_this.APP.getAddonDir(component.alias || _this.APP.theme.name)) + (component.alias ? '/' : '/components/')\n                        );\n                    }\n                    if (/@SITES@/g.test(str)) {\n                        // replace @SITES@/id with project resource url\n                        str = str.replace(new RegExp(`${CORE.APP.projectSettings.path}/`,'g'), CORE.APP.projectSettings.resourcesUrl);\n                    }\n                    /**\n                     * Replace System Variables like @USER_EMAIL@, @ADDON_DIR@\n                     * @filter mbrAppCore->replaceSystemVariables\n                     * @param {String} str\n                     * @param {Object} component\n                     */\n                    str = _this.applyFilter('replaceSystemVariables', str, component);\n                } else if (typeof str === 'object') {\n                    for (var k in str) {\n                        str[k] = _this.replaceSystemVariables(str[k], component);\n                    }\n                }\n\n                return str;\n            },\n\n\n            /**\n             * Add Component (without waiting for component to download)\n             * Note: component must be real\n             * @param {String} name\n             * @param {Object} insertTo\n             *        @param {String} insertTo.item - id of semi-detached element\n             *        @param {String} insertTo.where - \"before\"\n             * @param {jQueryNode} domSource (since 3.7.1+)\n             */\n            addComponent: function(name, insertTo, domSource) {\n                var def = $.Deferred();\n\n                var newComponent = $.extend(true, {}, this.components[name]);\n                if (!insertTo || !insertTo.item || !insertTo.where) {\n                    insertTo = false;\n                }\n\n                // check if component isset\n                var issetComponent = 0;\n                for (var k in this.APP.components) {\n                    if (k === name) {\n                        issetComponent = 1;\n                        break;\n                    }\n                }\n                if (!issetComponent && !CORE.APP.theme.type == 'secondary') {\n                    return;\n                }\n\n                // replace system variables\n                newComponent = this.replaceSystemVariables(newComponent, newComponent);\n\n                // check _once parameter and stop if this block added\n                if (newComponent._once) {\n                    for (var k in this.resultJSON[this.currentPage].components) {\n                        if (this.resultJSON[this.currentPage].components[k]._name == name) {\n                            return;\n                        }\n                    }\n                }\n\n                /**\n                 * @event mbrAppCore:addComponent\n                 * @param {String} name\n                 */\n                this.fire('addComponent', name);\n\n                // copy from same global component if exist\n                var globalCopied;\n                if (newComponent._global) {\n                    for (var k in this.resultJSON) {\n                        for (var n in this.resultJSON[k].components) {\n                            if (this.resultJSON[k].components[n]._global && this.resultJSON[k].components[n]._name == name) {\n                                for (var s in this.resultJSON[k].components[n]) {\n                                    // if(!/^_/g.test(s)) {\n                                    newComponent[s] = this.resultJSON[k].components[n][s];\n                                    // }\n                                }\n                                // newComponent = $.extend(true, {}, this.resultJSON[k].components[n]);\n                                globalCopied = true;\n                                continue;\n                            }\n                        }\n                    }\n                }\n\n                // add default params for new component\n                if (!globalCopied && newComponent._params) {\n                    for (var k in newComponent._params) {\n                        newComponent._params[k] = newComponent._params[k].default;\n                    }\n                }\n\n                // insert to\n                var spliceNum = this.resultJSON[this.currentPage].components.length;\n                if (insertTo) {\n                    for (var k in this.resultJSON[this.currentPage].components) {\n                        if (this.resultJSON[this.currentPage].components[k]._id == insertTo.item) {\n                            if (insertTo.where == 'before') {\n                                spliceNum = k;\n                            } else {\n                                spliceNum = parseFloat(k) + 1;\n                            }\n                        }\n                    }\n                }\n\n                /**\n                 * Add component\n                 * @filter mbrAppCore->addComponent\n                 * @param {Object} component\n                 * @param {Boolean} globalCopied (since 3.7.1+)\n                 * @param {jQueryNode} domSource (since 3.7.1+)\n                 */\n                var id = this.uniqNum();\n                var filteredComponent = CORE.applyFilter('addComponent', $.extend(true, newComponent, { _name: name, _id: id }), globalCopied, domSource);\n\n                if (filteredComponent && typeof filteredComponent.then === 'function') {\n                    filteredComponent.then(\n                        function(resultComponent) {\n                            CORE.resultJSON[CORE.currentPage].components.splice(spliceNum, 0, resultComponent);\n                            renderComponent();\n                        },\n                        function(error) {\n                            CORE.render(undefined);\n                            def.reject();\n                        }\n                    );\n                } else {\n                    CORE.resultJSON[CORE.currentPage].components.splice(spliceNum, 0, filteredComponent);\n                    renderComponent();\n                };\n\n                function renderComponent() {\n                    // prepare component html\n                    var component = CORE.resultJSON[CORE.currentPage].components[spliceNum];\n                    var preparedHtml = CORE.prepareComponent(component);\n\n                    var scrollTop = 0;\n\n                    // insert new item to drag place\n                    if (\n                        insertTo &&\n                        !component._alwaysBottom &&\n                        !component._alwaysTop\n                    ) {\n                        var insertItem = CORE.$template.find('[data-app-component-id=' + insertTo.item + ']');\n                        if (insertTo.where == 'before' || insertItem.attr('data-app-always-bottom')) {\n                            insertItem.before(preparedHtml);\n                            scrollTop = insertItem.offset().top;\n                        } else {\n                            insertItem.after(preparedHtml);\n                            scrollTop = insertItem.offset().top + insertItem.height();\n                        }\n                    }\n\n                    // insert to top\n                    else if (component._alwaysTop) {\n                        CORE.$template.prepend(preparedHtml);\n\n                        // scroll to component\n                        scrollTop = 0;\n                    }\n\n                    // insert to bottom\n                    else {\n                        var bottomComponent = CORE.$template.find('[data-app-always-bottom]:eq(0)');\n                        if (bottomComponent.length) {\n                            bottomComponent.before(preparedHtml);\n                        } else {\n                            CORE.$template.append(preparedHtml);\n                        }\n\n                        // scroll to component\n                        scrollTop = CORE.$template.height();\n                    }\n\n                    // scroll to element\n                    $('html').stop().animate({ scrollTop: scrollTop }, 1000);\n\n                    CORE.render(id);\n\n                    /**\n                     * @event mbrAppCore:addedComponent\n                     * @param id\n                     */\n                    CORE.fire('addedComponent', id);\n\n                    def.resolve();\n                };\n\n                return def.promise();\n\n            },\n\n            /**\n             * Return all variables of component by ID\n             * @param {String} id - component id (._id)\n             * @param {String} page - page name, currentPage by default\n             * @param {Bool} clone - return cloned instance of component object (without _id, _group), else return original PAGE.components[k]\n             * @return {Object} - component params object or false\n             */\n            getComponent: function(id, page, clone) {\n                page = page || this.currentPage;\n                for (var k in this.resultJSON[page].components) {\n                    if (this.resultJSON[page].components[k]._id == id) {\n                        var result = '';\n                        if (clone) {\n                            result = $.extend(true, {}, this.resultJSON[page].components[k]);\n                            delete result._id;\n                            delete result._group;\n                        } else {\n                            result = this.resultJSON[page].components[k];\n                        }\n                        /**\n                         * Get component\n                         * @filter mbrAppCore->getComponent\n                         * @param {Object} result - component params object or false\n                         * @param {String} id - component id (._id)\n                         * @param {String} page - page name\n                         * @param {Bool} clone\n                         */\n                        return this.applyFilter('getComponent', result, id, page, clone);\n                    }\n                }\n\n                return this.applyFilter('getComponent', false, id, page, clone);\n            },\n\n            /**\n             * Return next component by ID\n             * @param {String} id - component id (._id)\n             * @param {String} page\n             * @return {Object}\n             */\n            getNextComponent: function(id, page) {\n                page = page || this.currentPage;\n                var getNext;\n                for (var k in this.resultJSON[page].components) {\n                    if (getNext) {\n                        /**\n                         * Get next component\n                         * @filter mbrAppCore->getNextComponent\n                         * @param {Object} result - component params object or false\n                         * @param {String} componentId\n                         * @param {String} page - page name\n                         */\n                        return this.applyFilter('getNextComponent', this.resultJSON[page].components[k], id, page);\n                    }\n                    if (this.resultJSON[page].components[k]._id == id) {\n                        getNext = true;\n                    }\n                }\n                return this.applyFilter('getNextComponent', false, id, page);\n            },\n\n            /**\n             * Return previous component by ID\n             * @param id\n             * @param page\n             * @return {Object}\n             */\n            getPrevComponent: function(id, page) {\n                page = page || this.currentPage;\n                var getPrevious = false;\n                for (var k in this.resultJSON[page].components) {\n                    if (this.resultJSON[page].components[k]._id == id) {\n                        /**\n                         * Get previous component\n                         * @filter mbrAppCore->getPrevComponent\n                         * @param result component\n                         * @param componentId\n                         * @param page\n                         */\n                        return this.applyFilter('getPrevComponent', getPrevious, id, page);\n                    }\n                    getPrevious = this.resultJSON[page].components[k];\n                }\n                return this.applyFilter('getPrevComponent', false, id, page);\n            },\n\n            /**\n             * Remove Component by ID\n             * @param id\n             * @param page\n             * @param {Boolean} globalComp - if global, removing the component on all pages (since 4.10.5)\n             * @return {Boolean}\n             */\n            removeComponent: function(id, page, globalComp) {\n                page = page || this.currentPage;\n\n                for (var k in this.resultJSON[page].components) {\n                    if (this.resultJSON[page].components[k]._id == id) {\n                        var prevComponent = this.getPrevComponent(id, page);\n                        var nextComponent = this.getNextComponent(id, page);\n                        var _name = this.resultJSON[page].components[k]._name;\n\n                        // component dom\n                        var component = this.$template.find('[data-app-component-id=' + id + ']');\n\n                        /**\n                         * fire remove event\n                         * @event mbrAppCore:removeComponent\n                         * @param id\n                         * @param component\n                         * @param page\n                         */\n                        this.fire('removeComponent', id, component, page);\n\n                        // remove component from project\n                        this.resultJSON[page].components.splice(k, 1);\n\n                        // remove component\n                        if (page === this.currentPage) {\n                            component.remove();\n\n                            this.renderComponentsStyles();\n                        }\n\n                        /**\n                         * @event mbrAppCore:removedComponent\n                         * @param id\n                         * @param {Object} prevComponent (since 3.01)\n                         * @param {Object} nextComponent (since 3.01)\n                         * @param page\n                         */\n\n                        this.fire('removedComponent', id, prevComponent, nextComponent, page);\n\n                        // If component - global and need remove on all pages his (since 4.10.5)\n                        if (globalComp) {\n                            for (let k in this.resultJSON) {\n                                let page = this.resultJSON[k];\n\n                                page.components.forEach(function(v, i, arr) {\n                                    if (v._name === _name) {\n                                        arr.splice(i, 1);\n                                    }\n                                })\n                            }\n                        }\n\n                        return true;\n                    }\n                }\n                return false;\n            },\n\n            /**\n             * Change Component Position (when drag)\n             * @param id\n             * @param prevId\n             * @param oldPrevId\n             */\n            changeComponentPosition: function(id, prevId, oldPrevId) {\n                (function(items) {\n                    var element;\n                    for (var k in items) {\n                        if (items[k]._id == id) {\n                            element = items[k];\n                            items.splice(parseInt(k), 1);\n                            break;\n                        }\n                    }\n\n                    if (undefined === prevId) items.splice(0, 0, element);\n                    else {\n                        for (var k in items) {\n                            if (items[k]._id == prevId) {\n                                items.splice(parseInt(k) + 1, 0, element);\n                                break;\n                            }\n                        }\n                    }\n                })(this.resultJSON[this.currentPage].components);\n\n                /**\n                 * drag component event\n                 * @event mbrAppCore:changedComponentPosition\n                 * @param id\n                 * @param oldId\n                 */\n                this.fire('changedComponentPosition', id, oldPrevId);\n            },\n\n            /**\n             * Add Component Additional Styles\n             * @param {jQuery} $item\n             * @param {String} prop\n             * @param value\n             * @param googleLink\n             */\n            addComponentStyles: function($item, prop, value, googleLink) {\n                var _this = this,\n                    styles = {},\n                    id = $item.parents('[data-app-component-id]:eq(0)').attr('data-app-component-id'),\n                    component = _this.getComponent(id);\n                styles[prop] = value;\n\n                /**\n                 * Prevent component styles save\n                 * @filter mbrAppCore->preventComponentStylesSave\n                 * @param {Bool}\n                 * @param component\n                 * @param {jQuery} changed_item\n                 * @param property\n                 * @param value\n                 * @param googleLink\n                 */\n                if (!component || _this.applyFilter('preventComponentStylesSave', false, component, $item, prop, value, googleLink)) {\n                    return;\n                }\n\n                var selector = $item.attr('data-app-selector') ||\n                    ($item.hasClass('btn') ? '.btn' : '') ||\n                    $item.prop('tagName');\n\n                if (typeof component._onStylesChange === 'function' && !component._onStylesChange($item, prop, value, selector)) {\n                    return;\n                }\n\n                $item.parents('[data-app-selector]').each(function() {\n                    selector = $(this).attr('data-app-selector') + ' ' + selector;\n                });\n\n                if (typeof component._styles === 'undefined') {\n                    component._styles = {};\n                }\n                if (typeof component._styles[selector] === 'undefined') {\n                    component._styles[selector] = {};\n                }\n\n                $.extend(component._styles[selector], styles);\n\n                if (googleLink) {\n                    component._styles[selector].googleLink = googleLink;\n                }\n\n                /**\n                 * Add component styles\n                 * @filter mbrAppCore->addComponentStyles\n                 * @param styles\n                 * @param component\n                 * @param {jQuery} changed_item\n                 * @param property\n                 * @param value\n                 * @param googleLink\n                 */\n                component._styles = _this.applyFilter('addComponentStyles', component._styles, component, $item, prop, value, googleLink);\n\n                // change global params if exist\n                _this.updateGlobalComponents(id, function(current, global) {\n                    global._styles = current._styles;\n                });\n\n                _this.renderComponentsStyles();\n            },\n\n            /**\n             * get component styles\n             * @param ID\n             * @param deploy\n             * @return {Object}\n             */\n            getComponentStyles: (function() {\n\n                var compile = (function() {\n\n                    function CSS(styles) {\n                        this._rules = '';\n                        this._googleLinks = '';\n                        if (styles) {\n                            this._compile(styles, 0);\n                        }\n                    }\n\n                    CSS.prototype._compile = function(styles, level) {\n                        var spaces = '';\n                        for (var i = 0; i < level; i++) {\n                            spaces += '  ';\n                        }\n                        for (var selector in styles) {\n                            var value = styles[selector];\n                            if (typeof value == 'object') {\n                                this._rules += spaces + selector + ' {\\n';\n                                this._compile(value, level + 1);\n                                this._rules += spaces + '}\\n';\n                            } else if (selector === 'googleLink') {\n                                this._googleLinks += '@import url(' + value + ');\\n';\n                            } else {\n                                this._rules += spaces + selector + ': ' + value + ';\\n';\n                            }\n                        }\n                    };\n\n                    CSS.prototype.getRules = function() {\n                        return this._rules;\n                    };\n\n                    CSS.prototype.getGoogleLinks = function() {\n                        return this._googleLinks;\n                    };\n\n                    return function(styles) {\n                        return new CSS(styles);\n                    };\n\n                })();\n\n                return function(ID, deploy) {\n                    var component = ID;\n                    if (typeof ID === 'number') {\n                        component = this.getComponent(ID);\n                    }\n\n                    var css = compile(component._styles);\n\n                    /**\n                     * Get component styles\n                     * @filter mbrAppCore->getComponentStyles\n                     * @param {Object} styles\n                     * @param component\n                     * @param deploy\n                     */\n                    return this.applyFilter('getComponentStyles', {\n                        css: css.getRules(),\n                        google: deploy ? css.getGoogleLinks() : ''\n                    }, component, deploy);\n                };\n\n            })(),\n\n            /**\n             * render additional component styles\n             * @param deploy when true only return result, else add result in page styles\n             * @param page render current page styles, else render from this.currentPage\n             * @param component\n             * @return {Object}\n             */\n            renderComponentsStyles: function(deploy, page, component) {\n                var result = '';\n                var googleLinks = '';\n                page = page || this.currentPage;\n                var components = this.resultJSON[page].components;\n                deploy = deploy || false;\n\n                if (component && this.isSecondaryComponent(component) && !deploy) {\n                    var def = $.Deferred();\n                    var selector = this.applyFilter('componentSelector', '#' + component._anchor, component);\n                    var curStyles = this.getComponentStyles(component, deploy);\n\n                    // less compile\n                    less.render(\n                        /**\n                         * @filter mbrAppCore->beforeRenderStylesForComponent\n                         * @param styles\n                         * @param component\n                         */\n                        this.applyFilter('beforeRenderStylesForComponent', selector + ' {\\n' + curStyles.css + '}\\n', component),\n                        function(err, css) {\n                            if (err) {\n                                def.reject(err);\n                                console.log('Error while page (' + page + ') less render:', err);\n                            }\n                            else {\n                                def.resolve(css);\n                                $('[data-app-component-id=\"' + component._id + '\"] > style').html(css.css);\n                            }\n                        }\n                    );\n\n                    return def.promise();\n                }\n\n                for (var k in components) {\n                    if (this.isSecondaryComponent(components[k]) && components[k]._cid && !components[k]._customHTML) {\n                        console.log((components[k]._name || 'The Block') + ' is broken. Skip style rendering');\n                        continue;\n                    }\n                    /**\n                     * @filter mbrAppCore->componentSelector\n                     * @param selector\n                     * @param component\n                     */\n                    var selector = this.applyFilter('componentSelector', '#' + components[k]._anchor, components[k]);\n                    var curStyles = this.getComponentStyles(components[k], deploy);\n                    if (deploy || !this.isSecondaryComponent(components[k])) {\n                        result += '\\n' + selector + ' {\\n' + curStyles.css + '}\\n';\n                        googleLinks += curStyles.google;\n                        continue;\n                    }\n\n                    var $component = $('[data-app-component-id=\"' + components[k]._id + '\"]');\n                    if (!$component.find('> style').length) $component.append('<style/>');\n\n                    // less compile\n                    less.render(\n                        /**\n                         * @filter mbrAppCore->beforeRenderStylesForComponent\n                         * @param styles\n                         * @param component\n                         */\n                        this.applyFilter('beforeRenderStylesForComponent', selector + ' {\\n' + curStyles.css + '}\\n', components[k]),\n                        function(err, css) {\n                            if (err) {\n                                _this.APP.showError(('The following error occured while creating the ' + page + ' page:<br>Less render in the ' + components[k]._name + ' block: ' + err.message));\n                                $component.find('> style').html('');\n                            } else {\n                                $component.find('> style').html(css.css);\n                            }\n                        }\n                    );\n                }\n\n                /**\n                 * @filter mbrAppCore->beforeRenderStyles\n                 * @param result\n                 * @param components\n                 * @param deploy\n                 * @param page\n                 * @param googleLinks\n                 */\n                result = this.applyFilter('beforeRenderStyles', result, components, deploy, page, googleLinks);\n                \n                // less compile\n                less.render(result, function(err, css) {\n                    if (err) console.log('Error while page (' + page + ') less render:', err);\n                    else {\n                        result = css.css;\n                    }\n                });\n\n\n                if (deploy) {\n                    result = googleLinks + result;\n                    /**\n                     * @filter mbrAppCore->afterRenderStyles\n                     * @param result\n                     * @param components\n                     * @param deploy\n                     * @param page\n                     * @param googleLinks\n                     */\n                    return this.applyFilter('afterRenderStyles', result, components, deploy, page, googleLinks);\n                }\n\n                $addStyles.html(this.applyFilter('afterRenderStyles', result, components, deploy, page, googleLinks));\n            },\n\n            /**\n             * Focus Component Block\n             * @param {String} id - if ==\"x\" then unfocused all\n             */\n            focusComponentBlock: function(id) {\n                var $component = $('[data-app-component-id=\"' + id + '\"]');\n                if ($component.hasClass('focused')) // prevent double focus\n                    return;\n\n                /**\n                 * @event mbrAppCore:blurComponent\n                 * @param {String} id - component id\n                 */\n                var focused = $('[data-app-component-id].focused');\n                if (focused.length)\n                    CORE.fire('blurComponent', focused.attr('data-app-component-id'));\n\n                // unfocus all\n                $('[data-app-component-id]').removeClass('focused');\n\n                // focus one\n                if (id !== 'x') {\n                    $component.addClass('focused');\n                }\n\n                // if unfocus all manually\n                else {\n                    CORE.$body.find('.note-popover > *').attr('style', 'display: none;');\n                    CORE.$body.find('.sp-container').addClass('sp-hidden');\n                    CORE.$body.find('.sp-replacer').css('visibility', 'hidden');\n                }\n\n                /**\n                 * @event mbrAppCore:focusComponent\n                 * @param {String} id - if ==false then unfocused all\n                 */\n                CORE.fire('focusedComponent', id != 'x' && id);\n            },\n\n            /**\n             * Return ID of focused component\n             * @return {String} componentId\n             */\n            getFocusedComponentBlockId: function() {\n                return $('[data-app-component-id].focused').attr('data-app-component-id');\n            },\n\n            /**\n             * Get xomponent Block by Id\n             * @param  {String} id component id\n             * @return {DomNode}\n             */\n            getComponentBlock: function(id) {\n                return $('[data-app-component-id=\"' + id + '\"]').get(0);\n            },\n\n            // Convert params from array to object (array used in beta version 1)\n            // FROM:\n            //   {\n            //     logo: ['switch', 'Logo', true]\n            //   }\n            // TO:\n            //   {\n            //     logo: {\n            //       type: 'switch',\n            //       title: 'Logo',\n            //       default: true\n            //     }\n            //   }\n\n            /**\n             * Focus Component Block\n             * @param params\n             * @return {Object}\n             */\n            convertComponentParams: function(params) {\n                params = $.extend(true, {}, params);\n                var result = {};\n\n                for (var k in params) {\n                    // if array - prepare object\n                    if ($.isArray(params[k])) {\n                        result[k] = {};\n\n                        if (typeof params[k][0] !== 'undefined') {\n                            result[k].type = params[k][0];\n                        }\n                        if (typeof params[k][1] !== 'undefined') {\n                            result[k].title = params[k][1];\n                        }\n                        if (typeof params[k][2] !== 'undefined') {\n                            result[k].default = params[k][2];\n                        }\n                        if (typeof params[k][3] !== 'undefined') {\n                            result[k].values = params[k][3];\n                        }\n                    } else {\n                        result[k] = params[k];\n                    }\n                }\n\n                return result;\n            },\n\n            /**\n             * Return current component params\n             * @param id\n             * @param real\n             * @return {Object}\n             */\n            getComponentParams: function(id, real) {\n                var component = this.getComponent(id, false, !real);\n                var defaultParams = this.convertComponentParams((CORE.theme.type == 'secondary' && CORE.isSecondaryComponent(component)) ? component._params : this.components[component._name]._params);\n                /**\n                 * @filter mbrAppCore->getComponentParams\n                 * @param {Object}  params\n                 * @param {Object}  params.current - component params\n                 * @param {Object}  params.default - default Params\n                 * @param id - component ID\n                 */\n                return this.applyFilter('getComponentParams', {\n                    // current: real?component._params:$.extend(true, {}, component._params );\n                    current: component._params,\n                    'default': defaultParams\n                }, id);\n            },\n\n            /**\n             * Change component param\n             * @param id component ID\n             * @param {String} name param name\n             * @param value param value\n             */\n            changeComponentParams: function(id, name, value) {\n                var _this = this;\n                var component = this.getComponent(id);\n                var params = component._params;\n                var extend = false;\n                var $item = _this.$template.find('[data-app-component-id=' + id + '] > .app-component-content');\n\n                /**\n                 * @event mbrAppCore:changeComponentParams\n                 * @param id\n                 * @param {String} name\n                 * @param value\n                 */\n                _this.fire('changeComponentParams', id, name, value);\n\n                // save current params\n                function update(main, name, newVal, current) {\n                    if (extend) {\n                        if ($.isArray(main[name]) && typeof main[name][Object.keys(main[name])[0]] === 'object') {\n                            for (var k in newVal) {\n                                $.extend(main[name][k], newVal[k]);\n                            }\n                        } else {\n                            $.extend(main[name], newVal);\n                        }\n                    } else {\n                        main[name] = newVal;\n                    }\n\n                    if (current) {\n                        $.extend(main, current);\n                    }\n                }\n\n                // change params only if name isset\n                if (name) {\n                    // fix for parallax backgrounds\n                    if (name === 'bgImage' || name === 'parallax' || name === 'bgImageRadio') {\n                        $item.trigger('destroy.parallax');\n                    }\n\n                    if (typeof value == 'object') {\n                        var cnt1 = 0;\n                        var cnt2 = 0;\n                        for (var z in params[name]) { cnt1++; }\n                        for (var z in value) { cnt2++; }\n\n                        extend = cnt2 <= cnt1;\n                    }\n                    /**\n                     * @filter mbrAppCore->changeComponentParams\n                     * @param value\n                     * @param {String} param_name\n                     * @param params\n                     * @param {String} id - component ID  (since v3.03.1+)\n                     */\n                    value = this.applyFilter('changeComponentParams', value, name, params, id);\n\n                    update(params, name, value);\n\n                    // change global params if exist\n                    this.updateGlobalComponents(id, function(current, global) {\n                        update(global._params, name, value, current._params);\n                    });\n                }\n\n                // render current changes\n                if (typeof component._onParamsChange !== 'undefined') {\n                    component._onParamsChange($item, name, value);\n                }\n\n                /**\n                 * @event mbrAppCore:changedComponentParams\n                 * @param id - component id\n                 * @param {String} paramName - param name\n                 * @param {Any} value - param value\n                 */\n                _this.fire('changedComponentParams', id, name, value);\n            },\n\n            /**\n             * Return select list with anchors\n             * @param {String} defaultHref\n             */\n            getComponentsAnchorList: function(defaultHref, page) {\n                var result = '';\n                var nothingSelected = 1;\n                var selectedProp = 'selected=\"selected\"';\n                for (var k in this.resultJSON[page || this.currentPage].components) {\n                    var current = this.resultJSON[page || this.currentPage].components[k];\n                    var selected = '';\n                    if (defaultHref == '#' + current._anchor) {\n                        selected = selectedProp;\n                        nothingSelected = 1;\n                    }\n                    if (typeof current._anchor !== 'undefined' && !current._positionAbsolute && !current._alwaysBottom) {\n                        var thumb = (current.alias ? CORE.APP.getAddonDir(current.alias) : CORE.theme.path + '/components') + '/' + current._name + '/thumb.png';\n                        var isDefaultAnchor = current._anchor.indexOf(current._name + '-') === 0;\n                        var currentAnchorLabel = isDefaultAnchor ? current._anchor.charAt(0).toUpperCase() + current._anchor.slice(1).replace(/\\d/, ' $&') : current._anchor;\n\n                        result += '<option data-tooltipster=\"right\" data-tooltip-src=\"' + thumb + '\" value=\"' + (page || this.currentPage) + '#' + current._anchor + '\" ' + selected + '>' + currentAnchorLabel + '</option>';\n                    }\n                }\n\n                result =\n                    '<option value=\"' + (page || '') + '#top\" ' + (defaultHref == 'top' ? selectedProp : '') + '>Top of Page</option>' +\n                    result +\n                    '<option value=\"' + (page || '') + '#bottom\" ' + (defaultHref == 'top' ? selectedProp : '') + '>Bottom of Page</option>';\n                /**\n                 * @filter mbrAppCore->getComponentsAnchorList\n                 * @param list\n                 * @param {String} defaultHref\n                 */\n                result = this.applyFilter('getComponentsAnchorList', result, defaultHref);\n\n                return '<option value=\"\" disabled=\"disabled\" ' + (nothingSelected ? 'selected=\"selected\"' : '') + '></option>' + result;\n            },\n\n            /**\n             * Update global Components\n             * @param id\n             * @param callback function(component, this.resultJSON[n].component[k])\n             */\n            updateGlobalComponents: function(id, callback) {\n                var component = this.getComponent(id);\n\n                // change global params if exist\n                if (component._global) {\n                    for (var n in this.resultJSON) {\n                        for (var k in this.resultJSON[n].components) {\n                            if (this.resultJSON[n].components[k]._name == component._name &&\n                                this.resultJSON[n].components[k]._id !== component._id &&\n                                callback\n                            ) {\n                                callback(component, this.resultJSON[n].components[k]);\n                            }\n                        }\n                    }\n                }\n\n                CORE.fire('updateGlobalComponents', id, callback);\n            }\n        },\n        events: {\n            // event from plugin-sortable\n            changeComponentPosition: function(id, prevId, oldPrevId) {\n                this.changeComponentPosition(id, prevId, oldPrevId);\n            },\n            rendered: function(id) {\n                this.renderComponentsStyles();\n\n                if (typeof id === \"number\") {\n                    initGlobalComponent.call(this, id);\n                }\n            }\n        }\n    });\n\n    function initGlobalComponent(id) {\n        let newComponent = CORE.getComponent(id);\n\n        if (newComponent._global && Object.keys(this.resultJSON).length > 1) {\n            let\n                allPages = this.resultJSON,\n                curPage = this.currentPage,\n                arrPages = [];\n\n            // Check global block on other pages\n            if(newComponent._once)\n            for (let page in allPages) {\n                if (allPages.hasOwnProperty(page)) {\n                    if (page !== curPage) {\n                        let components = allPages[page].components;\n\n                        components.some(function(v, i, arr) {\n                            if (v._once === newComponent._once) {\n                                arrPages.push(page);\n                                return true;\n                            }\n                        })\n                    }\n                }\n            }\n\n            CORE.APP.confirmDlg(CORE.APP.TR(\"This block is global. Do you want to add it to all pages?\"), function(ok) {\n                if (ok) {\n                    if (arrPages.length) {\n                        let text = CORE.APP.TR(\"Please remove $component$ on all pages\").replace(\"$component$\", newComponent._once || newComponent._name.replace(/[0-9]/g, '')) + \":<br/><br/>- \" + arrPages.join(\"<br/>- \");\n\n                        CORE.APP.alertDlg(text);\n                        CORE.removeComponent(id);\n                    } else {\n                        for (let page in allPages) {\n                            if (allPages.hasOwnProperty(page)) {\n                                if (page !== curPage) {\n                                    allPages[page].components.push(newComponent);\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n}(jQuery, mbrAppCore));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder-components.js\n")},"./web/app/builder/js/builder-migrate.js":
/*!***********************************************!*\
  !*** ./web/app/builder/js/builder-migrate.js ***!
  \***********************************************/
/*! no static exports found */function(module,exports){eval("/**\r\n * @module  mbrAppCore/migrate\r\n * @description migrate module, use it as stock for depricated or compatability code\r\n */\r\n(function($, CORE) {\r\n    'use strict';\r\n\r\n    var hasComponentStyles; // chashing check Component Styles exists\r\n\r\n    CORE.regExtension({\r\n        name: 'builder/migrate',\r\n        /** @lends module:mbrAppCore/migrate */\r\n        global: {\r\n            /**\r\n             * !!! DEPRICATED, since 3.11.1+ use mbrApp.showMediaImageDialog instead  \r\n             * now used by some addon theme: mobile3-blocks, colorm, clarius\r\n             */\r\n            showMediaImageDialog: function(media, callback, imageOnly) {\r\n                console.warn('mbrAppCore.showMediaImageDialog is depricated, use mbrApp.showMediaImageDialog instead'); //\r\n\r\n                return CORE.APP.showMediaImageDialog(media, callback, imageOnly);\r\n            },\r\n\r\n            /**\r\n             * !!! DEPRICATED, since 3.11.1+ use mbrApp.showMediaVideoDialog instead  \r\n             */\r\n            showMediaVideoDialog: function(media, callback) {\r\n                console.warn('mbrAppCore.showMediaVideoDialog is depricated, use mbrApp.showMediaVideoDialog instead');\r\n\r\n                return CORE.APP.showMediaVideoDialog(media, callback);\r\n            }\r\n        },\r\n        events: {\r\n            load: function() {\r\n                // relink events\r\n\r\n                /**\r\n                 * DEPRICATED, dublicate with mbrApp:saveMediaImageDialog  \r\n                 * now used in core-auto-paddings.js, mobile3\\core.js\r\n                 * @event mbrAppCore:saveMediaImageDialog\r\n                 * @param {jQuery} dialog\r\n                 */\r\n                CORE.APP.on('saveMediaImageDialog', function(modal, media, componentID) {\r\n                    // triggers every time 'mbrAPP.saveMediaImageDialog' is used. My console said: 'ENOUGH' and commented it.\r\n                    // console.warn(\"using mbrAppCore version of saveMediaImageDialog event is depricated\");\r\n                    CORE.fire('saveMediaImageDialog', modal, media, componentID);\r\n                });\r\n\r\n                /**\r\n                 * Show \"Edit Site Styles\" button after usage of \"Site Styles\"\r\n                 */\r\n                CORE.APP.on('openThemeSettings', function() {\r\n                    if (CORE.APP.theme.type === 'secondary' && CORE.APP.hasThemeSettings(CORE.APP.theme.params)) {\r\n                        CORE.APP.$themeToggleBtn.css('visibility', 'visible');\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * FALLBACKs for compatibility with old projects\r\n                 */\r\n                CORE.addFilter('loadingPageComponent', function(comp, page) {\r\n\r\n                    // fix menu in old projects\r\n                    if (comp._name == 'menu') {\r\n                        // fix Brand name\r\n                        if (comp._params && typeof comp._params.brand !== 'undefined') {\r\n                            comp.brand = '<a href=\"#\">' + comp._params.brand + '</a>';\r\n                            delete comp._params.brand;\r\n                        }\r\n                        // fix menu items\r\n                        if (comp._params && typeof comp._params.items !== 'undefined') {\r\n                            var menuItems = '';\r\n                            for (var m in comp._params.items) {\r\n                                menuItems += '<li><a href=\"' + comp._params.items[m].href + '\" data-app-btn=\"true\" class=\"mbr-menu-item\">' + comp._params.items[m].title + '</a></li>';\r\n                            }\r\n                            comp.items = '<ul class=\"nav nav-pills pull-right\">' + menuItems + '</ul>';\r\n                            delete comp._params.items;\r\n                        }\r\n                    }\r\n\r\n                    // fix anchor name for version < 2.1\r\n                    if (comp._anchor) {\r\n                        comp._anchor = comp._anchor.replace(/\\./i, '_');\r\n                    }\r\n\r\n\r\n                    /**\r\n                     *\r\n                     *\r\n                     * FALLBACK for media blocks (added in 2.5.3 version)\r\n                     * all images and videos moved to media block\r\n                     *\r\n                     *\r\n                     */\r\n                    var media = {};\r\n                    var useMediaImage = 0;\r\n                    var useMediaVideo = 0;\r\n                    if (comp._name == 'menu' || comp._name == 'ext.menu' || comp._name == 'contacts1') {\r\n                        if (comp.logo && typeof comp.logo !== 'object') {\r\n                            media['logo'] = {\r\n                                image: {\r\n                                    src: comp.logo,\r\n                                    'class': comp._name == 'contacts1' ? 'mbr-contacts__img mbr-contacts__img--left' : 'mbr-navbar__brand-img mbr-brand__img',\r\n                                    height: 128\r\n                                }\r\n                            };\r\n                        }\r\n                    }\r\n                    if (comp._name == 'features1') {\r\n                        if (comp.img1 && typeof comp.img1 !== 'object') {\r\n                            media['media1'] = {\r\n                                image: {\r\n                                    src: comp.img1,\r\n                                    width: 600\r\n                                }\r\n                            };\r\n                            delete comp.img1;\r\n                        }\r\n                        if (comp.img2 && typeof comp.img2 !== 'object') {\r\n                            media['media2'] = {\r\n                                image: {\r\n                                    src: comp.img2,\r\n                                    width: 600\r\n                                }\r\n                            };\r\n                            delete comp.img2;\r\n                        }\r\n                        if (comp.img3 && typeof comp.img3 !== 'object') {\r\n                            media['media3'] = {\r\n                                image: {\r\n                                    src: comp.img3,\r\n                                    width: 600\r\n                                }\r\n                            };\r\n                            delete comp.img3;\r\n                        }\r\n                        if (comp.img4 && typeof comp.img4 !== 'object') {\r\n                            media['media4'] = {\r\n                                image: {\r\n                                    src: comp.img4,\r\n                                    width: 600\r\n                                }\r\n                            };\r\n                            delete comp.img4;\r\n                        }\r\n                    }\r\n                    if (comp._name == 'msg-box5' || comp._name == 'msg-box4') {\r\n                        if (comp.image && typeof comp.image !== 'object') {\r\n                            media['media'] = {\r\n                                image: {\r\n                                    src: comp.image,\r\n                                    'class': 'mbr-figure__img',\r\n                                    'width': 1400\r\n                                    //height: 128 -- fixed for\r\n                                }\r\n                            };\r\n\r\n                            if (comp._params) {\r\n                                if (comp._params.video) {\r\n                                    media['media']['video'] = {\r\n                                        'src': comp._params.video.url,\r\n                                        'class': 'mbr-figure__img',\r\n                                        'aspectratio': comp._params.video.aspectratio,\r\n                                        'autoplay': comp._params.video.autoplay,\r\n                                        'loop': comp._params.video.loop\r\n                                    };\r\n                                    if (comp._params.isVideo) {\r\n                                        media['media'].video.active = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                            delete comp.image;\r\n                        }\r\n                    }\r\n                    if (comp._name == 'image1' || comp._name == 'video1' || comp._name == 'image2' || comp._name == 'video2') {\r\n                        if ((comp.image && typeof comp.image !== 'object') || comp._params && comp._params.video) {\r\n                            media['media'] = {\r\n                                image: {\r\n                                    'src': comp.image || 'images/slide3.jpg',\r\n                                    'class': 'mbr-figure__img',\r\n                                    'width': 1400\r\n                                },\r\n                                video: {\r\n                                    'class': 'mbr-figure__img',\r\n                                    'src': comp._params && comp._params.video ? comp._params.video.url : 'http://www.youtube.com/embed/sOSTC6FM6Bw'\r\n                                }\r\n                            };\r\n                            if (comp._params && comp._params.video) {\r\n                                media['media'].video.active = true;\r\n                            }\r\n                            delete comp.image;\r\n                        }\r\n                    }\r\n                    for (var x in media) {\r\n                        comp[x] = media[x];\r\n                    }\r\n\r\n\r\n                    return comp;\r\n                });\r\n\r\n\r\n                // check component styles and add mbrFonts button for all blocks by default\r\n                // for themes has element-styles list pass mbrFonts button adding\r\n                CORE.addFilter('summernoteMakePopover', function(popover, $editable) {\r\n                    // init hasComponentStyles\r\n                    if (typeof hasComponentStyles == 'undefined') {\r\n                        var settings = getWindowVar('window.mbrAppCore.APP.theme.params.theme.settings');\r\n                        if (settings) {\r\n                            var names = []; // for check dublicates only\r\n                            hasComponentStyles = false;\r\n                            for (var i in settings) {\r\n                                var item = settings[i];\r\n                                if (item && (item.type == 'group') && ('rule' in item)) {\r\n                                    hasComponentStyles = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!hasComponentStyles) {\r\n                        for (var p = popover.length; p >= 0; p--)\r\n                            if (popover[p] && popover[p][0] == 'mbrFonts') {\r\n                                if (popover[p][1] && (popover[p][1].indexOf('mbrFonts') < 0))\r\n                                    popover[p][1].unshift('mbrFonts');\r\n                                if (popover[p][1] && (popover[p][1].indexOf('mbrFontSize') < 0))\r\n                                    popover[p][1].unshift('mbrFontSize');\r\n                                break;\r\n                            }\r\n                    }\r\n\r\n                    return popover;\r\n                });\r\n\r\n                CORE.addFilter('summernoteOptions', function(options, $editable) {\r\n                    // use \"short mode\" only for themes without component styles\r\n                    if (!hasComponentStyles) {\r\n                        options.shortMode = true;\r\n                    }\r\n\r\n                    options.isSecondaryComponent = CORE.APP.isSecondaryComponent(\r\n                        $editable.closest('[data-app-component-id]').attr('data-app-component-id')\r\n                    );\r\n\r\n                    return options;\r\n                });\r\n\r\n            } // load: function(){\r\n        } // events: {\r\n\r\n    });\r\n\r\n    // ----------------\r\n    function getWindowVar(path) {\r\n        path = path.split('.');\r\n        var value = window;\r\n        for (var i = 0; value && (i < path.length); i++)\r\n            value = value[path[i]];\r\n\r\n        return value;\r\n    }\r\n}(jQuery, mbrAppCore));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvYXBwL2J1aWxkZXIvanMvYnVpbGRlci1taWdyYXRlLmpzP2YyYjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUhBQXVIOztBQUV2SDtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixPQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQSxpQkFBaUI7OztBQUdqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9EQUFvRCxRQUFRO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCOztBQUVqQixhQUFhO0FBQ2IsU0FBUzs7QUFFVCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDRCQUE0QjtBQUNuRDs7QUFFQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIuL3dlYi9hcHAvYnVpbGRlci9qcy9idWlsZGVyLW1pZ3JhdGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG1vZHVsZSAgbWJyQXBwQ29yZS9taWdyYXRlXHJcbiAqIEBkZXNjcmlwdGlvbiBtaWdyYXRlIG1vZHVsZSwgdXNlIGl0IGFzIHN0b2NrIGZvciBkZXByaWNhdGVkIG9yIGNvbXBhdGFiaWxpdHkgY29kZVxyXG4gKi9cclxuKGZ1bmN0aW9uKCQsIENPUkUpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgaGFzQ29tcG9uZW50U3R5bGVzOyAvLyBjaGFzaGluZyBjaGVjayBDb21wb25lbnQgU3R5bGVzIGV4aXN0c1xyXG5cclxuICAgIENPUkUucmVnRXh0ZW5zaW9uKHtcclxuICAgICAgICBuYW1lOiAnYnVpbGRlci9taWdyYXRlJyxcclxuICAgICAgICAvKiogQGxlbmRzIG1vZHVsZTptYnJBcHBDb3JlL21pZ3JhdGUgKi9cclxuICAgICAgICBnbG9iYWw6IHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqICEhISBERVBSSUNBVEVELCBzaW5jZSAzLjExLjErIHVzZSBtYnJBcHAuc2hvd01lZGlhSW1hZ2VEaWFsb2cgaW5zdGVhZCAgXHJcbiAgICAgICAgICAgICAqIG5vdyB1c2VkIGJ5IHNvbWUgYWRkb24gdGhlbWU6IG1vYmlsZTMtYmxvY2tzLCBjb2xvcm0sIGNsYXJpdXNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHNob3dNZWRpYUltYWdlRGlhbG9nOiBmdW5jdGlvbihtZWRpYSwgY2FsbGJhY2ssIGltYWdlT25seSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdtYnJBcHBDb3JlLnNob3dNZWRpYUltYWdlRGlhbG9nIGlzIGRlcHJpY2F0ZWQsIHVzZSBtYnJBcHAuc2hvd01lZGlhSW1hZ2VEaWFsb2cgaW5zdGVhZCcpOyAvL1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBDT1JFLkFQUC5zaG93TWVkaWFJbWFnZURpYWxvZyhtZWRpYSwgY2FsbGJhY2ssIGltYWdlT25seSk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogISEhIERFUFJJQ0FURUQsIHNpbmNlIDMuMTEuMSsgdXNlIG1ickFwcC5zaG93TWVkaWFWaWRlb0RpYWxvZyBpbnN0ZWFkICBcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHNob3dNZWRpYVZpZGVvRGlhbG9nOiBmdW5jdGlvbihtZWRpYSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignbWJyQXBwQ29yZS5zaG93TWVkaWFWaWRlb0RpYWxvZyBpcyBkZXByaWNhdGVkLCB1c2UgbWJyQXBwLnNob3dNZWRpYVZpZGVvRGlhbG9nIGluc3RlYWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ09SRS5BUFAuc2hvd01lZGlhVmlkZW9EaWFsb2cobWVkaWEsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXZlbnRzOiB7XHJcbiAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVsaW5rIGV2ZW50c1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogREVQUklDQVRFRCwgZHVibGljYXRlIHdpdGggbWJyQXBwOnNhdmVNZWRpYUltYWdlRGlhbG9nICBcclxuICAgICAgICAgICAgICAgICAqIG5vdyB1c2VkIGluIGNvcmUtYXV0by1wYWRkaW5ncy5qcywgbW9iaWxlM1xcY29yZS5qc1xyXG4gICAgICAgICAgICAgICAgICogQGV2ZW50IG1ickFwcENvcmU6c2F2ZU1lZGlhSW1hZ2VEaWFsb2dcclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBkaWFsb2dcclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgQ09SRS5BUFAub24oJ3NhdmVNZWRpYUltYWdlRGlhbG9nJywgZnVuY3Rpb24obW9kYWwsIG1lZGlhLCBjb21wb25lbnRJRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXJzIGV2ZXJ5IHRpbWUgJ21ickFQUC5zYXZlTWVkaWFJbWFnZURpYWxvZycgaXMgdXNlZC4gTXkgY29uc29sZSBzYWlkOiAnRU5PVUdIJyBhbmQgY29tbWVudGVkIGl0LlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihcInVzaW5nIG1ickFwcENvcmUgdmVyc2lvbiBvZiBzYXZlTWVkaWFJbWFnZURpYWxvZyBldmVudCBpcyBkZXByaWNhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIENPUkUuZmlyZSgnc2F2ZU1lZGlhSW1hZ2VEaWFsb2cnLCBtb2RhbCwgbWVkaWEsIGNvbXBvbmVudElEKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogU2hvdyBcIkVkaXQgU2l0ZSBTdHlsZXNcIiBidXR0b24gYWZ0ZXIgdXNhZ2Ugb2YgXCJTaXRlIFN0eWxlc1wiXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIENPUkUuQVBQLm9uKCdvcGVuVGhlbWVTZXR0aW5ncycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDT1JFLkFQUC50aGVtZS50eXBlID09PSAnc2Vjb25kYXJ5JyAmJiBDT1JFLkFQUC5oYXNUaGVtZVNldHRpbmdzKENPUkUuQVBQLnRoZW1lLnBhcmFtcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ09SRS5BUFAuJHRoZW1lVG9nZ2xlQnRuLmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBGQUxMQkFDS3MgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBvbGQgcHJvamVjdHNcclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgQ09SRS5hZGRGaWx0ZXIoJ2xvYWRpbmdQYWdlQ29tcG9uZW50JywgZnVuY3Rpb24oY29tcCwgcGFnZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBmaXggbWVudSBpbiBvbGQgcHJvamVjdHNcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcC5fbmFtZSA9PSAnbWVudScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZml4IEJyYW5kIG5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAuX3BhcmFtcyAmJiB0eXBlb2YgY29tcC5fcGFyYW1zLmJyYW5kICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcC5icmFuZCA9ICc8YSBocmVmPVwiI1wiPicgKyBjb21wLl9wYXJhbXMuYnJhbmQgKyAnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgY29tcC5fcGFyYW1zLmJyYW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpeCBtZW51IGl0ZW1zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21wLl9wYXJhbXMgJiYgdHlwZW9mIGNvbXAuX3BhcmFtcy5pdGVtcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZW51SXRlbXMgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG0gaW4gY29tcC5fcGFyYW1zLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudUl0ZW1zICs9ICc8bGk+PGEgaHJlZj1cIicgKyBjb21wLl9wYXJhbXMuaXRlbXNbbV0uaHJlZiArICdcIiBkYXRhLWFwcC1idG49XCJ0cnVlXCIgY2xhc3M9XCJtYnItbWVudS1pdGVtXCI+JyArIGNvbXAuX3BhcmFtcy5pdGVtc1ttXS50aXRsZSArICc8L2E+PC9saT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcC5pdGVtcyA9ICc8dWwgY2xhc3M9XCJuYXYgbmF2LXBpbGxzIHB1bGwtcmlnaHRcIj4nICsgbWVudUl0ZW1zICsgJzwvdWw+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb21wLl9wYXJhbXMuaXRlbXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZpeCBhbmNob3IgbmFtZSBmb3IgdmVyc2lvbiA8IDIuMVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wLl9hbmNob3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcC5fYW5jaG9yID0gY29tcC5fYW5jaG9yLnJlcGxhY2UoL1xcLi9pLCAnXycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICAgICAgICAgKiBGQUxMQkFDSyBmb3IgbWVkaWEgYmxvY2tzIChhZGRlZCBpbiAyLjUuMyB2ZXJzaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAqIGFsbCBpbWFnZXMgYW5kIHZpZGVvcyBtb3ZlZCB0byBtZWRpYSBibG9ja1xyXG4gICAgICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVkaWEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXNlTWVkaWFJbWFnZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZU1lZGlhVmlkZW8gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wLl9uYW1lID09ICdtZW51JyB8fCBjb21wLl9uYW1lID09ICdleHQubWVudScgfHwgY29tcC5fbmFtZSA9PSAnY29udGFjdHMxJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcC5sb2dvICYmIHR5cGVvZiBjb21wLmxvZ28gIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYVsnbG9nbyddID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogY29tcC5sb2dvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiBjb21wLl9uYW1lID09ICdjb250YWN0czEnID8gJ21ici1jb250YWN0c19faW1nIG1ici1jb250YWN0c19faW1nLS1sZWZ0JyA6ICdtYnItbmF2YmFyX19icmFuZC1pbWcgbWJyLWJyYW5kX19pbWcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEyOFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAuX25hbWUgPT0gJ2ZlYXR1cmVzMScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAuaW1nMSAmJiB0eXBlb2YgY29tcC5pbWcxICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFbJ21lZGlhMSddID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogY29tcC5pbWcxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNjAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb21wLmltZzE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAuaW1nMiAmJiB0eXBlb2YgY29tcC5pbWcyICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFbJ21lZGlhMiddID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogY29tcC5pbWcyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNjAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb21wLmltZzI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAuaW1nMyAmJiB0eXBlb2YgY29tcC5pbWczICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFbJ21lZGlhMyddID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogY29tcC5pbWczLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNjAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb21wLmltZzM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAuaW1nNCAmJiB0eXBlb2YgY29tcC5pbWc0ICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFbJ21lZGlhNCddID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogY29tcC5pbWc0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNjAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb21wLmltZzQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAuX25hbWUgPT0gJ21zZy1ib3g1JyB8fCBjb21wLl9uYW1lID09ICdtc2ctYm94NCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAuaW1hZ2UgJiYgdHlwZW9mIGNvbXAuaW1hZ2UgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYVsnbWVkaWEnXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IGNvbXAuaW1hZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICdtYnItZmlndXJlX19pbWcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAxNDAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaGVpZ2h0OiAxMjggLS0gZml4ZWQgZm9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcC5fcGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXAuX3BhcmFtcy52aWRlbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYVsnbWVkaWEnXVsndmlkZW8nXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcmMnOiBjb21wLl9wYXJhbXMudmlkZW8udXJsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogJ21ici1maWd1cmVfX2ltZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXNwZWN0cmF0aW8nOiBjb21wLl9wYXJhbXMudmlkZW8uYXNwZWN0cmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXV0b3BsYXknOiBjb21wLl9wYXJhbXMudmlkZW8uYXV0b3BsYXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbG9vcCc6IGNvbXAuX3BhcmFtcy52aWRlby5sb29wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21wLl9wYXJhbXMuaXNWaWRlbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFbJ21lZGlhJ10udmlkZW8uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb21wLmltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wLl9uYW1lID09ICdpbWFnZTEnIHx8IGNvbXAuX25hbWUgPT0gJ3ZpZGVvMScgfHwgY29tcC5fbmFtZSA9PSAnaW1hZ2UyJyB8fCBjb21wLl9uYW1lID09ICd2aWRlbzInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoY29tcC5pbWFnZSAmJiB0eXBlb2YgY29tcC5pbWFnZSAhPT0gJ29iamVjdCcpIHx8IGNvbXAuX3BhcmFtcyAmJiBjb21wLl9wYXJhbXMudmlkZW8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhWydtZWRpYSddID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcmMnOiBjb21wLmltYWdlIHx8ICdpbWFnZXMvc2xpZGUzLmpwZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICdtYnItZmlndXJlX19pbWcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAxNDAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlbzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAnbWJyLWZpZ3VyZV9faW1nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NyYyc6IGNvbXAuX3BhcmFtcyAmJiBjb21wLl9wYXJhbXMudmlkZW8gPyBjb21wLl9wYXJhbXMudmlkZW8udXJsIDogJ2h0dHA6Ly93d3cueW91dHViZS5jb20vZW1iZWQvc09TVEM2Rk02QncnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21wLl9wYXJhbXMgJiYgY29tcC5fcGFyYW1zLnZpZGVvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFbJ21lZGlhJ10udmlkZW8uYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb21wLmltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggaW4gbWVkaWEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcFt4XSA9IG1lZGlhW3hdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGNvbXBvbmVudCBzdHlsZXMgYW5kIGFkZCBtYnJGb250cyBidXR0b24gZm9yIGFsbCBibG9ja3MgYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgLy8gZm9yIHRoZW1lcyBoYXMgZWxlbWVudC1zdHlsZXMgbGlzdCBwYXNzIG1ickZvbnRzIGJ1dHRvbiBhZGRpbmdcclxuICAgICAgICAgICAgICAgIENPUkUuYWRkRmlsdGVyKCdzdW1tZXJub3RlTWFrZVBvcG92ZXInLCBmdW5jdGlvbihwb3BvdmVyLCAkZWRpdGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbml0IGhhc0NvbXBvbmVudFN0eWxlc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaGFzQ29tcG9uZW50U3R5bGVzID09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXR0aW5ncyA9IGdldFdpbmRvd1Zhcignd2luZG93Lm1ickFwcENvcmUuQVBQLnRoZW1lLnBhcmFtcy50aGVtZS5zZXR0aW5ncycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYW1lcyA9IFtdOyAvLyBmb3IgY2hlY2sgZHVibGljYXRlcyBvbmx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDb21wb25lbnRTdHlsZXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gc2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHNldHRpbmdzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtICYmIChpdGVtLnR5cGUgPT0gJ2dyb3VwJykgJiYgKCdydWxlJyBpbiBpdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNDb21wb25lbnRTdHlsZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaGFzQ29tcG9uZW50U3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHAgPSBwb3BvdmVyLmxlbmd0aDsgcCA+PSAwOyBwLS0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wb3ZlcltwXSAmJiBwb3BvdmVyW3BdWzBdID09ICdtYnJGb250cycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wb3ZlcltwXVsxXSAmJiAocG9wb3ZlcltwXVsxXS5pbmRleE9mKCdtYnJGb250cycpIDwgMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcG92ZXJbcF1bMV0udW5zaGlmdCgnbWJyRm9udHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wb3ZlcltwXVsxXSAmJiAocG9wb3ZlcltwXVsxXS5pbmRleE9mKCdtYnJGb250U2l6ZScpIDwgMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcG92ZXJbcF1bMV0udW5zaGlmdCgnbWJyRm9udFNpemUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3BvdmVyO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgQ09SRS5hZGRGaWx0ZXIoJ3N1bW1lcm5vdGVPcHRpb25zJywgZnVuY3Rpb24ob3B0aW9ucywgJGVkaXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdXNlIFwic2hvcnQgbW9kZVwiIG9ubHkgZm9yIHRoZW1lcyB3aXRob3V0IGNvbXBvbmVudCBzdHlsZXNcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0NvbXBvbmVudFN0eWxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnNob3J0TW9kZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmlzU2Vjb25kYXJ5Q29tcG9uZW50ID0gQ09SRS5BUFAuaXNTZWNvbmRhcnlDb21wb25lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRlZGl0YWJsZS5jbG9zZXN0KCdbZGF0YS1hcHAtY29tcG9uZW50LWlkXScpLmF0dHIoJ2RhdGEtYXBwLWNvbXBvbmVudC1pZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gLy8gbG9hZDogZnVuY3Rpb24oKXtcclxuICAgICAgICB9IC8vIGV2ZW50czoge1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuICAgIGZ1bmN0aW9uIGdldFdpbmRvd1ZhcihwYXRoKSB7XHJcbiAgICAgICAgcGF0aCA9IHBhdGguc3BsaXQoJy4nKTtcclxuICAgICAgICB2YXIgdmFsdWUgPSB3aW5kb3c7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IHZhbHVlICYmIChpIDwgcGF0aC5sZW5ndGgpOyBpKyspXHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbcGF0aFtpXV07XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufShqUXVlcnksIG1ickFwcENvcmUpKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder-migrate.js\n")},"./web/app/builder/js/builder-pages.js":
/*!*********************************************!*\
  !*** ./web/app/builder/js/builder-pages.js ***!
  \*********************************************/
/*! no static exports found */function(module,exports){eval("/**\n * @module  mbrAppCore/pages\n *\n * @description pages\n *\n */\n(function($, CORE) {\n    'use strict';\n\n    // Creating placeholder element\n    let placeholderElement = function () {\n        let divElement = document.createElement('div');\n\n        $(divElement).addClass('placeholderPage');\n\n        let text = CORE.APP.TR('Click the \"plus\" $icon$ to add a new block.').replace('$icon$', '<br/><button class=\"placeholderPage__button mbr-btn btn-red\"><i class=\"mbr-icon-plus\"></i></button>');\n        $(divElement).append(CORE.APP.TR('This is a new empty page.') + '<br/>' + text);\n\n        $(divElement).find('button').on('click', function (e) {\n            setTimeout(function () {\n                $(e.target).css({'pointerEvents': 'none'});\n                CORE.APP.$componentsToggleBtn.trigger('click');\n            }, 0);\n        });\n\n        return divElement;\n    };\n\n    function removePlaceholderPage () {\n        let $placeholderPage = $('.placeholderPage');\n\n        $placeholderPage.length ? $placeholderPage.remove() : \"\";\n\n    }\n\n    function addPlaceholderPage (id) {\n        let\n            idComponent = id || false,\n            currentPage = CORE.currentPage,\n            amountAllComponentsPage = CORE.resultJSON[currentPage].components.length,\n            availabilityPlaceholder = CORE.$body.find(\".placeholderPage\").length;\n\n        // If page has placeholder remove before adding\n        if (availabilityPlaceholder) {\n            CORE.$body.find(\".placeholderPage\").remove();\n        }\n\n\n        if (!idComponent && !amountAllComponentsPage) {\n            $(document.body).append(placeholderElement());\n        } else if (idComponent && !amountAllComponentsPage) {\n            $(document.body).append(placeholderElement());\n        } else {\n            removePlaceholderPage();\n        }\n    }\n\n    CORE.regExtension({\n        name: 'pages',\n        /** @lends module:mbrAppCore/pages */\n        global: {\n            /**\n             * return copy of resultJSON\n             * @return {Object}\n             */\n            getPages: function() {\n                /**\n                 * Get pages\n                 * @filter mbrAppCore->getPages\n                 * @param  {Object} pages\n                 */\n                return this.applyFilter('getPages', $.extend(true, {}, this.resultJSON));\n            },\n\n            /**\n             * check if current page == name\n             * @param {String} name\n             * @return {Bool}\n             */\n            checkCurrentPage: function(name) {\n                return name === this.currentPage;\n            },\n\n            /**\n             * return unique page name\n             * @param num\n             * @return {Object}\n             */\n            getUniquePageName: function(num) {\n                if (!num) {\n                    var size = 0,\n                        key;\n                    for (key in this.resultJSON) {\n                        if (this.resultJSON.hasOwnProperty(key)) size++;\n                    }\n                    num = size;\n                }\n\n                if (this.resultJSON['page' + num + '.html']) {\n                    return this.getUniquePageName(num + 1);\n                }\n\n                /**\n                 * Get unique page name\n                 * @filter mbrAppCore->getUniquePageName\n                 * @param {String} name - page name\n                 * @param num - unique number\n                 */\n                return this.applyFilter('getUniquePageName', 'page' + num + '.html', num);\n\n            },\n\n            /**\n             * return current page components\n             * @param {String} name\n             * @return {Object}\n             */\n            getPageComponents: function(name) {\n                name = name || this.currentPage;\n\n                /**\n                 * Get page components\n                 * @filter mbrAppCore->getPageComponents\n                 * @param components\n                 * @param name - page name\n                 */\n                return this.applyFilter(\n                    'getPageComponents',\n                    this.resultJSON[name] ? $.extend(true, {}, this.resultJSON[name].components) : false,\n                    name\n                );\n            },\n\n            /**\n             * Load Page\n             * @param {String} name - page name\n             * @param {Object} project\n             * @return {Object} promise\n             */\n            loadPage: function(name, project) {\n                var _this = this;\n\n                var page = (project ? project.pages : this.resultJSON)[name],\n                    _once = [], // once component already added\n                    defers = [];\n\n                if (typeof page != 'object' || typeof page.settings != 'object' || typeof page.components != 'object') {\n                    console.log('Error: error component list in page', name);\n\n                    return $.Deferred().reject().promise();\n                }\n\n                // if page is loaded already\n                if (page.components.length && '_id' in page.components[0]) {\n                    return $.when();\n                }\n\n                var loadComponent = function(comp) {\n                    var promise = CORE.isSecondaryComponent(comp) ? $.Deferred().resolve(comp).promise() : CORE.APP.getRealComponent(comp._name);\n                    return promise.then(function(component) {\n                        onLoadComponent.call(CORE, comp, component);\n                    });\n                };\n\n                var onLoadComponent = function(comp, component) {\n\n                    // check _once already added\n                    if(!component){ component = {} };\n                    if (component._once) {\n                        if (_once.indexOf(component._once) < 0) {\n                            _once.push(component._once);\n                        } else {\n                            console.log('Error: dublicate _once =', component._once, 'at component', comp._name);\n                            page.components.splice(n, 1);\n\n                            return;\n                        }\n                    }\n\n                    // set uniq nums for each loaded component\n                    comp._id = this.uniqNum(); // this number is not be saved\n\n                    // ignore for secondary-components\n                    if (this.isSecondaryComponent(component)) return;\n\n                    // add native components params/functions\n                    var unfilteredParams = $.extend({}, comp._params || {});\n\n                    for (var m in this.components[comp._name]) {\n                        if (typeof this.components[comp._name][m] === 'function' ||\n                            /_alwaysTop|_alwaysBottom|_positionAbsolute|_noDrag|_once|_group|_global|_autoPadding|_css|_js|_plugins|_afterNavbarItem/g.test(m) && this.components[comp._name][m]) {\n                            comp[m] = this.components[comp._name][m];\n                        }\n\n                        // add default params if project from old version\n                        if (m === '_params') {\n                            if (typeof comp[m] === 'undefined') {\n                                comp[m] = {};\n                            }\n\n                            var defaultParams = this.components[comp._name][m];\n                            var updatedParams = {};\n                            for (var s in defaultParams) {\n                                if (typeof comp[m][s] === 'undefined') {\n                                    updatedParams[s] = defaultParams[s].default;\n                                } else if ($.isArray(comp[m][s])) {\n                                    updatedParams[s] = $.extend([], true, comp[m][s]);\n                                } else if (typeof comp[m][s] === 'object') {\n                                    updatedParams[s] = $.extend({}, true, comp[m][s]);\n                                } else {\n                                    updatedParams[s] = comp[m][s];\n                                }\n                            }\n                            comp[m] = updatedParams;\n                        }\n                    }\n\n                    // replace system variables - do it after join component with template, because of published project may has vars\n                    comp = CORE.replaceSystemVariables(comp, comp);\n\n                    if (typeof comp._onLoadFromProject == 'function') {\n                        comp._onLoadFromProject(this.components[comp._name], unfilteredParams);\n                    }\n\n                };\n\n\n                var n = 0;\n                while (n < page.components.length) {\n                    var comp = page.components[n];\n\n                    if (!comp) { //\n                        console.log('Warning: Empty component #', n, 'in page', name, '. Will be removed!');\n                        page.components.splice(n, 1);\n                        continue;\n                    }\n\n                    /**\n                     * Change component while loading from project,\n                     * use it for project compatibility failbacks\n                     * @filter mbrAppCore->loadingPageComponent\n                     * @param {Object} comp - component record from project\n                     * @param {Object} page - containing the components\n                     */\n                    comp = _this.applyFilter('loadingPageComponent', comp, page);\n\n                    function isRegistredComponent(name, context) {\n                        if (typeof name !== 'string') return false;\n                        if (context.theme.type === 'secondary') return true;\n                        if (name === 'pro.custom-html') return true; // exception for CodeEditor's component\n                        return name in context.components;\n                    }\n                    // ignore component without name\n                    if (!isRegistredComponent(comp._name, _this)) {\n                        console.log('Error: component with name \"' + comp._name + '\" is not registered, will be passed');\n                        n++;\n                        continue;\n                    }\n\n                    defers.push(loadComponent(comp));\n\n                    n++;\n                } // while(var n in page.components) {\n\n                return $.when.apply($, defers);\n\n            },\n\n            /**\n             * Add New Page\n             * @param {Bool} clone when true - clone current active page\n             * @return {String}\n             */\n            addPage: function(clone) {\n                this.fire('addPage');\n\n                var name = this.getUniquePageName();\n                var result = {\n                    settings: {},\n                    components: []\n                };\n\n                // added custom keywords for default themes while page created\n                if (CORE.APP && /^(default|mobirise3|mobirise4)$/.test(CORE.APP.theme.name)) {\n                    var kwTitle = CORE.APP.spinText('{Website|Website|Site|Web|Web Site|Web Page} {Builder|Builder|Creator|Maker|Generator}');\n                    result.settings.meta_descr = kwTitle + ' Description';\n                }\n\n                if (clone) {\n                    result = CORE.APP.getResultPage(this.resultJSON[clone]);\n                    delete result.settings.main;\n                }\n\n                var regExp = /\\d+/;\n                var title = 'Page' + (regExp.test(name) ? ' ' + name.match(regExp) : '');\n\n                result.settings.title = title;\n\n                /**\n                 * Add page\n                 * @filter mbrAppCore->addPage\n                 * @param page\n                 * @param {String} name - page name\n                 */\n                this.resultJSON[name] = this.applyFilter('addPage', result, name);\n\n                this.fire('addedPage', name);\n\n                return { 'name': name, 'title': title };\n            },\n\n            /**\n             * Remove Page\n             * @param {String} name\n             * @return {Bool}\n             */\n            removePage: function(name) {\n                if (this.resultJSON[name]) {\n                    this.fire('removePage', name);\n                    delete this.resultJSON[name];\n                    this.fire('removedPage', name);\n\n                    return true;\n                }\n\n                return false;\n            },\n\n            /**\n             * Switch Page\n             * @param {String} name\n             * @return {Bool}\n             */\n            switchPage: function(name) {\n                if (this.resultJSON[name]) {\n                    this.fire('switchPage', name);\n                    this.currentPage = name;\n\n                    return this.loadPage(name).then(function() {\n                        CORE.render();\n                        CORE.fire('switchedPage', name);\n                    });\n                }\n\n                return $.Deferred().reject().promise();\n            },\n\n            /**\n             * Change Page Settings (also rename)\n             * @param page\n             * @param {String} setting_name\n             * @param setting_value\n             * @return {String} return new file name when page renamed, else return empty string\n             */\n            changePageSettings: function(page, setting_name, setting_value) {\n                this.fire('changePageSettings', page);\n                if (setting_name !== 'fileName') {\n\n                    /**\n                     * Change page settings\n                     * @filter mbrAppCore->changePageSettings\n                     * @param setting_value\n                     * @param {String} setting_name\n                     * @param page\n                     */\n                    this.resultJSON[page].settings[setting_name] = this.applyFilter('changePageSettings', setting_value, setting_name, page);\n                    this.fire('changedPageSettings', setting_name, page);\n                } else {\n                    setting_value = setting_value.replace(/^[\\.]+|[\"'\\\\\\/\\:\\;<>]/g, ''); // remove wrong symbols from name\n\n                    // add .html fix\n                    if (setting_value) {\n                        let settSplit = setting_value.split('.'),\n                            ext = settSplit[settSplit.length - 1],\n                            allowedExts = ['html', 'shtml', 'xml', 'php', 'asp', 'aspx', 'xhtml', 'htm', 'jsp', 'js'];\n\n                        // check whether the string contains only single word equal extension like \"html\", \"php\" etc.\n                        if ( settSplit.length < 2 || !allowedExts.includes(ext) ) {\n                            setting_value += '.html';\n                        }\n                    }\n\n                    if (setting_value !== '' && !this.resultJSON[setting_value]) {\n                        // clone object with new key and remove old object\n                        Object.defineProperty(this.resultJSON, setting_value, Object.getOwnPropertyDescriptor(this.resultJSON, page));\n                        delete this.resultJSON[page];\n\n                        // change current page name\n                        if (this.currentPage == page) {\n                            this.currentPage = this.applyFilter('changePageSettings', setting_value, setting_name, page);\n                        }\n                        this.fire('changedPageSettings', setting_name, page);\n\n                        return setting_value;\n                    }\n                }\n\n                return '';\n            },\n\n            /**\n             * Return select list with pages\n             * @param {String} defaultHref\n             * @return {String}\n             */\n            getPagesList: function(defaultHref) {\n                var result = '';\n                var nothingSelected = 1;\n                var sortedPages = CORE.APP.sortPagesByOrder(this.getPages());\n\n                for (var k in sortedPages) {\n                    var selected = '';\n                    if (defaultHref == k) {\n                        selected = 'selected=\"selected\"';\n                        nothingSelected = 1;\n                    }\n\n                    var pageLabel = CORE.APP.escapeHtml(sortedPages[k].settings.title ? sortedPages[k].settings.title : k);\n\n                    result += '<option value=\"' + k + '\" ' + selected + ' data-text=\"' + pageLabel + '\">' + pageLabel + '</option>';\n                }\n\n                /**\n                 * Get list of pages\n                 * @filter mbrAppCore->getPagesList\n                 * @param {String} - list of pages\n                 * @param {String} defaultHref\n                 */\n                return this.applyFilter('getPagesList', '<option value=\"\" disabled=\"disabled\" ' + (nothingSelected ? 'selected=\"selected\"' : '') + '></option>' + result, defaultHref);\n            },\n            getMainPage: function() {\n                const pages = this.getPages();\n                for (let key in pages) {\n                    if (pages[key]['settings']['main']) return pages[key];\n                }\n            }\n        },\n        events: {\n            rendered: function (id) {\n                addPlaceholderPage(id);\n            },\n            projectLoaded: function () {\n                CORE.APP.on(\"hideComponents\", function () {\n                    if (CORE.$body.find(\".placeholderPage__button\").length) {\n                        CORE.$body.find(\".placeholderPage__button\").css({'pointerEvents' : ''});\n                    }\n                })\n            },\n            removedComponent: function (id) {\n                addPlaceholderPage(id)\n            }\n        }\n    });\n}(jQuery, mbrAppCore));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder-pages.js\n")},"./web/app/builder/js/builder-plugin-class.js":
/*!****************************************************!*\
  !*** ./web/app/builder/js/builder-plugin-class.js ***!
  \****************************************************/
/*! no static exports found */function(module,exports){eval("/**\r\n * @module mbrAppCore/plugins/plugin-element-class\r\n *\r\n * @description\r\n *   template.html\r\n *        mbr-class-var = var1 // name of variable to store selected class in project\r\n *    component.json\r\n *        var1 = <default-style-name> // you may set default class, if no then geted from class attribute of element template\r\n *    rivets\r\n *        use \"mbr-style-var\" as variable\r\n *        value stored to tempory attribute \"data-style-var\"\r\n *    params.json\r\n *        {\r\n *            \"type\": \"group\", \t\t// component group typeт, describe class list too\r\n *            \"rule\": \".mbr-text\", \t// css-selector for elements to apply class from maked list, this is a list identifier\r\n *            \"title\": \"Title 1\", \t// title of class to display\r\n *            \"name\": \"display-1\",\t// css-value of class\r\n *            \"set\": [\t\t\t\t// array of compoment-params\r\n *                {\r\n *                    \"type\": \"font\",\r\n *                    \"var\": \"display1Font\",\r\n *                    \"default\": \"IBM Plex Sans\"\r\n *                },\r\n *                {\r\n *                    \"type\": \"range\", \"min\": 0.4, \"max\" : 9.2, \"step\": 0.4,\r\n *                    \"var\": \"display1Size\",\r\n *                    \"default\": 4.25\r\n *                }\r\n *            ]\r\n *        },\r\n *        this list used for classes-list in summernote button(class-selector)\r\n *    summernote\r\n *        set selected class to element\r\n *        set \"data-style-var\" attribute\r\n *\r\n *\r\n */\r\n(function($, CORE) {\r\n    'use strict';\r\n\r\n    var VAR_ATTR = \"mbr-class-var\"; // attribute with var\r\n    var DATA_MBR_STYLE = \"data-class-var\"; // data attribute for selected style, use with rivets\r\n    // summernote\r\n    var EVENT_NAME = \"mbrStyle\"; // event and button name\r\n    var BUTTON_STYLE = \"note-current-mbrStyle\"; // button text style\r\n\r\n    function isLinksGroup($el) {\r\n        return $el.is('[mbr-buttons], [mbr-menu]');\r\n    }\r\n\r\n    // ------------------ rivets extension ------------------\r\n\r\n    // [mbr-style-var] attribute converted to -> class-name\r\n    rivets.binders['class-var'] = {\r\n        bind: function(el, value) {\r\n            var self = this,\r\n                $el = $(el);\r\n            $el.off('blur.style').on('blur.style', (isLinksGroup($el) ? 'a' : null), function(event) {\r\n                self.observer.setValue($el.attr(DATA_MBR_STYLE));\r\n            });\r\n        },\r\n        unbind: function(el, value) {\r\n            $(el).off('blur.style');\r\n            $(el).removeAttr(DATA_MBR_STYLE);\r\n        },\r\n\r\n        routine: function(el, value) {\r\n            var oldStyle = this.getValue(el);\r\n            var $el = $(el).attr(DATA_MBR_STYLE, value);\r\n            if (isLinksGroup($el)) $el = $el.find('a');\r\n            if (oldStyle) $el.removeClass(oldStyle);\r\n            if (value) $el.addClass(value);\r\n        },\r\n\r\n        getValue: function(el) {\r\n            return $(el).attr(DATA_MBR_STYLE);\r\n        }\r\n    }\r\n\r\n\r\n    // ------------------- summernote extension -------------------\r\n    // Add summernote button for select element style\r\n    // mbrStyle - button and event name\r\n    // Style list getted from theme.settings list with (type==group) and has property \"rule\"\r\n\r\n\r\n\r\n    let rangeBegin;\r\n    let rangeEnd;\r\n\r\n    function updatePopoverPosition(editable) {\r\n        let summernote = $.summernote.eventHandler;\r\n        let layoutInfo = $.summernote.core.dom.makeLayoutInfo(editable);\r\n\r\n        summernote.updateStyleInfo(summernote.modules.editor.currentStyle(layoutInfo.editable()), layoutInfo);\r\n    }\r\n\r\n    // init summernote button with\r\n    var StyleButtonInfo = {\r\n        name: EVENT_NAME,\r\n        className: BUTTON_STYLE,\r\n        title: 'Font',\r\n        label: \"[...]\", // style title for undefined styles\r\n        itemsHtml: \"\", // for force submenu creating without items\r\n\r\n        onUpdate: function(editable, button, styleInfo) { // update button text and selected item\r\n            editable = $(editable).closest(\"[\" + VAR_ATTR + \"]\"); // summernote useing attribute\r\n\r\n            var isCollapsed = styleInfo.range && styleInfo.range.isCollapsed();\r\n\r\n            if (!isCollapsed && !isLinksGroup(editable)) {\r\n                button.hide();\r\n\r\n                // when select text\r\n                if (editable.length && !(rangeBegin === styleInfo.range.so && rangeEnd === styleInfo.range.eo)) {\r\n                    updatePopoverPosition(editable);\r\n\r\n                    rangeBegin = styleInfo.range.so;\r\n                    rangeEnd = styleInfo.range.eo;\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // check and init button\r\n            var res = initItemListForNode(button, editable);\r\n            if (!res) {\r\n                button.hide();\r\n\r\n                if (editable.length && !(rangeBegin === styleInfo.range.so && rangeEnd === styleInfo.range.eo)) {\r\n                    updatePopoverPosition(editable);\r\n\r\n                    rangeBegin = styleInfo.range.so;\r\n                    rangeEnd = styleInfo.range.eo;\r\n                }\r\n\r\n                return;\r\n            } else\r\n                button.show();\r\n\r\n\r\n            // calc style from node\r\n            var style = editable.attr(DATA_MBR_STYLE);\r\n            if (!style) {\r\n                CORE.eachStylesForNode(editable, function(name) {\r\n                    if ($(editable).hasClass(name))\r\n                        style = name;\r\n                })\r\n            }\r\n\r\n            button.find('li').removeClass('selected');\r\n\r\n            var currentItem = button.find('li [data-value=\"' + style + '\"]');\r\n\r\n            currentItem.parent().addClass('selected');\r\n\r\n            button.find('.mbr-icon-paint-brush').tooltip({\r\n                container: 'body',\r\n                trigger: 'hover',\r\n                placement: 'top'\r\n            });\r\n\r\n            // edit\r\n            button.find(\".\" + BUTTON_STYLE)\r\n                .attr('class', BUTTON_STYLE + ' ' + style)\r\n                .html(currentItem.text());\r\n        },\r\n\r\n        onAction: function(event, editor, layoutInfo) { // == EVENT_NAME\r\n            // focus recovery (fix for dropdown)\r\n            layoutInfo.editable().focus();\r\n\r\n            if ($(event.target).is('.mbr-icon-paint-brush')) {\r\n                setTimeout(function() { // prevent to close on iframe click\r\n                    var groupName = layoutInfo.editor().closest('[' + DATA_MBR_STYLE + ']').attr(DATA_MBR_STYLE);\r\n                    CORE.APP.openThemeSettings();\r\n                    CORE.APP.ToogleThemeSettings.target.$elm // highlight current style in #theme-settings\r\n                        .find('.app-layer-group[data-group-name=\"' + groupName + '\"]')\r\n                        .addClass('selected');\r\n                }, 100);\r\n                return;\r\n            }\r\n\r\n            var newStyle = $(event.target).closest('a').attr('data-value');\r\n            if (newStyle) {\r\n                activateStyle(layoutInfo.editable(), newStyle);\r\n                setTimeout(function() { // update Summernote's position\r\n                    var summernote = $.summernote.eventHandler;\r\n                    summernote.updateStyleInfo(summernote.modules.editor.currentStyle(layoutInfo.editable()), layoutInfo);\r\n                }, 250);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // @return true/false -\r\n    function initItemListForNode(button, node) {\r\n        if (button.find(\"li\").length > 1) return true; // already inited\r\n\r\n        var items = '';\r\n        var maxItemSize = 0;\r\n        CORE.eachStylesForNode(node, function(name, title) {\r\n            items += '<li><a data-event=\"' + EVENT_NAME + '\" href=\"javascript:void(0);\"' +\r\n                'data-value=\"' + name + '\">' +\r\n                '<span class=\"' + name + '\">' +\r\n                    title +\r\n                '</span>' +\r\n                // filter needed for translation\r\n                CORE.applyFilter('buttonFontSiteStyleIcon', '') +\r\n                '</a></li>';\r\n            maxItemSize = Math.max(maxItemSize, title.length);\r\n        });\r\n\r\n        if (!items) return false;\r\n\r\n        //maxItemSize = Math.max(maxItemSize, 10);\r\n\r\n        var menuWidth = Math.min(200, 20 * 2 + 14 + maxItemSize * 18 / 2 + 15); // padding=20, <i>=14, font-size:18, scroll:15 max-width:200\r\n        var ul = button.find(\"ul\");\r\n        ul.html(items);\r\n        ul.css(\"min-width\", menuWidth + \"px\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function activateStyle(context, newStyle) {\r\n\r\n        context = $(context).closest('[' + DATA_MBR_STYLE + ']');\r\n        if (context.attr(DATA_MBR_STYLE) == newStyle) return;\r\n\r\n        var $items = isLinksGroup(context) ? context.find('a') : context;\r\n\r\n        // remove old styles-class\r\n        var classes = [];\r\n        CORE.eachStylesForNode(context, function(name) { classes.push(name); });\r\n        if (classes.length) $items.removeClass(classes.join(' '));\r\n\r\n        $items.addClass(newStyle);\r\n\r\n        context.attr(DATA_MBR_STYLE, newStyle)\r\n            .trigger($.Event('change-theme-style', { themeStyle: newStyle }));\r\n\r\n    }\r\n\r\n\r\n    // --------------------------------------------------------------\r\n\r\n    // template\r\n    var tmpl = $.summernote.renderer.getTemplate();\r\n\r\n    CORE.regExtension({\r\n        name: 'plugin-element-class',\r\n        global: {\r\n            registeredSummernoteButtons: [], // buttons registered with regSummernoteButton\r\n            /**\r\n             *  Alhpa version...\r\n             * @param {Object} info - button info\r\n             * @param {String} info.name\r\n             * @param {Function} info.onInit\r\n             * @param {Function} info.onAction\r\n             */\r\n            regSummernoteButton: function(info) {\r\n                info.event = info.event || info.name;\r\n\r\n                var group = info.name; // must be button group!\r\n\r\n                var plugin = {\r\n                    name: info.name,\r\n                    buttons: {},\r\n                    events: {},\r\n                    langs: {\r\n                        \"en-US\": {}\r\n                    }\r\n                }\r\n                plugin.buttons[info.name] = function(lang, options) {\r\n\r\n                    var label = '<span class=\"' + info.className + '\">' + info.label + '</span>';\r\n                    var buttonInfo = { // summernote button info\r\n                        title: lang[group][info.name],\r\n                        hide: info.hide || false,\r\n                        event: info.event,\r\n                        name: info.name\r\n                    }\r\n                    if (\"itemsHtml\" in info)\r\n                        buttonInfo.dropdown = '<ul class=\"dropdown-menu note-check\">' + info.itemsHtml + '</ul>'\r\n\r\n                    if (info.onInit) info.onInit(buttonInfo);\r\n                    return tmpl.button(label, buttonInfo);\r\n\r\n                }\r\n                plugin.events[info.name] = function(event, editor, layoutInfo) {\r\n                    if (info.onAction) info.onAction(event, editor, layoutInfo);\r\n                }\r\n\r\n                // title\r\n                plugin.langs[\"en-US\"][group] = {};\r\n                plugin.langs[\"en-US\"][group][info.name] = info.title;\r\n\r\n                $.summernote.addPlugin(plugin);\r\n                this.registeredSummernoteButtons.push(info);\r\n            },\r\n\r\n\r\n            // loop for each theme styles that has \"rule\" property\r\n            // @param node - element for styles for\r\n            // @param func_name_title\r\n            // @param func_name_title.name\r\n            // @param func_name_title.title\r\n            eachStylesForNode: function(node, func_name_title) {\r\n                node = $(node).closest(\"[\" + VAR_ATTR + \"]\");\r\n                var styles = []; // {name:, title:}\r\n                var settings = getWindowVar(\"window.mbrAppCore.APP.theme.params.theme.settings\") || [];\r\n                var names = []; // for check dublicates only\r\n                for (var i in settings) {\r\n                    var item = settings[i];\r\n                    if (item && (item.type == \"group\") && (\"rule\" in item) && node.is(item[\"rule\"])) {\r\n                        if (!item.name || (names.indexOf(item.name) >= 0)) {\r\n                            console.warn(\"Wrong name of theme style from theme.settings[\" + i + \"]: {\" + item.name + \",\" + item.title + \"}. Passed...\");\r\n                            continue;\r\n                        }\r\n                        names.push(item.name);\r\n                        func_name_title(item.name, item.title || item.name);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        events: {\r\n\r\n            load: function() {\r\n                var _this = this;\r\n\r\n                // remove \"data-class-var\"\r\n                CORE.addFilter('cleanHTMLplease', function(HTML, forJSON) {\r\n                    HTML.find(\"[\" + DATA_MBR_STYLE + \"]\").removeAttr(DATA_MBR_STYLE);\r\n                    return HTML;\r\n                })\r\n\r\n                CORE.addFilter('summernoteMakePopover', function(popover, $editable) {\r\n                    popover.unshift(['mbrStyle', ['mbrStyle']]);\r\n                    return popover;\r\n                })\r\n\r\n                CORE.addFilter('summernoteOptions', function(options, $editable) {\r\n                    if ($editable.closest('[' + DATA_MBR_STYLE + ']').length) {\r\n                        if (!options.customToolbar) {\r\n                            options.customToolbar = {};\r\n                        }\r\n                        $.extend(options.customToolbar, {\r\n                            mbrFonts: 'off',\r\n                            mbrFontSize: 'off'\r\n                        });\r\n                    }\r\n\r\n                    //for dropdown menu\r\n                    if ($editable.hasClass('dropdown-toggle')) {\r\n                        options.customToolbar = $.extend(options.customToolbar || {}, {\r\n                            mbrLink: 'off'\r\n                        });\r\n                    }\r\n                    return options;\r\n                });\r\n\r\n                CORE.regSummernoteButton(StyleButtonInfo);\r\n\r\n                CORE.APP.on('openThemeSettings', function() {\r\n                    CORE.APP.ToogleThemeSettings.target.$elm // clean highlight styles in #theme-settings\r\n                        .find('[data-group-name]')\r\n                        .removeClass('selected');\r\n                });\r\n\r\n                CORE.APP.on('change.Node.SecondaryComponent', function(args) {\r\n                    var event = args[0],\r\n                        content = args[1];\r\n                    if (event.target.type == 'buttons' || event.target.type == 'menu') {\r\n                        var className = $(event.originalEvent.target).attr(DATA_MBR_STYLE);\r\n                        if (className) {\r\n                            args[1] = $('<div/>')\r\n                                .append(content)\r\n                                .find('a').removeClass(className).end()\r\n                                .html();\r\n                        }\r\n                    }\r\n                });\r\n\r\n            },\r\n\r\n            // regSummernoteButton > onUpdate handler\r\n            summernotePopoverUpdate: function(popover, editable, styleInfo) {\r\n                // dropdown top parent element\r\n                if ($(editable).parent('.dropdown').parent('.nav-dropdown').length && $(popover).hasClass('bottom')) {\r\n                    let $popover = $(popover);\r\n                    let popoverHeight = $popover.height();\r\n                    let newPopoverTopPosition;\r\n\r\n                    if (CORE.APP.appSettings.fullscreenCanvas) {\r\n                        newPopoverTopPosition = parseInt($popover.css('top')) - popoverHeight * 1.2;\r\n                    } else {\r\n                        newPopoverTopPosition = parseInt($popover.css('top')) - popoverHeight * 1.5;\r\n                    }\r\n\r\n                    $popover.css('top', newPopoverTopPosition);\r\n                }\r\n\r\n                for (var i = 0; i < this.registeredSummernoteButtons.length; i++) {\r\n                    var info = this.registeredSummernoteButtons[i];\r\n                    if (info.onUpdate) {\r\n                        var button = $(popover).find('[data-name=\"' + info.name + '\"]');\r\n                        if (button.length)\r\n                            info.onUpdate(editable, button, styleInfo);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    function getWindowVar(path) {\r\n        path = path.split(\".\");\r\n        var value = window;\r\n        for (var i = 0; value && (i < path.length); i++)\r\n            value = value[path[i]];\r\n        return value;\r\n    }\r\n\r\n})(jQuery, mbrAppCore);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder-plugin-class.js\n")},"./web/app/builder/js/builder-plugin-iconfont-editor.js":
/*!**************************************************************!*\
  !*** ./web/app/builder/js/builder-plugin-iconfont-editor.js ***!
  \**************************************************************/
/*! no static exports found */function(module,exports){eval("/**\r\n * @module mbrAppCore/plugins/iconfont-editor\r\n *\r\n * @description\r\n * Extend image/video insert element, add IconFont type to insert\r\n *\r\n * Note:  \r\n * old iconfont plugin (in addon) automaticaly added iconFont type for media elements to some standart components  \r\n * menu|ext.menu|contacts1|features1|msg-box4|msg-box5  \r\n * this plugin doesn't have such functionality\r\n *\r\n * @listens module:mbrAppCore/plugins/media-editor~mbrAppCore:changeMediaItem\r\n * @listens mbrAppCore/plugins/summernote~mbrAppCore:summernoteInited\r\n */\r\n(function($, Core) {\r\n    'use strict';\r\n\r\n    var EXTENSION_NAME = 'iconfont';\r\n\r\n    // default data for iconfont images\r\n    var DEFAULT_ICON_FONT = {\r\n        'class': 'mbr-iconfont', // class name\r\n        'linkInNewWindow': false\r\n    };\r\n\r\n\r\n    //\r\n    // --- interface ---\r\n    //\r\n\r\n    function createIconFont(data) {\r\n        return Core.APP.createIconFont(data);\r\n    }\r\n\r\n    function extractIconFont(node) {\r\n        return Core.APP.extractIconFont(node);\r\n    }\r\n\r\n    function hasFont() {\r\n        for (var p in Core.APP.iconFonts) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    // search for \"iconFont\" summernote plugin\r\n    var iconFontPlugin;\r\n    for (var p in $.summernote.plugins) {\r\n        if ($.summernote.plugins[p]['name'] == 'iconFont')\r\n            iconFontPlugin = $.summernote.plugins[p];\r\n    }\r\n    if (!iconFontPlugin) { // !!! fail\r\n        console.log('Error: iconFont summernote plugin not found');\r\n\r\n        return;\r\n    }\r\n\r\n\r\n    Core.regExtension({\r\n        name: EXTENSION_NAME,\r\n\r\n        /** @lends module:mbrAppCore/plugins/iconfont-editor */\r\n        global: {\r\n\r\n            /**\r\n             * called from summernote-ext-mbr-iconfont.js\r\n             * @param node - old icon node\r\n             * @param parent - may be parent Anchor, Button or Menu Link\r\n             * @param callback_node function(node) return new node\r\n             */\r\n            summernoteIconRequest: function(node, parent, callback_node) {\r\n\r\n                var data = extractIconFont(node);\r\n                if (!data.name) node = 0;\r\n\r\n                // for button+menu-links use size but not link\r\n                var btnData = $(parent).attr('data-app-btn');\r\n                if (btnData) {\r\n                    data.size = data.size || ''; // force show size\r\n                    delete data.link;\r\n                    data['class'] = 'mbr-iconfont mbr-iconfont-btn' + (btnData == 'true' ? '' : '-' + btnData.replace(/\\s+/, '_'));\r\n                }\r\n\r\n                var $editable = $(node || parent);\r\n                var default_data = {\r\n                    size: $editable.attr('data-app-btn') ? Math.round($editable.outerHeight() / 2) : parseInt($editable.css('font-size')) || 12,\r\n                    color: $editable.css('color')\r\n                };\r\n\r\n                Core.APP.runIconFontDialog(data, default_data, function(data) {\r\n                    if (!callback_node) return;\r\n\r\n                    if (arguments.length) {\r\n                        data = data && $.extend({}, DEFAULT_ICON_FONT, data);\r\n                        callback_node(data && createIconFont(data));\r\n                    } else\r\n                        callback_node();\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * show Iconfont dialog,\r\n             * by analogy {@link module:mbrApp/plugins/media-editor showMediaImageDialog} and {@link module:mbrApp/plugins/media-editor showMediaVideoDialog}\r\n             * @param  {Object} media - media data object\r\n             * @param  {Function} saveMedia - callback function(media)\r\n             * @param  {DomNode} item - editable node\r\n             */\r\n            showMediaIconFontDialog: function(media, saveMedia, item) {\r\n                // --------- extract to media ---------\r\n                // get iconFont data record\r\n                var data = $.extend({}, media.iconFont);\r\n\r\n                var default_data = {\r\n                    size: parseInt($(item).height()),\r\n                    color: $(item).css('color'),\r\n                    name: data.name\r\n                };\r\n\r\n                delete data.name; // transfer name with default_data for run iconfont-dialog in insert mode, without delete\r\n\r\n                /**\r\n                 * @event mbrAppCore:showMediaIconFontDialog\r\n                 */\r\n                Core.fire('showMediaIconFontDialog');\r\n\r\n                var mediaVar = $(item).attr('mbr-media') || $(item).attr('logo');\r\n\r\n                function saveMediaIcon(current, real) {\r\n                    if (!mediaVar) return;\r\n                    $.extend(true, real[mediaVar], current[mediaVar]);\r\n                    for (var k in real[mediaVar]) {\r\n                        real[mediaVar][k].active = undefined;\r\n                    }\r\n                    real[mediaVar].iconFont.active = true;\r\n\r\n                    return real;\r\n                }\r\n\r\n                var dialog = Core.APP.runIconFontDialog(data, default_data, function(new_data) {\r\n                    if (!new_data) return;\r\n\r\n                    // media record\r\n                    media.iconFont = $.extend({}, DEFAULT_ICON_FONT, new_data);\r\n\r\n                    // cloned from builder-plugin-media-editor.js\r\n                    for (var k in media) {\r\n                        media[k].active = undefined;\r\n                    }\r\n                    media.iconFont.active = true;\r\n\r\n                    /**\r\n                     * Save media iconfont dialog\r\n                     * @filter mbrAppCore->saveMediaIconFontDialog\r\n                     * @param media\r\n                     */\r\n                    media = Core.applyFilter('saveMediaIconFontDialog', media);\r\n\r\n                    /**\r\n                     * @event mbrAppCore:saveMediaIconFontDialog\r\n                     */\r\n                    Core.fire('saveMediaIconFontDialog');\r\n\r\n                    var componentID = $(item).parents('[data-app-component-id]:eq(0)').attr('data-app-component-id');\r\n                    saveMedia(media);\r\n                    Core.updateGlobalComponents(componentID, saveMediaIcon);\r\n\r\n                    /**\r\n                     * @event mbrAppCore:savedMediaIconFontDialog\r\n                     * @param  {DomNode} item - edited node\r\n                     */\r\n                    Core.fire('savedMediaIconFontDialog', item, media, componentID);\r\n                });\r\n\r\n                /**\r\n                 * @event mbrAppCore:showedMediaIconFontDialog\r\n                 * @param {jQuery} dialog\r\n                 */\r\n                Core.fire('showedMediaIconFontDialog', dialog);\r\n                /**\r\n                 * @event mbrApp:showedPopup\r\n                 */\r\n                Core.APP.fire('showedPopup', dialog);\r\n\r\n            }\r\n        },\r\n\r\n\r\n        events: {\r\n\r\n            load: function() {\r\n                // if has no fonts then return\r\n                if (!hasFont()) return;\r\n\r\n                // add iconfont button to media elements\r\n                var btnGroup = $('[data-event=changeImage]').parent();\r\n                btnGroup.each(function() {\r\n                    var $this = $(this);\r\n                    if (btnGroup.find('[data-event=changeIconfont]').length)\r\n                        return;\r\n\r\n                    var options = $.summernote.options;\r\n                    var lang = $.summernote.lang[options.lang];\r\n\r\n                    $(iconFontPlugin.buttons.iconFont(lang, options))\r\n                        .attr('data-event', 'changeIconfont')\r\n                        .attr('data-media', 'iconFont')\r\n                        .appendTo($this);\r\n                });\r\n            },\r\n\r\n\r\n            // add iconfont button group to editor panels\r\n            summernoteInited: function(Item) {\r\n\r\n                // if has no fonts then return\r\n                if (!hasFont()) return;\r\n\r\n                var layoutInfo = $.summernote.core.dom.makeLayoutInfo($(Item));\r\n                var options = layoutInfo.editor().data('options');\r\n\r\n                if ($(Item).attr('data-app-btn') && (options.customToolbar ? options.customToolbar.iconFont !== 'off' : true)) { // is button\r\n                    $(Item).summernote('popover.addGroup', ['iconFont', ['iconFont'], { optional: true }]);\r\n                    layoutInfo.popover()\r\n                        .find('[data-event=insertIconFontDialog]')\r\n                        .tooltip({\r\n                            container: 'body',\r\n                            trigger: 'hover',\r\n                            placement: 'top'\r\n                        });\r\n\r\n                } // added editor now only for buttons(and menu links)\r\n\r\n            },\r\n\r\n\r\n            // add \"changeIconfont\" event for select Iconfont additioning of image/video\r\n            changeMediaItem: function(eventName, media, saveMedia, item) {\r\n                if (eventName != 'changeIconfont') return;\r\n                this.showMediaIconFontDialog(media, saveMedia, item);\r\n            }\r\n        }\r\n    });\r\n}(jQuery, mbrAppCore));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder-plugin-iconfont-editor.js\n")},"./web/app/builder/js/builder-plugin-media-editor.js":
/*!***********************************************************!*\
  !*** ./web/app/builder/js/builder-plugin-media-editor.js ***!
  \***********************************************************/
/*! no static exports found */function(module,exports){eval("/**\n * @module  mbrAppCore/plugins/media-editor\n *\n * @description Media editor\n *\n * @listens module:mbrApp~mbrApp:load\n * @listens module:mbrAppCore/plugins/summernote~mbrAppCore:summernoteFocus\n * @listens module:mbrApp/component-params~mbrApp:componentClicked\n */\n(function($, CORE) {\n    'use strict';\n\n    var $popover = $([\n        '<div class=\"note-button-popover popover in bottom\">',\n            '<div class=\"arrow\"></div>',\n            '<div class=\"popover-content\">',\n                '<div class=\"btn-group\">',\n                    '<button type=\"button\" class=\"btn btn-default btn-sm\" tabindex=\"-1\" data-event=\"changeImage\" data-media=\"image\"><i class=\"mbr-icon-image\"></i></button>',\n                    '<button type=\"button\" class=\"btn btn-default btn-sm\" tabindex=\"-1\" data-event=\"changeVideo\" data-media=\"video\"><i class=\"mbr-icon-youtube\"></i></button>',\n                '</div>',\n            '</div>',\n        '</div>'\n    ].join('\\n')).hide()\n    .appendTo($('<div class=\"note-popover note-air-layout\">').appendTo('body'));\n\n    CORE.regExtension({\n        name: 'plugin-media-editor',\n        /** @lends module:mbrAppCore/plugins/media-editor */\n        global: {\n           /**\n            * @param {jQuery} $media\n            */\n            showMediaPopover: function($media) {\n                var Core = this;\n\n                $popover.mediaItem = $media;\n\n                // hide some media buttons from popover\n                var componentID = $media.parents('[data-app-component-id]:eq(0)').attr('data-app-component-id');\n                var mediaVar = $media.attr('mbr-media') || $media.attr('mbr-pure-media');\n                var component = Core.getComponent(componentID);\n                var visibleMediaItems = [];\n                $popover.find('[data-media]').each(function() {\n                    var show = component[mediaVar][$(this).attr('data-media')];\n                    $(this)[show?'show':'hide']();\n                    if(show) {\n                        visibleMediaItems.push($(this));\n                    }\n                });\n\n                // if only 1 media type - dont show popover, click on item\n                if(visibleMediaItems.length == 1) {\n                    visibleMediaItems[0].click();\n                    return;\n                }\n                if(!visibleMediaItems.length) {\n                    return;\n                }\n\n                /**\n                 * @event mbrAppCore:showMediaPopover\n                 * @param {jQuery} $popover\n                 */\n                Core.fire('showMediaPopover', $popover);\n\n                var componentID = $media.parents('[data-app-component-id]:eq(0)').attr('data-app-component-id');\n                var pos = {\n                    top: $media.offset().top + $media.height() / 2,\n                    left: $media.offset().left - $popover.width() / 2 + $media.width() / 2\n                };\n\n                $popover.css(pos).show();\n\n                Core.focusComponentBlock(componentID);\n\n                /**\n                 * @event mbrAppCore:showedMediaPopover\n                 * @param {jQuery} $popover\n                 */\n                Core.fire('showedMediaPopover', $popover);\n                /**\n                 * @event mbrAppCore:showedPopover\n                 */\n                Core.fire('showedPopover');\n            },\n            hideMediaPopover: function() {\n                /**\n                 * @event mbrAppCore:hideMediaPopover\n                 * @param {jQuery} $popover\n                 */\n                this.fire('hideMediaPopover', $popover);\n                $popover.mediaItem = undefined;\n                $popover.hide();\n                /**\n                 * @event mbrAppCore:hiddenMediaPopover\n                 * @param {jQuery} $popover\n                 */\n                this.fire('hiddenMediaPopover', $popover);\n            }\n\n        },\n        events: {\n            load: function() {\n                var Core = this;\n\n                // click on editable element\n                Core.$body.on('click', '[mbr-media],[mbr-pure-media]', function(e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n\n                    Core.showMediaPopover($(this));\n                });\n\n                $popover.on('click', '[data-event]', function(e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    var eventName = $(this).attr('data-event');\n                    var $item = $popover.mediaItem;\n                    if (!$item) return;\n\n                    var mediaVar = $item.attr('mbr-media') || $item.attr('mbr-pure-media');\n                    if (!mediaVar) return;\n\n                    var componentID = $item.parents('[data-app-component-id]:eq(0)').attr('data-app-component-id');\n                    var component = Core.getComponent(componentID);\n\n                    var media = $.extend({}, component[mediaVar]);\n\n                    // if there are no default settings for media item\n                    for(var k in media) {\n                        if(typeof media[k] !== 'object') {\n                            media[k] = {};\n                        }\n                    }\n\n                    function saveMedia(media) {\n                        component[mediaVar] = media;\n\n                        /**\n                         * @event mbrAppCore:saveMedia\n                         * (since version 4)\n                         * @param {String} componentID - component id\n                         * @param {String} mediaVar - media param name\n                         * @param {Object} media - media object data\n                         */\n                        Core.fire('saveMedia', componentID, mediaVar, media);\n\n                        Core.updateGlobalComponents(componentID, function(current, real){\n                            if (!mediaVar) return;\n                            $.extend(true, real[mediaVar], current[mediaVar]);\n                            return real;\n                        });\n\n                    }\n\n                    if (eventName == 'changeImage') {\n                        Core.APP.showMediaImageDialog(media, saveMedia, '', '', '', componentID);\n                    } else if (eventName == 'changeVideo') {\n                        Core.APP.showMediaVideoDialog(media, saveMedia);\n                    }\n\n                    /**\n                     * Use for extend media object\n                     * (since version 2.12)\n                     * @event mbrAppCore:chngeMediaItem\n                     * @param {String} eventName\n                     * @param {Object} media - media object data\n                     * @param {Function} saveMedia - function(media), callback for new media data transfer\n                     * @param {DomNode} item - changed item\n                     */\n                    Core.fire('changeMediaItem', eventName, media, saveMedia, $item.get(0));\n\n                    /**\n                     * @event mbrAppCore:clickOnMediaItem\n                     * @param eventName\n                     * @param component\n                     * @param {jQuery} $popover\n                     */\n                    Core.fire('clickOnMediaItem', eventName, component, $popover);\n\n                    Core.hideMediaPopover();\n                });\n\n                $(window).on('resize', function() {\n                    Core.hideMediaPopover();\n                });\n\n                Core.on('summernoteFocus', function() {\n                    Core.hideMediaPopover();\n                });\n\n                Core.APP.on('componentClicked', function(id) {\n                    Core.hideMediaPopover();\n                });\n            }\n        }\n    });\n}(jQuery, mbrAppCore));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder-plugin-media-editor.js\n")},"./web/app/builder/js/builder-plugin-sortable.js":
/*!*******************************************************!*\
  !*** ./web/app/builder/js/builder-plugin-sortable.js ***!
  \*******************************************************/
/*! no static exports found */function(module,exports){eval("/**\n * @module  mbrAppCore/plugins/sortable\n *\n * @description Sortable\n *\n * @listens module:mbrAppCore~mbrAppCore:load\n */\n(function($, CORE) {\n    'use strict';\n\n    CORE.regExtension({\n        name: 'plugin-sortable',\n        events: {\n            load: function() {\n                var prevId, newPrevId;\n                var sortStarted = false;\n\n                CORE.$template.sortable({\n                    axis: 'y',\n                    items: '> div:not(.no-sortable)',\n                    handle: '.sortable',\n                    placeholder: 'ui-sortable-placeholder',\n                    scrollSpeed: 50\n                }).on('sortstart', function(e, info) {\n                    CORE.fire('startChangeComponentPosition');\n\n                    CORE.focusComponentBlock('x');\n\n                    sortStarted = true;\n\n                    if (CORE.APP.$iframe.hasClass('desktop')) {\n                        CORE.APP.$iframe.closest('.app-template').addClass('scaled sorting');\n                        CORE.APP.$body.addClass('sorting');\n                        CORE.$body.addClass('scaled');\n                        CORE.$template.addClass('scaled');\n                    }\n\n                    if (!CORE.APP.isAMP()) {\n                        info.helper.find('.app-component-content > section').jarallax('destroy').css('position', '');\n                    }\n\n                    prevId = info.item.prev(':not(.no-sortable)').data('app-component-id');\n                }).on('sortstop', function(e, info) {\n                    sortStarted = false;\n\n                    CORE.APP.$iframe.closest('.app-template').removeClass('scaled sorting');\n                    CORE.APP.$body.removeClass('sorting');\n                    CORE.$body.removeClass('scaled');\n                    CORE.$template.removeClass('scaled');\n\n                    if (!CORE.APP.isAMP()) {\n                        if (info) {\n                            info.item.find('.mbr-parallax-background').jarallax({\n                                speed: 0.6\n                            }).css('position', 'relative');\n                        } else {\n                            CORE.$template.find('.app-component > .mbr-parallax-background').jarallax({\n                                speed: 0.6\n                            }).css('position', 'relative');\n                        }\n                    }\n\n                    if (info) {\n                        newPrevId = info.item.prev(':not(.no-sortable)').data('app-component-id');\n                    }\n\n                    // change item position in project file\n                    if (info && prevId !== newPrevId) {\n                        /**\n                         * @event mbrAppCore:changeComponentPosition\n                         * @param id\n                         * @param newPrevId\n                         * @param prevId\n                         */\n                        CORE.fire('changeComponentPosition', info.item.data('app-component-id'), newPrevId, prevId);\n                    }\n                });\n\n                // fix for compatibility with jquery.tooltipster.js\n                $.fn.scrollParent = (function(scrollParent) {\n                    return function() {\n                        if (this[0].parentNode === CORE.$template[0]) {\n                            return $(this[0].ownerDocument);\n                        }\n\n                        return scrollParent.apply(this, arguments);\n                    };\n                })($.fn.scrollParent);\n\n                // when drag block and mouseup outside of core iframe\n                CORE.APP.$body.on('mouseup touchend', function(e) {\n                    if (sortStarted) {\n                        CORE.$template.trigger('sortstop');\n                    }\n                });\n            }\n        }\n    });\n}(jQuery, mbrAppCore));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvYXBwL2J1aWxkZXIvanMvYnVpbGRlci1wbHVnaW4tc29ydGFibGUuanM/OWUzOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUMiLCJmaWxlIjoiLi93ZWIvYXBwL2J1aWxkZXIvanMvYnVpbGRlci1wbHVnaW4tc29ydGFibGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgIG1ickFwcENvcmUvcGx1Z2lucy9zb3J0YWJsZVxuICpcbiAqIEBkZXNjcmlwdGlvbiBTb3J0YWJsZVxuICpcbiAqIEBsaXN0ZW5zIG1vZHVsZTptYnJBcHBDb3Jlfm1ickFwcENvcmU6bG9hZFxuICovXG4oZnVuY3Rpb24oJCwgQ09SRSkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIENPUkUucmVnRXh0ZW5zaW9uKHtcbiAgICAgICAgbmFtZTogJ3BsdWdpbi1zb3J0YWJsZScsXG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZJZCwgbmV3UHJldklkO1xuICAgICAgICAgICAgICAgIHZhciBzb3J0U3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgQ09SRS4kdGVtcGxhdGUuc29ydGFibGUoe1xuICAgICAgICAgICAgICAgICAgICBheGlzOiAneScsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiAnPiBkaXY6bm90KC5uby1zb3J0YWJsZSknLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGU6ICcuc29ydGFibGUnLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3VpLXNvcnRhYmxlLXBsYWNlaG9sZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsU3BlZWQ6IDUwXG4gICAgICAgICAgICAgICAgfSkub24oJ3NvcnRzdGFydCcsIGZ1bmN0aW9uKGUsIGluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgQ09SRS5maXJlKCdzdGFydENoYW5nZUNvbXBvbmVudFBvc2l0aW9uJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgQ09SRS5mb2N1c0NvbXBvbmVudEJsb2NrKCd4Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgc29ydFN0YXJ0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChDT1JFLkFQUC4kaWZyYW1lLmhhc0NsYXNzKCdkZXNrdG9wJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIENPUkUuQVBQLiRpZnJhbWUuY2xvc2VzdCgnLmFwcC10ZW1wbGF0ZScpLmFkZENsYXNzKCdzY2FsZWQgc29ydGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ09SRS5BUFAuJGJvZHkuYWRkQ2xhc3MoJ3NvcnRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENPUkUuJGJvZHkuYWRkQ2xhc3MoJ3NjYWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ09SRS4kdGVtcGxhdGUuYWRkQ2xhc3MoJ3NjYWxlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFDT1JFLkFQUC5pc0FNUCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvLmhlbHBlci5maW5kKCcuYXBwLWNvbXBvbmVudC1jb250ZW50ID4gc2VjdGlvbicpLmphcmFsbGF4KCdkZXN0cm95JykuY3NzKCdwb3NpdGlvbicsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHByZXZJZCA9IGluZm8uaXRlbS5wcmV2KCc6bm90KC5uby1zb3J0YWJsZSknKS5kYXRhKCdhcHAtY29tcG9uZW50LWlkJyk7XG4gICAgICAgICAgICAgICAgfSkub24oJ3NvcnRzdG9wJywgZnVuY3Rpb24oZSwgaW5mbykge1xuICAgICAgICAgICAgICAgICAgICBzb3J0U3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIENPUkUuQVBQLiRpZnJhbWUuY2xvc2VzdCgnLmFwcC10ZW1wbGF0ZScpLnJlbW92ZUNsYXNzKCdzY2FsZWQgc29ydGluZycpO1xuICAgICAgICAgICAgICAgICAgICBDT1JFLkFQUC4kYm9keS5yZW1vdmVDbGFzcygnc29ydGluZycpO1xuICAgICAgICAgICAgICAgICAgICBDT1JFLiRib2R5LnJlbW92ZUNsYXNzKCdzY2FsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgQ09SRS4kdGVtcGxhdGUucmVtb3ZlQ2xhc3MoJ3NjYWxlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghQ09SRS5BUFAuaXNBTVAoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLml0ZW0uZmluZCgnLm1ici1wYXJhbGxheC1iYWNrZ3JvdW5kJykuamFyYWxsYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlZDogMC42XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY3NzKCdwb3NpdGlvbicsICdyZWxhdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT1JFLiR0ZW1wbGF0ZS5maW5kKCcuYXBwLWNvbXBvbmVudCA+IC5tYnItcGFyYWxsYXgtYmFja2dyb3VuZCcpLmphcmFsbGF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDAuNlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNzcygncG9zaXRpb24nLCAncmVsYXRpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQcmV2SWQgPSBpbmZvLml0ZW0ucHJldignOm5vdCgubm8tc29ydGFibGUpJykuZGF0YSgnYXBwLWNvbXBvbmVudC1pZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhbmdlIGl0ZW0gcG9zaXRpb24gaW4gcHJvamVjdCBmaWxlXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmZvICYmIHByZXZJZCAhPT0gbmV3UHJldklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBldmVudCBtYnJBcHBDb3JlOmNoYW5nZUNvbXBvbmVudFBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0gaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSBuZXdQcmV2SWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSBwcmV2SWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgQ09SRS5maXJlKCdjaGFuZ2VDb21wb25lbnRQb3NpdGlvbicsIGluZm8uaXRlbS5kYXRhKCdhcHAtY29tcG9uZW50LWlkJyksIG5ld1ByZXZJZCwgcHJldklkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gZml4IGZvciBjb21wYXRpYmlsaXR5IHdpdGgganF1ZXJ5LnRvb2x0aXBzdGVyLmpzXG4gICAgICAgICAgICAgICAgJC5mbi5zY3JvbGxQYXJlbnQgPSAoZnVuY3Rpb24oc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzWzBdLnBhcmVudE5vZGUgPT09IENPUkUuJHRlbXBsYXRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQodGhpc1swXS5vd25lckRvY3VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbFBhcmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pKCQuZm4uc2Nyb2xsUGFyZW50KTtcblxuICAgICAgICAgICAgICAgIC8vIHdoZW4gZHJhZyBibG9jayBhbmQgbW91c2V1cCBvdXRzaWRlIG9mIGNvcmUgaWZyYW1lXG4gICAgICAgICAgICAgICAgQ09SRS5BUFAuJGJvZHkub24oJ21vdXNldXAgdG91Y2hlbmQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3J0U3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ09SRS4kdGVtcGxhdGUudHJpZ2dlcignc29ydHN0b3AnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59KGpRdWVyeSwgbWJyQXBwQ29yZSkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder-plugin-sortable.js\n")},"./web/app/builder/js/builder-plugin-summernote.js":
/*!*********************************************************!*\
  !*** ./web/app/builder/js/builder-plugin-summernote.js ***!
  \*********************************************************/
/*! no static exports found */function(module,exports){eval("/**\n * @module mbrAppCore/plugins/summernote\n * @description  summernote plugin\n * @listens module:mbrAppCore/components-load~mbrAppCore:load\n * @listens module:mbrAppCore/components-load~mbrAppCore:rendered\n * @listens module:mbrAppCore/components~mbrAppCore:changedComponentParams\n * @listens module:mbrAppCore/components~mbrAppCore:removeComponent\n * @listens module:mbrAppCore/components-load~mbrAppCore:clearBlocks\n * @listens module:mbrAppCore/plugins/media-editor~mbrAppCore:showedPopup\n * @listens module:assets/rivets/extended-mbr~mbrAppCore:rivetsBlur\n */\n(function ($, Core) {\n    'use strict';\n\n    var timeout;\n    var EDITABLE_SELECTOR = '[data-app-edit=\"content\"], [data-app-edit=\"full\"], [data-app-btn]'; // selector for editable items\n    var initedSummernote;\n\n    var triggerPopoverUpdate = true;\n\n    Core.regExtension({\n        name: 'plugin-summernote',\n        /** @lends module:mbrAppCore/plugins/summernote */\n        global: {\n            /**\n             * Initialize summernote\n             * @param {jQuery} $context\n             */\n            initSummernote: function ($context) {\n                var _this = this;\n\n                $context = $context || _this.$template;\n                var $editable = $context.is(EDITABLE_SELECTOR) ? $context : $context.find(EDITABLE_SELECTOR);\n\n                $editable.attr('contenteditable', true);\n\n                clearTimeout(timeout);\n\n                timeout = setTimeout(function () {\n\n                    /**\n                     * @filter mbrAppCore->summernoteEditableItems\n                     * @param {jQuery} $editable - jQuery item\n                     * @param {jQuery} $context - jQuery context\n                     * @param {Bool} - destroy bool\n                     */\n                    $editable = _this.applyFilter('summernoteEditableItems', $editable, $context, false);\n\n                    initedSummernote = $editable.get(0);\n\n                    $editable.filter(':not(.note-air-editor)').each(function () {\n                        if ($(this).is('.note-air-editor')) {\n                            return;\n                        }\n\n                        // prepare toolbar options for buttons\n                        var isBtn = $(this).is('[data-app-btn]');\n                        if (isBtn) {\n                            var toolbar = $(this).parents('[data-app-edit]:eq(0)').attr('data-toolbar') || false;\n                            if (toolbar) {\n                                $(this).attr('data-toolbar', toolbar);\n                            }\n                        }\n\n                        // full editor toolbar\n                        var popover;\n                        var isFull = $(this).is('[data-app-edit=\"full\"]');\n                        if (isFull) {\n                            popover = [\n                                ['font', ['bold', 'italic']],\n                                ['mbrLink', ['mbrLink']],\n                                ['mbrFonts', ['mbrColor'], { optional: ['mbrFonts', 'mbrFontSize'] }],\n                                ['mbrAlign', ['mbrAlign']]\n                            ];\n                        }\n\n                        // default editor toolbar\n                        else {\n                            popover = [\n                                ['font', ['bold', 'italic']],\n                                ['mbrLink', ['mbrLink']],\n                                ['mbrFonts', ['mbrColor'], { optional: ['mbrFonts', 'mbrFontSize'] }],\n                                ['mbrAlign', ['mbrAlign']]\n                            ];\n                        }\n\n                        /**\n                         * Modificate popover on summernote button init\n                         * @param {Array} popover\n                         * @param {String} popover.1 - group\n                         * @param {String[]} popover.2 - buttons\n                         * @param {jQuery} $editable - target element\n                         */\n                        popover = _this.applyFilter('summernoteMakePopover', popover, $editable);\n\n                        // init summernote\n                        $(this).summernote(_this.applyFilter('summernoteOptions', {\n                            airMode: true,\n                            styleWithSpan: false,\n                            focus: true,\n                            airPopover: popover,\n                            onFocus: function (e) {\n                                // hide params block\n                                _this.APP.hideComponentParams();\n\n                                /**\n                                 * @event mbrAppCore:summernoteFocus\n                                 * @param {DomNode} node - current editing element\n                                 * @param event\n                                 */\n                                if(e.target.innerText.length === 0 && e.target.innerHTML.length !== 0) {\n                                    e.target.innerHTML = e.target.getAttribute('data-app-placeholder') + e.target.innerHTML;\n                                }\n                                _this.fire('summernoteFocus', this, e);\n                            },\n                            onBlur: function (e) {\n                                /**\n                                 * @event mbrAppCore:summernoteBlur\n                                 * @param {DomNode} node - current editing element\n                                 * @param event\n                                 */\n                                _this.fire('summernoteBlur', this, e);\n                            },\n                            // remove text formatting\n                            onPaste: function (e) {\n                                var bufferText = ((e.originalEvent || e).clipboardData || window.clipboardData).getData('text/plain');\n                                var insertText = true;\n\n                                // replace all new lines to <br> when editor is inline tag\n                                if ($(this).is('p, span, a, .btn, button, strong, b, em, i, small, code, label')) {\n                                    bufferText = bufferText.replace(/\\n/g, '<br>');\n                                    insertText = false;\n                                }\n\n                                e.preventDefault();\n\n                                /**\n                                 * @filter mbrAppCore->summernotePaste\n                                 * @param {String} bufferText\n                                 */\n                                bufferText = _this.applyFilter('summernotePaste', bufferText);\n\n                                document.execCommand(insertText ? 'insertText' : 'insertHTML', false, bufferText);\n                            },\n                            onKeydown: function (e) {\n                                // fix for bootstrap carousel + spacebar\n                                if (e.keyCode == 32) {\n                                    e.stopPropagation();\n                                }\n                                /**\n                                 * @event mbrAppCore:summernoteKeydown\n                                 * @param {DomNode} node - current editing element\n                                 * @param event\n                                 */\n                                _this.fire('summernoteKeydown', this, e);\n                            }\n                        }, $editable));\n                        /**\n                         * @event mbrAppCore:summernoteInited\n                         * @param {DomNode} node - current editing element\n                         */\n                        _this.fire('summernoteInited', this);\n                    });\n                }, 100);\n            },\n\n            /**\n             * Destroy summernote\n             * @param {jQuery} $context\n             */\n            destroySummernote: function ($context) {\n                $context = $context || this.$template;\n                var $editable = $context.is(EDITABLE_SELECTOR) ? $context : $context.find(EDITABLE_SELECTOR);\n                $editable = this.applyFilter('summernoteEditableItems', $editable, $context, true);\n                $editable.filter('[contenteditable]').destroy();\n                initedSummernote = undefined;\n            },\n\n            /**\n             * Fire when editor content changed\n             * @param {jQuery} $item\n             */\n            changeSummernote: function ($item) {\n                // check if item - is button\n                if ($item.is('[data-app-btn]') && !$item.attr('data-app-edit')) {\n                    $item = $item.parents('[data-app-edit]:eq(0)');\n\n                    if (!$item.length) {\n                        return;\n                    }\n                }\n                var self = this;\n                var componentID = $item.parents('.app-component').attr('data-app-component-id');\n                setTimeout(function () {\n                    self.updateGlobalComponents(componentID, function (current, global) {\n                        for (var k in global) {\n                            if (k === '_customHTML' || typeof global[k] !== 'object' && typeof global[k] !== 'function' && !/^_/g.test(k)) {\n                                global[k] = current[k];\n                            }\n                        }\n                    });\n                }, 0);\n            }\n        },\n        events: {\n            load: function () {\n                var _this = this;\n\n                Core.$template.on('mousedown', function (e) {\n                    let $editable = $(e.target);\n                    if (!$editable.is(EDITABLE_SELECTOR))\n                        $editable = $editable.parents(EDITABLE_SELECTOR);\n\n                    if (initedSummernote && (initedSummernote != $editable[0])) {\n                        _this.destroySummernote();\n                    }\n\n                    if (!$editable[0]) return;\n\n                    // open \"icon dialog\" when click on icon\n                    if ($(e.target).is('.mbr-iconfont')) {\n                        var $icon = $(e.target);\n                        Core.summernoteIconRequest(e.target, $editable[0], function (node) {\n                            if (!arguments.length) return;\n                            if (node) {\n                                if ($editable.is('[data-app-btn]')) { // for button insert to the begining\n                                    $editable.prepend(node);\n                                } else {\n                                    $icon.after(node);\n                                }\n                            }\n                            $icon.remove();\n                            $editable.blur();\n                        });\n                        return false;\n                    }\n                    _this.initSummernote($editable);\n                });\n\n                Core.APP.on('showedPopup', function () {\n                    this.$body.find('.note-popover > *').attr('style', 'display: none;');\n                });\n\n                // attach to popover.update\n                wrapFunc($.summernote.eventHandler.modules.popover, 'update', function ($popover, styleInfo, isAirMode) {\n                    setTimeout(function () {\n\n                        var $context = $(styleInfo.range.sc);\n                        var $editable = $context.closest(EDITABLE_SELECTOR);\n\n                        /**\n                         * @event mbrAppCore:summernotePopoverUpdate\n                         * @param {DomNode} popover\n                         * @param {DomNode} editable\n                         * @param styleInfo\n                         */\n                        _this.fire('summernotePopoverUpdate', $popover.children(':visible').get(0), $editable.get(0), styleInfo); // extract visible popover version\n\n                    }, 0);\n                });\n            },\n            rendered: function () { },\n            changedComponentParams: function (id) {\n                var component = $(Core.getComponentBlock(id));\n                this.destroySummernote(component);\n            },\n            removeComponent: function (id, $component) {\n                this.destroySummernote($component);\n            },\n            clearBlocks: function () {\n                this.destroySummernote();\n            },\n\n            // called when rivets contenteditable on blur or delete event\n            rivetsBlur: function (item) {\n                this.changeSummernote($(item));\n                // this.initSummernote($(item).parents('.app-component'));\n            },\n\n            // hide summernote-popover on media-popover show\n            showedPopover: function () {\n                this.destroySummernote();\n            },\n\n            summernotePopoverUpdate: function (popover, editable) {\n                if (triggerPopoverUpdate) {\n                    triggerPopoverUpdate = false;\n\n                    setTimeout(function () {\n                        triggerPopoverUpdate = true;\n                    }, 0);\n\n                    var hiddenBtns = [];\n                    var $popoverContent = $(popover).find('.popover-content');\n\n                    while ($popoverContent.width() > window.innerWidth) {\n                        var hiddenBtn = $popoverContent.find('> .btn-group:visible:last > *:visible').parent().hide();\n\n                        hiddenBtns.push(hiddenBtn);\n                    }\n\n                    var $shownBtns = $popoverContent.find('> .btn-group:visible > *:visible').closest('.btn-group');\n\n                    var expandBtnHtml =\n                        '<div class=\"btn-group note-show-more\">' +\n                        '<button data-toggle=\"tooltip\" type=\"button\" class=\"btn btn-default btn-sm\" title=\"\" tabindex=\"-1\" data-original-title=\"Insert icon\">' +\n                        '<i class=\"mbr-icon-more-horizontal\"></i>' +\n                        '</button>' +\n                        '</div>';\n\n                    if (hiddenBtns.length > 0) {\n                        $popoverContent.append(expandBtnHtml);\n\n                        $popoverContent.find('.note-show-more').click(function (e) {\n                            if ($popoverContent.find('.note-show-more').is(':first-child')) {\n                                $popoverContent.hide('slide', { direction: 'right' }, 700, function () {\n                                    $shownBtns.show();\n\n                                    hiddenBtns.forEach(function ($item) {\n                                        $item.hide();\n                                    });\n\n                                    $popoverContent.find('.note-show-more').appendTo($popoverContent);\n\n                                    $popoverContent.show('slide', { direction: 'left' }, 700, function () { });\n                                });\n                            } else {\n                                $popoverContent.hide('slide', { direction: 'left' }, 700, function () {\n                                    $shownBtns.hide();\n\n                                    hiddenBtns.forEach(function ($item) {\n                                        $item.show();\n                                    });\n\n                                    $popoverContent.find('.note-show-more').prependTo($popoverContent);\n\n                                    $popoverContent.show('slide', { direction: 'right' }, 700, function () { });\n                                });\n\n                            }\n                        });\n                    }\n                }\n            }\n        }\n    });\n\n    // simple wrap\n    function wrapFunc(obj, funcName, callback) {\n        var func = obj[funcName];\n        obj[funcName] = function () {\n            var args = Array.prototype.slice.call(arguments);\n            func.apply(this, args);\n\n            try {\n                callback.apply(this, args);\n            } catch (e) { }\n        };\n    }\n}(jQuery, mbrAppCore));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder-plugin-summernote.js\n")},"./web/app/builder/js/builder-plugin-tooltips.js":
/*!*******************************************************!*\
  !*** ./web/app/builder/js/builder-plugin-tooltips.js ***!
  \*******************************************************/
/*! no static exports found */function(module,exports){eval("/**\n * @module mbrAppCore/plugins/tooltips\n *\n * @description tooltips\n *\n * @listens module:mbrAppCore/components~mbrAppCore:addedComponent\n * @listens module:mbrAppCore/components-load~mbrAppCore:rendered\n * @listens module:mbrAppCore/components~mbrAppCore:removeComponent\n * @listens module:mbrAppCore/pages~mbrAppCore:removePage\n * @listens module:mbrAppCore/pages~mbrAppCore:switchPage\n */\n(function($, CORE) {\n    'use strict';\n\n    CORE.regExtension({\n        name: 'plugin-tooltips',\n        /** @lends module:mbrAppCore/plugins/tooltips */\n        global: {\n           /**\n            * Initialize tooltips\n            */\n            initTooltips: function() {\n                if($.fn.tooltip) {\n                    this.$template.find('[data-tooltipster]:not(.tooltipstered), [data-toggle=\"tooltip\"]:not(.tooltipstered)').each(function() {\n                        $(this).tooltipster({\n                            delay: 0,\n                            speed: 100,\n                            position: $(this).attr('data-tooltipster') || $(this).attr('data-placement') || 'bottom'\n                        });\n                    });\n                }\n            },\n\n            /**\n            * Destroy tooltips\n            * @param {jQuery} $context\n            */\n            destroyTooltips: function( $context ) {\n                if($.fn.tooltip) {\n                    $context = $context || this.$template;\n                    $context.find('[data-tooltipster].tooltipstered').tooltipster('destroy');\n                }\n            }\n        },\n        events: {\n            addedComponent: function() {\n                this.initTooltips();\n            },\n            rendered: function() {\n                this.initTooltips();\n            },\n            removeComponent: function(id, $component) {\n                this.destroyTooltips($component);\n            },\n            removePage: function() {\n                this.destroyTooltips();\n            },\n            switchPage: function() {\n                this.destroyTooltips();\n            }\n        }\n    });\n}(jQuery, mbrAppCore));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvYXBwL2J1aWxkZXIvanMvYnVpbGRlci1wbHVnaW4tdG9vbHRpcHMuanM/YjI0OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQjtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBLHNCQUFzQixPQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDIiwiZmlsZSI6Ii4vd2ViL2FwcC9idWlsZGVyL2pzL2J1aWxkZXItcGx1Z2luLXRvb2x0aXBzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIG1ickFwcENvcmUvcGx1Z2lucy90b29sdGlwc1xuICpcbiAqIEBkZXNjcmlwdGlvbiB0b29sdGlwc1xuICpcbiAqIEBsaXN0ZW5zIG1vZHVsZTptYnJBcHBDb3JlL2NvbXBvbmVudHN+bWJyQXBwQ29yZTphZGRlZENvbXBvbmVudFxuICogQGxpc3RlbnMgbW9kdWxlOm1ickFwcENvcmUvY29tcG9uZW50cy1sb2Fkfm1ickFwcENvcmU6cmVuZGVyZWRcbiAqIEBsaXN0ZW5zIG1vZHVsZTptYnJBcHBDb3JlL2NvbXBvbmVudHN+bWJyQXBwQ29yZTpyZW1vdmVDb21wb25lbnRcbiAqIEBsaXN0ZW5zIG1vZHVsZTptYnJBcHBDb3JlL3BhZ2Vzfm1ickFwcENvcmU6cmVtb3ZlUGFnZVxuICogQGxpc3RlbnMgbW9kdWxlOm1ickFwcENvcmUvcGFnZXN+bWJyQXBwQ29yZTpzd2l0Y2hQYWdlXG4gKi9cbihmdW5jdGlvbigkLCBDT1JFKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgQ09SRS5yZWdFeHRlbnNpb24oe1xuICAgICAgICBuYW1lOiAncGx1Z2luLXRvb2x0aXBzJyxcbiAgICAgICAgLyoqIEBsZW5kcyBtb2R1bGU6bWJyQXBwQ29yZS9wbHVnaW5zL3Rvb2x0aXBzICovXG4gICAgICAgIGdsb2JhbDoge1xuICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogSW5pdGlhbGl6ZSB0b29sdGlwc1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGluaXRUb29sdGlwczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYoJC5mbi50b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHRlbXBsYXRlLmZpbmQoJ1tkYXRhLXRvb2x0aXBzdGVyXTpub3QoLnRvb2x0aXBzdGVyZWQpLCBbZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdOm5vdCgudG9vbHRpcHN0ZXJlZCknKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS50b29sdGlwc3Rlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJCh0aGlzKS5hdHRyKCdkYXRhLXRvb2x0aXBzdGVyJykgfHwgJCh0aGlzKS5hdHRyKCdkYXRhLXBsYWNlbWVudCcpIHx8ICdib3R0b20nXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIERlc3Ryb3kgdG9vbHRpcHNcbiAgICAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9ICRjb250ZXh0XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGVzdHJveVRvb2x0aXBzOiBmdW5jdGlvbiggJGNvbnRleHQgKSB7XG4gICAgICAgICAgICAgICAgaWYoJC5mbi50b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICRjb250ZXh0ID0gJGNvbnRleHQgfHwgdGhpcy4kdGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgICAgICRjb250ZXh0LmZpbmQoJ1tkYXRhLXRvb2x0aXBzdGVyXS50b29sdGlwc3RlcmVkJykudG9vbHRpcHN0ZXIoJ2Rlc3Ryb3knKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgYWRkZWRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdFRvb2x0aXBzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVuZGVyZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdFRvb2x0aXBzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlQ29tcG9uZW50OiBmdW5jdGlvbihpZCwgJGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveVRvb2x0aXBzKCRjb21wb25lbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZVBhZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveVRvb2x0aXBzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3dpdGNoUGFnZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95VG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufShqUXVlcnksIG1ickFwcENvcmUpKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder-plugin-tooltips.js\n")},"./web/app/builder/js/builder.js":
/*!***************************************!*\
  !*** ./web/app/builder/js/builder.js ***!
  \***************************************/
/*! no static exports found */function(module,exports){eval("/**\n *\n *  APP Core Instance\n *  @module mbrAppCore\n *\n */\n(function($) {\n    var CORE = function() {\n        var _this = this;\n\n        this.$body = $('body');\n        this.$window = $(window);\n        this.$document = $(document);\n        this.$template = $('.template > div');\n\n        // list with default app components\n        this.components = {};\n\n        // current page\n        this.currentPage = 'index.html';\n\n        // list with result params\n        this.resultJSON = {\n            \"index.html\": {\n                settings: {\n                    main: true, // prevent removing page\n                    title: 'Home',\n                    meta_descr: '',\n                    header_custom: '',\n                    footer_custom: '',\n                    html_before: ''\n                },\n                components: []\n            }\n        };\n\n        // is mobile\n        this.isMobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobirise-webview/i.test(navigator.userAgent.toLowerCase());\n\n        if (this.isMobile) {\n            $('html').addClass('device');\n        }\n    }\n\n    // return unique number\n    // not saving, regenerate every project loading\n    var uniqNum_ = 0;\n    CORE.prototype.uniqNum = function() {\n        return uniqNum_++;\n    }\n    CORE.prototype.resetUniqNum = function() {\n        uniqNum_ = 0;\n    }\n\n    // unique name, saved to project\n    this.uniqCompNum = 0;\n    CORE.prototype.getUniqCompName = function() {\n        return (this.uniqCompNum++).toString(36); // 0..1,a..z\n    }\n\n    /* * * * * * * * * *\n     * EVENTS\n     * * * * * * * * * */\n    // Available events:\n    //\n    // *** ../../interface/app.js\n    //    load\n    //\n    // *** builder-components-load.js\n    //    clearBlocks\n    //    clearedBlocks\n    //    loadComponent    [component, isPublish, context]\n    //    loadedComponent  [component, isPublish, context]\n    //    loadedComponentTemplates\n    //    render           [id]\n    //    rendered         [id]\n    //\n    // *** builder-components.js\n    //    addComponent              [name]\n    //    addedComponent            [id]\n    //    removeComponent           [id]\n    //    removedComponent          [id]\n    //    changedComponentPosition  [id, oldId]\n    //    changeComponentParams     [id, name, value]\n    //    changedComponentParams    [id, name, value]\n    //\n    // *** builder-pages.js\n    //    addPage\n    //    addedPage            [name]\n    //    changePageSettings   [name]\n    //    changedPageSettings  [settingName, name]\n    //    removePage           [name]\n    //    removedPage          [name]\n    //    switchPage           [name]\n    //    switchedPage         [name]\n    //\n    // *** builder-plugin-media-editor.js\n    //    clickOnMediaItem        [eventName, component, jQuery popover]\n    //    showMediaPopover        [jQuery popover]\n    //    showedMediaPopover      [jQuery popover]\n    //    hideMediaPopover        [jQuery popover]\n    //    hiddenMediaPopover      [jQuery popover]\n    //\n    // *** builder-plugin-sortable.js\n    //    changeComponentPosition  [id, newPrevId, prevId]\n    //\n    // *** builder-plugin-summernote.js\n    //    summernoteInited     [dom item]\n    //    summernoteFocus      [dom item, event]\n    //    summernoteBlur       [dom item, event]\n    //    summernoteKeydown    [dom item, event]\n    //\n    // *** rivets\n    //    rivetsBlur   [element]\n    //\n    var userEventsList = {};\n    var onceEvents = {};\n\n    /**\n     * @method on\n     * @param  {string}   name\n     * @param  {Function} callback\n     * @description\n     * example:\n     * mbrAppCore.on('myEvent', function(someParams) { console.log(someParams); })\n     * mbrAppCore.fire('myEvent', someParams)\n     *\n     * If you need to load event once use this example:\n     * mbrAppCore.fireOnce('myEvent', someParams)\n     *\n     * Event will be fired once and then new event subscribers will be fired automatically\n     *\n     */\n    CORE.prototype.on = function(name, callback) {\n        if ($.isArray(name)) {\n            for (var k in name) {\n                this.on(name[k], callback);\n            }\n            return;\n        }\n\n        // check if in once list\n        if (onceEvents[name]) {\n            if (callback)\n                callback.apply(this, onceEvents[name]);\n            return;\n        }\n\n\n        // add new callback in events list\n        (userEventsList[name] || (userEventsList[name] = [])).push(callback);\n    }\n    /**\n     * @method off\n     * @param  {string}   name\n     * @param  {Function} callback\n     * @return {bool}\n     */\n    CORE.prototype.off = function(name, callback) {\n        if (!userEventsList[name]) {\n            return false;\n        }\n\n        if (!callback) {\n            delete userEventsList[name];\n        } else {\n            for (var k = 0; k < userEventsList[name].length; k++) {\n                if (userEventsList[name][k] === callback) {\n                    userEventsList[name][k] = undefined;\n                }\n            }\n        }\n    }\n    /**\n     * Event fire function\n     * @method fire\n     * @param  {string} name [description]\n     * @param  {Any} args\n     */\n    CORE.prototype.fire = function(name) {\n        var args = [].slice.call(arguments, 1);\n        if (typeof userEventsList[name] !== 'undefined') {\n            for (var k in userEventsList[name]) {\n                // call with all arguments\n                if (userEventsList[name][k])\n                    try {\n                        userEventsList[name][k].apply(this, args);\n                    }\n                catch (e) {\n                    console.error(\"Error in event handler mbrAppCore::\" + name);\n                    console.log(e);\n                }\n            }\n        }\n    }\n\n    /**\n     * Event fire function once at app session.\n     * Event will be fired once and then new event subscribers will be fired automatically\n     * @method fireOnce\n     * @param  {string} name [description]\n     * @param  {Any} args\n     */\n    CORE.prototype.fireOnce = function(name) {\n        // already In Once List\n        if (name in onceEvents) return;\n\n        var args = [].slice.call(arguments, 1);\n        onceEvents[name] = args;\n\n        // run already added callbacks and destroy one's\n        for (var k in userEventsList[name]) {\n            // call with all arguments\n            if (userEventsList[name][k])\n                try {\n                    userEventsList[name][k].apply(this, args);\n                    userEventsList[name][k] = undefined;\n                }\n            catch (e) {\n                console.error(\"Error in event handler mbrAppCore::\" + name, e);\n            }\n        }\n    }\n\n\n    /* * * * * * * * * *\n     * FILTERS\n     * * * * * * * * * */\n    // Available filters:\n    // *** builder.js\n    //    getResultHTMLcomponent  [html, component]\n    //\n    // *** builder-cleaners.js\n    //    cleanHTMLplease  [jQuery item]\n    //\n    // *** builder-components.js\n    //    replaceSystemVariables      [str, component]\n    //    addComponent                [component]\n    //    getComponent                [result, component id, page, clone]\n    //    getNextComponent            [result, component id, page]\n    //    getPrevComponent            [result, component id, page]\n    //    addComponentStyles          [styles, component, jQuery changed item, property, value, googleLink]\n    //    getComponentStyles          [styles, component]\n    //    preventComponentStylesSave  [bool, component, jQuery changed item, property, value, google link]\n    //    beforeRenderStyles          [result, components, deploy, page, googleLinks]\n    //    afterRenderStyles           [result, components, deploy, page, googleLinks]\n    //    getComponentParams          [params]\n    //    changeComponentParams       [value, param name, params]\n    //    getComponentsAnchorList     [list, default href]\n    //\n    // *** builder-components-load.js\n    //    prepareComponent      [componentStringSkeleton, component]\n    //    loadComponentTemplate [template, component]\n    //\n    // *** builder-pages.js\n    //    getPages              [pages]\n    //    getUniquePageName     [page name, unique number]\n    //    getPageComponents     [components, page name]\n    //    addPage               [page, page name]\n    //    changePageSettings    [value, setting name, page]\n    //    getPagesList          [pages list, default href]\n    //\n    // *** builder-plugin-summernote.js\n    //    summernoteEditableItems   [jQuery item, jQuery context, destroy bool]\n    //    summernotePaste           [text]\n    //\n    var filtersList = {};\n    /**\n     * example:\n     * mbrAppCore.addFilter('myFilter', function(val) { return 'Name: ' + val; })\n     *\n     * var name = 'John';\n     * name = mbrAppCore.applyFilter('myFilter', name);\n     * console.log(name);\n     *\n     * @method addFilter\n     * @param {String} name\n     * @param {Function} filter\n     */\n    CORE.prototype.addFilter = function(name, filter) {\n        (filtersList[name] || (filtersList[name] = [])).push(filter);\n    }\n    CORE.prototype.applyFilter = function(name) {\n        var args = [].slice.call(arguments, 1);\n        if (filtersList[name]) {\n            var filters = filtersList[name];\n            for (var i = 0, len = filters.length; i < len; i++) {\n                args[0] = filters[i].apply(this, args);\n                if (typeof args[0] == \"undefined\")\n                    console.warn(\"handle of \" + name + \" filter return undefined: \", filters[i]);\n            }\n        }\n        return args[0];\n    }\n\n\n    /* * * * * * * * * *\n     * CORE EXTENSIONS\n     * * * * * * * * * */\n    var extensionsList = {};\n    /**\n     * register extension\n     * @method regExtension\n     * @param   list\n     */\n    /**\n     * register extension\n     * @method registerExtension\n     * @param   list\n     */\n    CORE.prototype.regExtension = CORE.prototype.registerExtension = function(list) {\n        if (!list.name || typeof extensionsList[list.name] !== 'undefined') {\n            return false;\n        }\n\n        // add ext to the list\n        extensionsList[name] = list;\n\n        // extend global functions\n        if (list.global) {\n            for (var e in list.global) {\n                if (!(e in this))\n                    this[e] = list.global[e];\n                else\n                    console.error(\"Error re-definition method mbrAppCore.\" + e + \" by module \" + list.name);\n            }\n        }\n\n        // events\n        if (list.events) {\n            for (var k in list.events) {\n                this.on(k, list.events[k]);\n            }\n        }\n\n        return true;\n    }\n\n\n    /* * * * * * * * * *\n     * EXPORT / IMPORT METHODS\n     * * * * * * * * * */\n\n    /**\n     * return result project file\n     * @method getResultProject\n     * @return {object} project json\n     */\n    CORE.prototype.getResultProject = function() {\n        var pages = $.extend(true, {}, this.resultJSON);\n        for (var pageName in pages) {\n            var page = pages[pageName],\n                components = page.components;\n\n            let globalMenu = components.findIndex(el => el._name.includes('menu') && el._once && el._global);\n            if (globalMenu !== -1 && globalMenu) components.unshift(components.splice(globalMenu, 1)[0]);\n\n            delete page.components;\n            page = this.cleanJSONPlease(page);\n            page.components = components;\n            for (var i = 0; i < components.length; i++) {\n                if (this.isSecondaryComponent(components[i])) {\n                    components[i] = this.transformSecondaryComponentForProject(components[i]);\n                } else {\n                    components[i] = this.cleanJSONPlease(components[i]);\n                }\n            }\n        }\n        // return project json\n        return {\n            settings: {\n                currentPage: this.currentPage,\n                uniqCompNum: this.uniqCompNum\n            },\n            pages: pages\n        };\n    }\n\n    /**\n     * Return full html of page\n     * ID - return only selected block ID\n     * @method getResultHTML\n     * @param  {String} page\n     * @param  {String} ID  - component id\n     * @return {Promise}\n     */\n    CORE.prototype.getResultHTML = function(page, ID) {\n        let _this = this;\n        if (!_this.resultJSON[page] || !_this.resultJSON[page].components)\n            return false;\n        if (typeof ID !== 'undefined') {\n            // prepare component\n            let component = _this.getComponent(ID, page);\n            let preparedComponentHtml = _this.prepareComponent(component);\n\n            let tempPage = $('<div>').append(preparedComponentHtml);\n\n            // load component's content\n            _this.loadEachComponent(component, tempPage, _this.resultJSON[page], page, true);\n\n            // transform secondary component to primary (Rivets-compatible)\n            if (_this.isSecondaryComponent(component)) {\n                _this.getSecondaryComponent(component);\n            }\n\n            return $.Deferred().resolve(tempPage.find('[data-app-component-id=' + ID + '] .app-component-content'));\n        }\n        // prepare component blocks\n        let components = _this.resultJSON[page].components;\n        let preparedHtml = _this.prepareAllComponents(components);\n\n        let tempPage = $('<div>').append(preparedHtml);\n\n        for (let k in components) {\n            // load each component content\n            _this.loadEachComponent(components[k], tempPage, _this.resultJSON[page], page, true);\n\n            // transform all secondary components to primary (Rivets-compatible)\n            if (_this.isSecondaryComponent(components[k])) {\n                _this.getSecondaryComponent(components[k]);\n            }\n        }\n        return (function() {\n            let components = tempPage.find('[data-app-component-id]'),\n                d = $.Deferred(),\n                result = '';\n\n            function _componentProcessing(index) {\n                let id, component;\n\n                if (index < components.length) {\n                    id = $(components[index]).attr('data-app-component-id');\n                    component = _this.getComponent(id, page);\n\n                    /**\n                     * @filter mbrAppCore->getResultComponent\n                     * @param {jQuery} $content - component content, $(.app-component-content) contains generated object\n                     * @param {Object} component - component params\n                     * @param {String} page_name (since v2.12)\n                     */\n                    _this.applyFilter('getResultComponent', $.Deferred().resolve($(components[index]).find('.app-component-content'), component, page))\n                        .then(function ($component, component, page) {\n                            let html = _this.cleanHTMLplease($component.html());\n\n                            /**\n                             * @filter mbrAppCore->getResultHTMLcomponent\n                             * @param {String} html - result html of component\n                             * @param {Object} component - component params\n                             * @param {String} page_name (since v2.12)\n                             */\n                            html = _this.applyFilter('getResultHTMLcomponent', html, component, page);\n                            result += html + '\\n\\n';\n\n                            _componentProcessing(++index);\n                        }, function(rej) {\n                            APP.showError(rej)\n                        });\n                } else {\n                    d.resolve(result);\n                }\n            }\n\n            _componentProcessing(0);\n\n            return d.promise();\n        }());\n\n        // tempPage.find('[data-app-component-id]').each(function () {\n        //     var id = $(this).attr('data-app-component-id');\n        //     var component = _this.getComponent(id, page);\n        //     /**\n        //      * @filter mbrAppCore->getResultComponent\n        //      * @param {jQuery} $content - component content, $(.app-component-content) contains generated object\n        //      * @param {Object} component - component params\n        //      * @param {String} page_name (since v2.12)\n        //      */\n        //     _this.applyFilter('getResultComponent', $.Deferred().resolve($(this).find('.app-component-content'), component, page)).then(function ($component) {\n        //         var html = _this.cleanHTMLplease($component.html());\n        //         /**\n        //          * @filter mbrAppCore->getResultHTMLcomponent\n        //          * @param {String} html - result html of component\n        //          * @param {Object} component - component params\n        //          * @param {String} page_name (since v2.12)\n        //          */\n        //         html = _this.applyFilter('getResultHTMLcomponent', html, component, page);\n        //         result += html + '\\n\\n';\n        //     });\n        // });\n\n    };\n\n    /**\n     * load project file\n     * if some error in file - return false\n     * @method loadProject\n     * @param  project\n     * @return {Bool} - ok result\n     */\n    CORE.prototype.loadProject = function(project) {\n\n        var self = this;\n\n        if (!project || !project.pages || typeof project.pages != 'object') {\n            console.error(\"Error: project has no pages\");\n            return false;\n        }\n\n        // init unique number before all\n        this.uniqCompNum = project.settings.uniqCompNum || 0;\n\n        return this.loadPage(project.settings.currentPage, project).always(function() {\n            self.resultJSON = project && project.pages || {};\n            self.currentPage = project && project.settings && project.settings.currentPage || \"\";\n        }).then(function() {\n            self.fire('projectLoaded');\n            self.render();\n        });\n    }\n\n\n    /**\n     * show extenal dialog - redirect to mbrApp.showDialog\n     * @method showDialog\n     * @see mbrApp/common.showDialog\n     * @param  {Map} params\n     * @return modal instance\n     */\n    CORE.prototype.showDialog = function(params) {\n\n        if (this.APP && this.APP.showDialog)\n            return this.APP.showDialog(params);\n        else {\n            console.warn(\"Error: mbrApp is not accessible\");\n\n            // convert to bootbox - tempory solution\n            params.buttons = {\n                success: {\n                    label: 'Ok',\n                    className: \"btn-primary\",\n                    callback: params.success\n                },\n\n                cancel: {\n                    label: 'Cancel',\n                    className: 'btn-default',\n                    callback: params.cancel\n                }\n            }\n            params.message = params.body;\n            return bootbox.dialog(params);\n        }\n    }\n\n\n    // global init\n    window.mbrAppCore = new CORE();\n}(jQuery));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/js/builder.js\n")},"./web/app/builder/summernote/lang/en-US.js":
/*!**************************************************!*\
  !*** ./web/app/builder/summernote/lang/en-US.js ***!
  \**************************************************/
/*! no static exports found */function(module,exports){eval("$.extend($.summernote.lang, {\n  'en-US': {\n    font: {\n      bold: 'Bold',\n      italic: 'Italic',\n      underline: 'Underline',\n      clear: 'Remove Font Style',\n      height: 'Line Height',\n      name: 'Font Family',\n      strikethrough: 'Strikethrough',\n      subscript: 'Subscript',\n      superscript: 'Superscript',\n      size: 'Font Size'\n    },\n    image: {\n      image: 'Picture',\n      insert: 'Insert Image',\n      resizeFull: 'Resize Full',\n      resizeHalf: 'Resize Half',\n      resizeQuarter: 'Resize Quarter',\n      floatLeft: 'Float Left',\n      floatRight: 'Float Right',\n      floatNone: 'Float None',\n      shapeRounded: 'Shape: Rounded',\n      shapeCircle: 'Shape: Circle',\n      shapeThumbnail: 'Shape: Thumbnail',\n      shapeNone: 'Shape: None',\n      dragImageHere: 'Drag image or text here',\n      dropImage: 'Drop image or Text',\n      selectFromFiles: 'Select from files',\n      maximumFileSize: 'Maximum file size',\n      maximumFileSizeError: 'Maximum file size exceeded.',\n      url: 'Image URL',\n      remove: 'Remove Image'\n    },\n    link: {\n      link: 'Link',\n      insert: 'Insert Link',\n      unlink: 'Unlink',\n      edit: 'Edit',\n      textToDisplay: 'Text to display',\n      url: 'To what URL should this link go?',\n      openInNewWindow: 'Open in new window'\n    },\n    table: {\n      table: 'Table'\n    },\n    hr: {\n      insert: 'Insert Horizontal Rule'\n    },\n    style: {\n      style: 'Style',\n      normal: 'Normal',\n      blockquote: 'Quote',\n      pre: 'Code',\n      h1: 'H1',\n      h2: 'H2',\n      h3: 'H3',\n      h4: 'H4',\n      h5: 'H5',\n      h6: 'H6'\n    },\n    lists: {\n      unordered: 'Unordered list',\n      ordered: 'Ordered list'\n    },\n    options: {\n      help: 'Help',\n      fullscreen: 'Full Screen',\n      codeview: 'Code View'\n    },\n    paragraph: {\n      paragraph: 'Paragraph',\n      outdent: 'Outdent',\n      indent: 'Indent',\n      left: 'Align left',\n      center: 'Align center',\n      right: 'Align right',\n      justify: 'Justify full'\n    },\n    color: {\n      recent: 'Recent Color',\n      more: 'More Color',\n      background: 'Background Color',\n      foreground: 'Foreground Color',\n      transparent: 'Transparent',\n      setTransparent: 'Set transparent',\n      reset: 'Reset',\n      resetToDefault: 'Reset to default'\n    },\n    shortcut: {\n      shortcuts: 'Keyboard shortcuts',\n      close: 'Close',\n      textFormatting: 'Text formatting',\n      action: 'Action',\n      paragraphFormatting: 'Paragraph formatting',\n      documentStyle: 'Document Style',\n      extraKeys: 'Extra keys'\n    },\n    history: {\n      undo: 'Undo',\n      redo: 'Redo'\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvYXBwL2J1aWxkZXIvc3VtbWVybm90ZS9sYW5nL2VuLVVTLmpzPzBmMGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6Ii4vd2ViL2FwcC9idWlsZGVyL3N1bW1lcm5vdGUvbGFuZy9lbi1VUy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIiQuZXh0ZW5kKCQuc3VtbWVybm90ZS5sYW5nLCB7XG4gICdlbi1VUyc6IHtcbiAgICBmb250OiB7XG4gICAgICBib2xkOiAnQm9sZCcsXG4gICAgICBpdGFsaWM6ICdJdGFsaWMnLFxuICAgICAgdW5kZXJsaW5lOiAnVW5kZXJsaW5lJyxcbiAgICAgIGNsZWFyOiAnUmVtb3ZlIEZvbnQgU3R5bGUnLFxuICAgICAgaGVpZ2h0OiAnTGluZSBIZWlnaHQnLFxuICAgICAgbmFtZTogJ0ZvbnQgRmFtaWx5JyxcbiAgICAgIHN0cmlrZXRocm91Z2g6ICdTdHJpa2V0aHJvdWdoJyxcbiAgICAgIHN1YnNjcmlwdDogJ1N1YnNjcmlwdCcsXG4gICAgICBzdXBlcnNjcmlwdDogJ1N1cGVyc2NyaXB0JyxcbiAgICAgIHNpemU6ICdGb250IFNpemUnXG4gICAgfSxcbiAgICBpbWFnZToge1xuICAgICAgaW1hZ2U6ICdQaWN0dXJlJyxcbiAgICAgIGluc2VydDogJ0luc2VydCBJbWFnZScsXG4gICAgICByZXNpemVGdWxsOiAnUmVzaXplIEZ1bGwnLFxuICAgICAgcmVzaXplSGFsZjogJ1Jlc2l6ZSBIYWxmJyxcbiAgICAgIHJlc2l6ZVF1YXJ0ZXI6ICdSZXNpemUgUXVhcnRlcicsXG4gICAgICBmbG9hdExlZnQ6ICdGbG9hdCBMZWZ0JyxcbiAgICAgIGZsb2F0UmlnaHQ6ICdGbG9hdCBSaWdodCcsXG4gICAgICBmbG9hdE5vbmU6ICdGbG9hdCBOb25lJyxcbiAgICAgIHNoYXBlUm91bmRlZDogJ1NoYXBlOiBSb3VuZGVkJyxcbiAgICAgIHNoYXBlQ2lyY2xlOiAnU2hhcGU6IENpcmNsZScsXG4gICAgICBzaGFwZVRodW1ibmFpbDogJ1NoYXBlOiBUaHVtYm5haWwnLFxuICAgICAgc2hhcGVOb25lOiAnU2hhcGU6IE5vbmUnLFxuICAgICAgZHJhZ0ltYWdlSGVyZTogJ0RyYWcgaW1hZ2Ugb3IgdGV4dCBoZXJlJyxcbiAgICAgIGRyb3BJbWFnZTogJ0Ryb3AgaW1hZ2Ugb3IgVGV4dCcsXG4gICAgICBzZWxlY3RGcm9tRmlsZXM6ICdTZWxlY3QgZnJvbSBmaWxlcycsXG4gICAgICBtYXhpbXVtRmlsZVNpemU6ICdNYXhpbXVtIGZpbGUgc2l6ZScsXG4gICAgICBtYXhpbXVtRmlsZVNpemVFcnJvcjogJ01heGltdW0gZmlsZSBzaXplIGV4Y2VlZGVkLicsXG4gICAgICB1cmw6ICdJbWFnZSBVUkwnLFxuICAgICAgcmVtb3ZlOiAnUmVtb3ZlIEltYWdlJ1xuICAgIH0sXG4gICAgbGluazoge1xuICAgICAgbGluazogJ0xpbmsnLFxuICAgICAgaW5zZXJ0OiAnSW5zZXJ0IExpbmsnLFxuICAgICAgdW5saW5rOiAnVW5saW5rJyxcbiAgICAgIGVkaXQ6ICdFZGl0JyxcbiAgICAgIHRleHRUb0Rpc3BsYXk6ICdUZXh0IHRvIGRpc3BsYXknLFxuICAgICAgdXJsOiAnVG8gd2hhdCBVUkwgc2hvdWxkIHRoaXMgbGluayBnbz8nLFxuICAgICAgb3BlbkluTmV3V2luZG93OiAnT3BlbiBpbiBuZXcgd2luZG93J1xuICAgIH0sXG4gICAgdGFibGU6IHtcbiAgICAgIHRhYmxlOiAnVGFibGUnXG4gICAgfSxcbiAgICBocjoge1xuICAgICAgaW5zZXJ0OiAnSW5zZXJ0IEhvcml6b250YWwgUnVsZSdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBzdHlsZTogJ1N0eWxlJyxcbiAgICAgIG5vcm1hbDogJ05vcm1hbCcsXG4gICAgICBibG9ja3F1b3RlOiAnUXVvdGUnLFxuICAgICAgcHJlOiAnQ29kZScsXG4gICAgICBoMTogJ0gxJyxcbiAgICAgIGgyOiAnSDInLFxuICAgICAgaDM6ICdIMycsXG4gICAgICBoNDogJ0g0JyxcbiAgICAgIGg1OiAnSDUnLFxuICAgICAgaDY6ICdINidcbiAgICB9LFxuICAgIGxpc3RzOiB7XG4gICAgICB1bm9yZGVyZWQ6ICdVbm9yZGVyZWQgbGlzdCcsXG4gICAgICBvcmRlcmVkOiAnT3JkZXJlZCBsaXN0J1xuICAgIH0sXG4gICAgb3B0aW9uczoge1xuICAgICAgaGVscDogJ0hlbHAnLFxuICAgICAgZnVsbHNjcmVlbjogJ0Z1bGwgU2NyZWVuJyxcbiAgICAgIGNvZGV2aWV3OiAnQ29kZSBWaWV3J1xuICAgIH0sXG4gICAgcGFyYWdyYXBoOiB7XG4gICAgICBwYXJhZ3JhcGg6ICdQYXJhZ3JhcGgnLFxuICAgICAgb3V0ZGVudDogJ091dGRlbnQnLFxuICAgICAgaW5kZW50OiAnSW5kZW50JyxcbiAgICAgIGxlZnQ6ICdBbGlnbiBsZWZ0JyxcbiAgICAgIGNlbnRlcjogJ0FsaWduIGNlbnRlcicsXG4gICAgICByaWdodDogJ0FsaWduIHJpZ2h0JyxcbiAgICAgIGp1c3RpZnk6ICdKdXN0aWZ5IGZ1bGwnXG4gICAgfSxcbiAgICBjb2xvcjoge1xuICAgICAgcmVjZW50OiAnUmVjZW50IENvbG9yJyxcbiAgICAgIG1vcmU6ICdNb3JlIENvbG9yJyxcbiAgICAgIGJhY2tncm91bmQ6ICdCYWNrZ3JvdW5kIENvbG9yJyxcbiAgICAgIGZvcmVncm91bmQ6ICdGb3JlZ3JvdW5kIENvbG9yJyxcbiAgICAgIHRyYW5zcGFyZW50OiAnVHJhbnNwYXJlbnQnLFxuICAgICAgc2V0VHJhbnNwYXJlbnQ6ICdTZXQgdHJhbnNwYXJlbnQnLFxuICAgICAgcmVzZXQ6ICdSZXNldCcsXG4gICAgICByZXNldFRvRGVmYXVsdDogJ1Jlc2V0IHRvIGRlZmF1bHQnXG4gICAgfSxcbiAgICBzaG9ydGN1dDoge1xuICAgICAgc2hvcnRjdXRzOiAnS2V5Ym9hcmQgc2hvcnRjdXRzJyxcbiAgICAgIGNsb3NlOiAnQ2xvc2UnLFxuICAgICAgdGV4dEZvcm1hdHRpbmc6ICdUZXh0IGZvcm1hdHRpbmcnLFxuICAgICAgYWN0aW9uOiAnQWN0aW9uJyxcbiAgICAgIHBhcmFncmFwaEZvcm1hdHRpbmc6ICdQYXJhZ3JhcGggZm9ybWF0dGluZycsXG4gICAgICBkb2N1bWVudFN0eWxlOiAnRG9jdW1lbnQgU3R5bGUnLFxuICAgICAgZXh0cmFLZXlzOiAnRXh0cmEga2V5cydcbiAgICB9LFxuICAgIGhpc3Rvcnk6IHtcbiAgICAgIHVuZG86ICdVbmRvJyxcbiAgICAgIHJlZG86ICdSZWRvJ1xuICAgIH1cbiAgfVxufSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./web/app/builder/summernote/lang/en-US.js\n")},"./web/app/builder/summernote/plugin/summernote-ext-mbr-align.js":
/*!***********************************************************************!*\
  !*** ./web/app/builder/summernote/plugin/summernote-ext-mbr-align.js ***!
  \***********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n *  @module\n */\n(function (factory) {\n  /* global define */\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(function ($) {\n  // template\n  var tmpl = $.summernote.renderer.getTemplate();\n  // var editor = $.summernote.eventHandler.getEditor();\n\n  // return ancestor to accept font styles\n  function getAncestor(ancestors) {\n    var item;\n\n    // check if some of alloved tags\n    for (var k in ancestors) {\n      if (/\\bP\\b|DIV|UL|H1|H2|H3|H4|H5|H6/g.test(ancestors[k].tagName)) {\n        item = ancestors[k];\n        continue;\n      }\n    }\n\n    return item || $(ancestors[ancestors.length - 1]).parent()[0];\n  }\n\n  function changeProps(item, prop, value) {\n    if (window.mbrAppCore) {\n      window.mbrAppCore.addComponentStyles($(item), prop, value);\n    } else {\n      $(item).css(prop, value);\n    }\n  }\n\n  /**\n   * @class plugin.mbr_btn \n   * \n   * Hello Plugin  \n   */\n  $.summernote.addPlugin({\n    /** @property {String} name name of plugin */\n    name: 'mbrAlign',\n\n    langs: {\n        'en-US': {\n            'mbrAlign': {\n                'mbrAlign': 'Align'\n            }\n        }\n    },\n    \n    /** \n     * @property {Object} buttons \n     * @property {Function} buttons.hello   function to make button\n     * @property {Function} buttons.helloDropdown   function to make button\n     * @property {Function} buttons.helloImage   function to make button\n     */\n    buttons: { // buttons\n      mbrAlign: function (lang, options) {\n        return tmpl.iconButton('fa fa-align-left', {\n          event: 'mbrAlign',\n          name: 'mbrAlign',\n          title: lang.mbrAlign.mbrAlign,\n          className: 'mbrAlign',\n          hide: false\n        });\n      }\n    },\n\n    /**\n     * @property {Object} events \n     * @property {Function} events.hello  run function when button that has a 'hello' event name  fires click\n     * @property {Function} events.helloDropdown run function when button that has a 'helloDropdown' event name  fires click\n     * @property {Function} events.helloImage run function when button that has a 'helloImage' event name  fires click\n     */\n    events: { // events\n      mbrAlign: function (event, editor, layoutInfo) {\n        event.stopPropagation();\n        var $editable = layoutInfo.editable();\n        var style = editor.currentStyle();\n        var item = getAncestor(style.ancestors);\n\n        switch (style['text-align']) {\n          case 'left':\n          case 'start':\n            if (window.mbrAppCore) {\n              changeProps(item, 'text-align', 'center');\n            } else {\n              editor.justifyCenter($editable);\n            }\n            break;\n          case 'right':\n            // editor.justifyFull($editable);\n            if (window.mbrAppCore) {\n              changeProps(item, 'text-align', 'left');\n            } else {\n              editor.justifyLeft($editable);\n            }\n            break;\n          case 'center':\n            if (window.mbrAppCore) {\n              changeProps(item, 'text-align', 'right');\n            } else {\n              editor.justifyRight($editable);\n            }\n            break;\n          // case 'justify':\n          //   editor.justifyLeft($editable);\n          //   break;\n        }\n      }\n    }\n  });\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvYXBwL2J1aWxkZXIvc3VtbWVybm90ZS9wbHVnaW4vc3VtbWVybm90ZS1leHQtbWJyLWFsaWduLmpzP2RmYmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sSUFBMEM7QUFDaEQ7QUFDQSxJQUFJLGlDQUFPLENBQUMsMkNBQVEsQ0FBQyxvQ0FBRSxPQUFPO0FBQUE7QUFBQTtBQUFBLG9HQUFDO0FBQy9CLEdBQUcsTUFBTSxFQUdOO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxrQkFBa0IsT0FBTztBQUN6QixrQkFBa0IsU0FBUztBQUMzQixrQkFBa0IsU0FBUztBQUMzQixrQkFBa0IsU0FBUztBQUMzQjtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7O0FBRUw7QUFDQSxrQkFBa0IsT0FBTztBQUN6QixrQkFBa0IsU0FBUztBQUMzQixrQkFBa0IsU0FBUztBQUMzQixrQkFBa0IsU0FBUztBQUMzQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwiZmlsZSI6Ii4vd2ViL2FwcC9idWlsZGVyL3N1bW1lcm5vdGUvcGx1Z2luL3N1bW1lcm5vdGUtZXh0LW1ici1hbGlnbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIEBtb2R1bGVcbiAqL1xuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gIC8qIGdsb2JhbCBkZWZpbmUgKi9cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzOiBqUXVlcnlcbiAgICBmYWN0b3J5KHdpbmRvdy5qUXVlcnkpO1xuICB9XG59KGZ1bmN0aW9uICgkKSB7XG4gIC8vIHRlbXBsYXRlXG4gIHZhciB0bXBsID0gJC5zdW1tZXJub3RlLnJlbmRlcmVyLmdldFRlbXBsYXRlKCk7XG4gIC8vIHZhciBlZGl0b3IgPSAkLnN1bW1lcm5vdGUuZXZlbnRIYW5kbGVyLmdldEVkaXRvcigpO1xuXG4gIC8vIHJldHVybiBhbmNlc3RvciB0byBhY2NlcHQgZm9udCBzdHlsZXNcbiAgZnVuY3Rpb24gZ2V0QW5jZXN0b3IoYW5jZXN0b3JzKSB7XG4gICAgdmFyIGl0ZW07XG5cbiAgICAvLyBjaGVjayBpZiBzb21lIG9mIGFsbG92ZWQgdGFnc1xuICAgIGZvciAodmFyIGsgaW4gYW5jZXN0b3JzKSB7XG4gICAgICBpZiAoL1xcYlBcXGJ8RElWfFVMfEgxfEgyfEgzfEg0fEg1fEg2L2cudGVzdChhbmNlc3RvcnNba10udGFnTmFtZSkpIHtcbiAgICAgICAgaXRlbSA9IGFuY2VzdG9yc1trXTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW0gfHwgJChhbmNlc3RvcnNbYW5jZXN0b3JzLmxlbmd0aCAtIDFdKS5wYXJlbnQoKVswXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoYW5nZVByb3BzKGl0ZW0sIHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKHdpbmRvdy5tYnJBcHBDb3JlKSB7XG4gICAgICB3aW5kb3cubWJyQXBwQ29yZS5hZGRDb21wb25lbnRTdHlsZXMoJChpdGVtKSwgcHJvcCwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKGl0ZW0pLmNzcyhwcm9wLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBjbGFzcyBwbHVnaW4ubWJyX2J0biBcbiAgICogXG4gICAqIEhlbGxvIFBsdWdpbiAgXG4gICAqL1xuICAkLnN1bW1lcm5vdGUuYWRkUGx1Z2luKHtcbiAgICAvKiogQHByb3BlcnR5IHtTdHJpbmd9IG5hbWUgbmFtZSBvZiBwbHVnaW4gKi9cbiAgICBuYW1lOiAnbWJyQWxpZ24nLFxuXG4gICAgbGFuZ3M6IHtcbiAgICAgICAgJ2VuLVVTJzoge1xuICAgICAgICAgICAgJ21ickFsaWduJzoge1xuICAgICAgICAgICAgICAgICdtYnJBbGlnbic6ICdBbGlnbidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgXG4gICAgLyoqIFxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBidXR0b25zIFxuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGJ1dHRvbnMuaGVsbG8gICBmdW5jdGlvbiB0byBtYWtlIGJ1dHRvblxuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGJ1dHRvbnMuaGVsbG9Ecm9wZG93biAgIGZ1bmN0aW9uIHRvIG1ha2UgYnV0dG9uXG4gICAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gYnV0dG9ucy5oZWxsb0ltYWdlICAgZnVuY3Rpb24gdG8gbWFrZSBidXR0b25cbiAgICAgKi9cbiAgICBidXR0b25zOiB7IC8vIGJ1dHRvbnNcbiAgICAgIG1ickFsaWduOiBmdW5jdGlvbiAobGFuZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdG1wbC5pY29uQnV0dG9uKCdmYSBmYS1hbGlnbi1sZWZ0Jywge1xuICAgICAgICAgIGV2ZW50OiAnbWJyQWxpZ24nLFxuICAgICAgICAgIG5hbWU6ICdtYnJBbGlnbicsXG4gICAgICAgICAgdGl0bGU6IGxhbmcubWJyQWxpZ24ubWJyQWxpZ24sXG4gICAgICAgICAgY2xhc3NOYW1lOiAnbWJyQWxpZ24nLFxuICAgICAgICAgIGhpZGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge09iamVjdH0gZXZlbnRzIFxuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGV2ZW50cy5oZWxsbyAgcnVuIGZ1bmN0aW9uIHdoZW4gYnV0dG9uIHRoYXQgaGFzIGEgJ2hlbGxvJyBldmVudCBuYW1lICBmaXJlcyBjbGlja1xuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGV2ZW50cy5oZWxsb0Ryb3Bkb3duIHJ1biBmdW5jdGlvbiB3aGVuIGJ1dHRvbiB0aGF0IGhhcyBhICdoZWxsb0Ryb3Bkb3duJyBldmVudCBuYW1lICBmaXJlcyBjbGlja1xuICAgICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGV2ZW50cy5oZWxsb0ltYWdlIHJ1biBmdW5jdGlvbiB3aGVuIGJ1dHRvbiB0aGF0IGhhcyBhICdoZWxsb0ltYWdlJyBldmVudCBuYW1lICBmaXJlcyBjbGlja1xuICAgICAqL1xuICAgIGV2ZW50czogeyAvLyBldmVudHNcbiAgICAgIG1ickFsaWduOiBmdW5jdGlvbiAoZXZlbnQsIGVkaXRvciwgbGF5b3V0SW5mbykge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdmFyICRlZGl0YWJsZSA9IGxheW91dEluZm8uZWRpdGFibGUoKTtcbiAgICAgICAgdmFyIHN0eWxlID0gZWRpdG9yLmN1cnJlbnRTdHlsZSgpO1xuICAgICAgICB2YXIgaXRlbSA9IGdldEFuY2VzdG9yKHN0eWxlLmFuY2VzdG9ycyk7XG5cbiAgICAgICAgc3dpdGNoIChzdHlsZVsndGV4dC1hbGlnbiddKSB7XG4gICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICAgICAgaWYgKHdpbmRvdy5tYnJBcHBDb3JlKSB7XG4gICAgICAgICAgICAgIGNoYW5nZVByb3BzKGl0ZW0sICd0ZXh0LWFsaWduJywgJ2NlbnRlcicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWRpdG9yLmp1c3RpZnlDZW50ZXIoJGVkaXRhYmxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgIC8vIGVkaXRvci5qdXN0aWZ5RnVsbCgkZWRpdGFibGUpO1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5tYnJBcHBDb3JlKSB7XG4gICAgICAgICAgICAgIGNoYW5nZVByb3BzKGl0ZW0sICd0ZXh0LWFsaWduJywgJ2xlZnQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVkaXRvci5qdXN0aWZ5TGVmdCgkZWRpdGFibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICAgIGlmICh3aW5kb3cubWJyQXBwQ29yZSkge1xuICAgICAgICAgICAgICBjaGFuZ2VQcm9wcyhpdGVtLCAndGV4dC1hbGlnbicsICdyaWdodCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWRpdG9yLmp1c3RpZnlSaWdodCgkZWRpdGFibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgLy8gY2FzZSAnanVzdGlmeSc6XG4gICAgICAgICAgLy8gICBlZGl0b3IuanVzdGlmeUxlZnQoJGVkaXRhYmxlKTtcbiAgICAgICAgICAvLyAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn0pKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./web/app/builder/summernote/plugin/summernote-ext-mbr-align.js\n")},"./web/app/builder/summernote/plugin/summernote-ext-mbr-button.js":
/*!************************************************************************!*\
  !*** ./web/app/builder/summernote/plugin/summernote-ext-mbr-button.js ***!
  \************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n *  summernote plugin for extends functionality\n *\n *  @link module: summernote\n *  @link module: bootbox\n *  @module\n */\n(function (factory) {\n    /* global define */\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(function ($) {\n    // template\n    var tmpl = $.summernote.renderer.getTemplate();\n\n    var defaultButtonColors = {\n        'btn-default': '#e6e6e6',\n        'btn-primary': '#286090',\n        'btn-success': '#449d44',\n        'btn-info': '#31b0d5',\n        'btn-warning': '#ec971f',\n        'btn-danger': '#c9302c',\n    };\n    var defaultLinkColors = {\n        'text-muted': '#777',\n        'text-primary': '#337ab7',\n        'text-success': '#3c763d',\n        'text-info': '#31708f',\n        'text-warning': '#8a6d3b',\n        'text-danger': '#a94442'\n    };\n\n    var getMbrApp = function () {\n        return mbrAppCore && mbrAppCore.APP;\n    }\n\n    // .btn.component-params\n\n    var mbrAppFire = function () {\n        var mbrApp = getMbrApp();\n        if (mbrApp && mbrApp.fire)\n            return mbrApp.fire.apply(mbrApp, arguments);\n    }\n\n    var buttonColors = function () {\n        var mbrApp = getMbrApp();\n        if (mbrApp && mbrApp.getThemeButtonColors && mbrApp.getThemeButtonColors()) {\n            return mbrApp.getThemeButtonColors();\n        }\n        return defaultButtonColors;\n    };\n    var hasButtonOutlineColors = function () {\n        var mbrApp = getMbrApp();\n        return mbrApp && mbrApp.hasButtonOutlineColors && mbrApp.hasButtonOutlineColors();\n    };\n    var linkColors = function () {\n        var mbrApp = getMbrApp();\n        if (mbrApp && mbrApp.getThemeLinkColors && mbrApp.getThemeLinkColors()) {\n            return mbrApp.getThemeLinkColors();\n        }\n        return defaultLinkColors;\n    };\n\n    var editSiteStylesButton = function () {\n        var mbrApp = getMbrApp();\n        if (mbrApp && mbrApp.getThemeButtonColors) {\n            return '<li class=\"link-change-style\">' +\n                // filter needed for translation\n                mbrApp.applyFilter('buttonColorSiteStyleIcon', '') +\n                '</li>';\n        }\n\n        return '';\n    };\n\n    /**\n     * @class plugin.mbr_btn\n     *\n     * Hello Plugin\n     */\n    $.summernote.addPlugin({\n        /** @property {String} name name of plugin */\n        name: 'mbrBtn',\n\n        langs: {\n            'en-US': {\n                mbrBtn: {\n                    mbrBtnAdd: 'Add',\n                    mbrBtnMove: 'Move Left',\n                    mbrBtnRemove: 'Remove',\n                    mbrBtnColor: 'Color',\n                    mbrBtnExtendedColor: 'Color'\n                }\n            }\n        },\n\n        /**\n         * @property {Object} buttons\n         * @property {Function} buttons.hello   function to make button\n         * @property {Function} buttons.helloDropdown   function to make button\n         * @property {Function} buttons.helloImage   function to make button\n         */\n        buttons: { // buttons\n            mbrBtnRemove: function (lang, options) {\n                return tmpl.iconButton('mbr-icon-trash', {\n                    event: 'mbrBtnRemove',\n                    name: 'mbrBtnRemove',\n                    title: lang.mbrBtn.mbrBtnRemove,\n                    hide: true\n                });\n            },\n            mbrBtnAdd: function (lang, options) {\n                return tmpl.iconButton('mbr-icon-plus', {\n                    event: 'mbrBtnAdd',\n                    name: 'mbrBtnAdd',\n                    title: lang.mbrBtn.mbrBtnAdd,\n                    hide: false\n                });\n            },\n            mbrBtnMove: function (lang, options) {\n                return tmpl.iconButton('mbr-icon-arrow-left', {\n                    event: 'mbrBtnMove',\n                    name: 'mbrBtnMove',\n                    title: lang.mbrBtn.mbrBtnMove,\n                    hide: false\n                });\n            },\n            mbrBtnColor: function (lang, options) {\n                var items = '', colors = buttonColors();\n                for (var k in colors) {\n                    items += '<li><a data-event=\"mbrBtnColor\" href=\"javascript:void(0);\" data-value=\"' + k + '\">' +\n                        '<i class=\"mbr-icon-check\"></i>' +\n                        '<span style=\"width:25px;height:25px;border-radius:100px;' +\n                        'vertical-align: bottom;margin-left: 5px;' +\n                        'display: inline-block;background:' + $.summernote.adaptColorForBg(colors[k]) + ';\">' +\n                        '</span>' +\n                        '</a></li>';\n                }\n\n                var label = '<span class=\"note-current-mbrBtnColor\"></span>';\n                var dropdown = '<ul class=\"dropdown-menu note-check\">' + items + '</ul>';\n\n                return tmpl.button(label, {\n                    title: lang.mbrBtn.mbrBtnColor,\n                    name: 'mbrBtnColor',\n                    event: 'mbrBtnColorPrevent',\n                    hide: true,\n                    className: 'note-mbrBtnColor',\n                    dropdown: dropdown,\n                    nocaret: true\n                });\n            },\n            mbrBtnExtendedColor: function (lang, options) {\n                var items = '', colors = buttonColors();\n                for (var k in colors) {\n                    items += '<li><a data-event=\"mbrBtnColor\" href=\"javascript:void(0);\" data-value=\"' + k + '\">' +\n                        '<i class=\"mbr-icon-check\"></i>' +\n                        '<span style=\"width:25px;height:25px;border-radius:100px;' +\n                        'vertical-align: bottom;margin-left: 5px;' +\n                        'display: inline-block;background:' + $.summernote.adaptColorForBg(colors[k]) + ';\">' +\n                        '</span>' +\n                        '</a></li>';\n                }\n                if (hasButtonOutlineColors()) {\n                    for (var k in colors) {\n                        items += '<li><a data-event=\"mbrBtnColor\" href=\"javascript:void(0);\" data-value=\"' + k + '-outline\">' +\n                            '<i class=\"mbr-icon-check\"></i>' +\n                            '<span style=\"width:25px;height:25px;border-radius:100px;' +\n                            'vertical-align: bottom;margin-left: 5px;' +\n                            'display: inline-block;background: none;border: 3px solid ' + $.summernote.adaptColorForBg(colors[k]) + ';\">' +\n                            '</span>' +\n                            '</a></li>';\n                    }\n                }\n\n                var label = '<span class=\"note-current-mbrBtnColor\"></span>';\n                var dropdown = '<ul class=\"dropdown-menu note-check\">' + items + editSiteStylesButton() + '</ul>';\n\n                return tmpl.button(label, {\n                    title: lang.mbrBtn.mbrBtnExtendedColor,\n                    name: 'mbrBtnColor',\n                    event: 'mbrBtnColorPrevent',\n                    hide: !options.isSecondaryComponent,\n                    className: 'note-mbrBtnColor',\n                    dropdown: dropdown,\n                    nocaret: true\n                });\n            },\n            mbrLinkColor: function (lang, options) {\n                var items = '', colors = linkColors();\n                for (var k in colors) {\n                    items += '<li><a data-event=\"mbrLinkColor\" href=\"javascript:void(0);\" data-value=\"' + k + '\">' +\n                        '<i class=\"mbr-icon-check\"></i>' +\n                        '<span style=\"width:25px;height:25px;border-radius:100px;' +\n                        'vertical-align: bottom;margin-left: 5px;' +\n                        'display: inline-block;background:' + $.summernote.adaptColorForBg(colors[k]) + ';\">' +\n                        '</span>' +\n                        '</a></li>';\n                }\n\n                var label = '<span class=\"note-current-mbrLinkColor\"></span>';\n                var dropdown = '<ul class=\"dropdown-menu note-check\">' + items + editSiteStylesButton() + '</ul>';\n\n                return tmpl.button(label, {\n                    title: 'Color',\n                    name: 'mbrLinkColor',\n                    event: 'mbrBtnColorPrevent',\n                    hide: !options.isSecondaryComponent,\n                    className: 'note-mbrLinkColor',\n                    dropdown: dropdown,\n                    nocaret: true\n                });\n            }\n        },\n\n        init: function (layoutInfo) {\n\n            var groups = [\n                ['insert2', ['mbrBtnExtendedColor']],\n                ['insert3', ['mbrBtnAdd', 'mbrBtnMove', 'mbrBtnRemove']]\n            ];\n\n            if (typeof mbrAppCore != 'undefined') {\n\n                /**\n                 * Modificate groups on summernote button init\n                 * @param {Array} groups\n                 * @param {String} groups.1 - group\n                 * @param {String[]} groups.2 - buttons\n                 * @param {jQuery} $editable - target element\n                 */\n                groups = mbrAppCore.applyFilter('summernoteMakePopover', groups, layoutInfo.editable());\n\n            }\n\n            var options = layoutInfo.editor().data('options');\n\n            for (var k in groups) {\n\n                var group = groups[k];\n\n                if (options.customToolbar) {\n                    for (var key in options.customToolbar) {\n                        if (options.customToolbar[key] != 'off') continue;\n                        var index = group[1].indexOf(key);\n                        if (index < 0) continue;\n                        group[1].splice(index, 1);\n                    }\n                }\n\n                if (group[1].length) {\n                    var selector = group[1].concat('mbrShowSiteColors').map(function (btnName) {\n                        if (btnName == 'mbrBtnExtendedColor') btnName = 'mbrBtnColorPrevent';\n                        else if (btnName == 'mbrBtnColor') btnName += 'Prevent';\n                        return '[data-event=\"' + btnName + '\"]';\n                    }).join(',');\n                    layoutInfo.editable().summernote('popover.addGroup', group, 'button');\n                    layoutInfo.popover().find(selector).tooltip({\n                        container: 'body',\n                        trigger: 'hover',\n                        placement: 'top'\n                    }).on('click', function () {\n                        $(this).tooltip('hide');\n                    });\n                }\n\n            }\n\n        },\n\n        /**\n         * @property {Object} events\n         * @property {Function} events.hello  run function when button that has a 'hello' event name  fires click\n         * @property {Function} events.helloDropdown run function when button that has a 'helloDropdown' event name  fires click\n         * @property {Function} events.helloImage run function when button that has a 'helloImage' event name  fires click\n         */\n        events: { // events\n            mbrShowSiteColors: function (event, editor, layoutInfo) {\n                setTimeout(function () { // prevent to close on iframe click\n                    var mbrApp = getMbrApp();\n                    mbrApp.openThemeSettings();\n                    mbrApp.ToogleThemeSettings.target.$elm // highlight colors in #theme-settings\n                        .find('[data-group-name=\"colors\"]')\n                        .addClass('selected');\n                }, 100);\n            },\n            mbrBtnRemove: function (event, editor, layoutInfo) {\n                // Get current editable node\n                var $editable = layoutInfo.editable();\n                var isMenu = $editable.hasClass('mbr-menu-item') ||\n                    $editable.hasClass('mbr-editable-menu-item');\n                var useParent = isMenu ||\n                    $editable.attr('data-app-btn') === 'parent';\n                var $sibling = useParent ?\n                    $editable.parent().siblings('li:eq(0)').find('> a')\n                    : $editable.siblings('[data-app-btn]:eq(0)');\n                var $parent = useParent ?\n                    $editable.parents('[data-app-edit]:eq(0)')\n                    : $editable.parent();\n\n                // copied from summernote.js\n                var mbrBtnRemoveSiblings = useParent ?\n                    $editable.parent().siblings('li').find('> a')\n                    : $editable.siblings('btn, [data-app-btn]');\n\n                if (!isMenu && !mbrBtnRemoveSiblings.length) {\n                    $editable.blur();\n                    /**\n                     * Event for trying to remove last button in buttons list\n                     * @event mbrApp#removeLastButton\n                     */\n                    mbrAppFire(\"removeLastButton\");\n                    return;\n                }\n\n\n                if (useParent) {\n                    $editable.destroy().parent().remove();\n                } else {\n                    $editable.destroy().remove();\n                }\n\n                if ($parent.is('[data-app-edit]')) {\n                    // remove from mobirise core\n                    $parent.trigger('delete.rivets');\n                }\n\n\n            },\n            mbrBtnAdd: function (event, editor, layoutInfo) {\n                // Get current editable node\n                var $editable = layoutInfo.editable();\n                var $oldBtn = $editable;\n                var useParent = $editable.hasClass('mbr-menu-item') ||\n                    $editable.hasClass('mbr-editable-menu-item') ||\n                    $editable.attr('data-app-btn') === 'parent';\n\n                if (useParent) {\n                    $oldBtn = $editable.parent();\n                }\n\n                // clone current button\n                var $newBtn = $oldBtn.clone();\n\n                // insert clone after current button\n                $oldBtn.after($newBtn);\n                $oldBtn.after(' '); // space between buttons\n\n                if (useParent) {\n                    $newBtn = $newBtn.find('> a');\n                    $oldBtn = $oldBtn.find('> a');\n                }\n\n                // remove all classes and attributes from cloned button\n                $newBtn\n                    .removeClass('summernote-air note-air-editor note-editable')\n                    .removeAttr('id contenteditable');\n\n                // init new button\n                $newBtn.trigger('mousedown');\n\n            },\n            mbrBtnMove: function (event, editor, layoutInfo) {\n                // Get current editable node\n                var $editable = layoutInfo.editable();\n                var $curBtn = $editable;\n\n                var useParent = $editable.hasClass('mbr-menu-item') ||\n                    $editable.hasClass('mbr-editable-menu-item') ||\n                    $editable.attr('data-app-btn') === 'parent';\n\n                if (useParent) {\n                    $curBtn = $editable.parent();\n                }\n\n                // get previous button\n                var $prevBtn = $curBtn.prev(useParent ? undefined : '.btn');\n                if (!$prevBtn[0]) {\n                    $prevBtn = $curBtn.prev('[data-app-btn]');\n                }\n                if (!$prevBtn[0]) {\n                    return;\n                }\n\n                // move current button before prevous\n                $prevBtn.before($curBtn);\n                $prevBtn.before(' '); // space between buttons\n\n                editor.afterCommand($editable);\n                $editable.focus();\n            },\n            mbrBtnColor: function (event, editor, layoutInfo, value) {\n                // Get current editable node\n                var $editable = layoutInfo.editable();\n\n                // remove all color classes\n                var removeClasses = '';\n                var hasOutlineColors = hasButtonOutlineColors();\n                for (var k in buttonColors()) {\n                    removeClasses += ' ' + k;\n                    if (hasOutlineColors) {\n                        removeClasses += ' ' + k + '-outline';\n                    }\n                }\n\n                $editable.removeClass(removeClasses).addClass(value);\n                // editor.fontSize(layoutInfo.editable(), value);\n\n                var mbrApp = getMbrApp();\n                if (mbrApp) {\n                    $editable\n                        .trigger($.Event('change-button-color', {\n                            removedClasses: removeClasses,\n                            addedClass: value\n                        }))\n                        .closest('.app-component-content').find('> *').trigger(\n                        'changeButtonColor.cards',\n                        $editable[0], value, removeClasses\n                    );\n                }\n\n                editor.afterCommand($editable);\n\n                // emulation of \"onChange\" event for saving in project\n                layoutInfo.editable().trigger('blur');\n            },\n            mbrLinkColor: function (event, editor, layoutInfo, value) {\n                var $editable = layoutInfo.editable(),\n                    $link = $(editor.createRange($editable).commonAncestor().parentNode);\n\n                if ($link.is('a')) {\n                    // remove all color classes\n                    var removeClasses = '';\n                    for (var k in linkColors()) {\n                        removeClasses += ' ' + k;\n                    }\n\n                    $link\n                        .add($link.closest('[data-app-modern-menu]').find('a'))\n                        .removeClass(removeClasses).addClass(value);\n                    // editor.fontSize(layoutInfo.editable(), value);\n\n                    editor.afterCommand($editable);\n                }\n            },\n            mbrBtnColorPrevent: function (event) {\n                event.preventDefault();\n            }\n        }\n    });\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/summernote/plugin/summernote-ext-mbr-button.js\n")},"./web/app/builder/summernote/plugin/summernote-ext-mbr-color.js":
/*!***********************************************************************!*\
  !*** ./web/app/builder/summernote/plugin/summernote-ext-mbr-color.js ***!
  \***********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n *  @module\n */\n(function (factory) {\n    /* global define */\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(function ($) {\n    if (typeof $.fn.spectrum === 'undefined') {\n        return false;\n    }\n\n    // template\n    var tmpl = $.summernote.renderer.getTemplate();\n\n    var $changedItem;\n    var $editable;\n    var changedEditor;\n    var $changedToolbar;\n\n    function colorChanged(color) {\n        changedEditor.beforeCommand($editable);\n\n        if ($changedItem && $changedItem.css) {\n            var prop = 'color';\n            if (window.mbrAppCore) {\n                window.mbrAppCore.addComponentStyles($changedItem, prop, color);\n            } else {\n                $changedItem.css(prop, color);\n            }\n\n            // restore range (focus summernote block and )\n            changedEditor.restoreRange($editable);\n        }\n        if ($changedToolbar && $changedToolbar.length) {\n            $changedToolbar.find('[data-name=mbrColor] .curTextColor').css('background', $.summernote.adaptColorForBg(color));\n        }\n\n        changedEditor.afterCommand($editable);\n    }\n\n    var $pickerDefault = $('<input type=\"text\" />').css({\n        display: 'none'\n    }).appendTo('body');\n    var $picker;\n\n    function initSpectrum() {\n        var APP;\n        var spectTimeout;\n        var palette = false;\n        if (mbrAppCore && mbrAppCore.APP) {\n            palette = mbrAppCore.APP.getThemeColorsSet(7);\n        }\n\n        var notInArray = function (el, arr) {\n            arr = arr.map(function (el) {\n                return el.toUpperCase()\n            });\n            if (arr.indexOf(el.toUpperCase()) == -1) return true;\n        };\n\n        (mbrAppCore && mbrAppCore.APP) && (APP = mbrAppCore.APP);\n        if (!APP) return;\n\n        $pickerDefault.spectrum('destroy').spectrum({\n            showButtons: false,\n            preferredFormat: 'hex',\n            showInput: true,\n            showPaletteOnly: true,\n            togglePaletteOnly: true,\n            togglePaletteMoreText: 'More >',\n            togglePaletteLessText: 'Less <',\n            maxSelectionSize: 1,\n            palette: palette,\n            move: function (color) {\n                (function (color) {\n                    clearTimeout(spectTimeout);\n                    spectTimeout = setTimeout(function () {\n                        colorChanged(color);\n                    }, 150);\n                }(color.toHexString()));\n            },\n            hide: function (color) {\n                if (!color) return;\n                var projColors;\n                if (projColors = APP.projectSettings.theme.additionalSetColors) {\n                    if (notInArray(color.toHexString(), projColors) && notInArray(color.toHexString(), APP.getThemeColorsSet(7)[0])) {\n                        if (projColors.length < 7) {\n                            projColors.push(color.toHexString());\n                        } else {\n                            projColors.unshift(color.toHexString());\n                            projColors.pop();\n                        }\n                    }\n                } else {\n                    if (notInArray(color.toHexString(), APP.getThemeColorsSet(7)[0])) {\n                        APP.projectSettings.theme.additionalSetColors = [color.toHexString()];\n                    } else {\n                        APP.projectSettings.theme.additionalSetColors = [];\n                    }\n                }\n                ;\n            }\n        });\n\n        $picker = $pickerDefault.next('.sp-replacer');\n        $picker.css({\n            position: 'absolute',\n            visibility: 'hidden',\n            opacity: 0,\n            width: 0,\n            height: 0,\n            overflow: 'hidden',\n            zIndex: -1000000\n        });\n        mbrAppCore.spectrumPicker = $picker;\n    }\n\n    /**\n     * @class plugin.mbr_btn\n     *\n     * Hello Plugin\n     */\n    $.summernote.addPlugin({\n        /** @property {String} name name of plugin */\n        name: 'mbrColor',\n\n        langs: {\n            'en-US': {\n                'mbrColor': {\n                    'mbrColor': 'Color'\n                }\n            }\n        },\n\n        /**\n         * @property {Object} buttons\n         * @property {Function} buttons.hello   function to make button\n         * @property {Function} buttons.helloDropdown   function to make button\n         * @property {Function} buttons.helloImage   function to make button\n         */\n        buttons: { // buttons\n            mbrColor: function (lang, options) {\n                return tmpl.button('<span class=\"curTextColor\"' +\n                    'style=\"border-radius: 100px;background: #000;' +\n                    'width: 25px;height: 25px;float: left;\"><span>', {\n                    event: 'mbrColor',\n                    name: 'mbrColor',\n                    title: lang.mbrColor.mbrColor,\n                    hide: false\n                });\n            }\n        },\n\n        /**\n         * @property {Object} events\n         * @property {Function} events.hello  run function when button that has a 'hello' event name  fires click\n         * @property {Function} events.helloDropdown run function when button that has a 'helloDropdown' event name  fires click\n         * @property {Function} events.helloImage run function when button that has a 'helloImage' event name  fires click\n         */\n        events: { // events\n            mbrColor: function (event, editor, layoutInfo) {\n\n                // Show colors\n                initSpectrum();\n\n                event.stopPropagation();\n                event.preventDefault();\n\n                changedEditor = editor;\n                $editable = layoutInfo.editable();\n\n                let $target = $(event.target);\n                editor.saveRange($editable);\n\n                // Get style of item to change color\n                let style = editor.currentStyle();\n\n                // Get element\n                for (let k in style.ancestors) {\n                    if (style.ancestors.hasOwnProperty(k)) {\n                        if (/P|DIV|UL|H1|H2|H3|H4|H5|H6|LABEL|TH|TD/g.test(style.ancestors[k].parentNode.tagName)) {\n                            $changedItem = $(style.ancestors[k].parentNode);\n                        }\n                    }\n                }\n\n                if (!$changedItem) {\n                    for (let n in style.ancestors) {\n                        if (style.ancestors.hasOwnProperty(n)) {\n                            if (style.ancestors[n].parentNode.tagName === 'A') {\n                                $changedItem = $(style.ancestors[n].parentNode);\n                            }\n                        }\n                    }\n                }\n\n                // check if menu item\n                if (!$changedItem) {\n                    $changedItem = $(style.ancestors[0]).parent();\n                }\n\n                if (!$changedItem) {\n                    return;\n                }\n\n                $changedToolbar = layoutInfo.popover();\n\n                // show Spectrum\n                let offsetPicker = $target.offset(),\n                    heightPicker = $target.outerHeight(true),\n                    widthPicker = $target.outerWidth(true);\n\n                $picker.css({\n                    top: offsetPicker.top,\n                    left: offsetPicker.left,\n                    height: heightPicker,\n                    width: widthPicker\n                });\n\n                let $curColor = $changedItem.css('color');\n\n                // change default spectrum color\n                $pickerDefault.spectrum('set', $curColor);\n\n                // show spectrum\n                $pickerDefault.spectrum('toggle');\n            }\n        }\n    });\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/summernote/plugin/summernote-ext-mbr-color.js\n")},"./web/app/builder/summernote/plugin/summernote-ext-mbr-fonts.js":
/*!***********************************************************************!*\
  !*** ./web/app/builder/summernote/plugin/summernote-ext-mbr-fonts.js ***!
  \***********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n *  @module\n */\n(function (factory) {\n  /* global define */\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(function ($) {\n  // template\n  var tmpl = $.summernote.renderer.getTemplate();\n  // var range = $.summernote.core.range;\n  // var editor = $.summernote.eventHandler.getEditor();\n\n  var fontSizes = [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 32, 36, 46, 48, 60, 72, 80, 84, 100];\n\n  // see app-themes.js\n  function getFonts() {\n    if(!mbrAppCore && !mbrAppCore.APP && !mbrAppCore.APP.getAccesibleFonts)\n      return [];\n\n    return mbrAppCore.APP.getAccesibleFonts() ||[];\n  }\n\n\n  // return ancestor to accept font styles\n  function getAncestor(ancestors) {\n    var item;\n\n    // check if some of alloved tags\n    for (var k in ancestors) {\n      if (/P|DIV|UL|H1|H2|H3|H4|H5|H6/g.test(ancestors[k].tagName)) {\n        item = ancestors[k];\n        continue;\n      }\n    }\n    if (!item) {\n      for (var n in ancestors) {\n        if (ancestors[n].tagName === 'A') {\n          item = ancestors[n];\n          continue;\n        }\n      }\n    }\n\n    return item || $(ancestors[0]).parent()[0];\n  }\n\n\n  function changeProps(item, prop, value, googleLink) {\n    if (window.mbrAppCore) {\n      window.mbrAppCore.addComponentStyles($(item), prop, value, googleLink);\n    } else {\n      $(item).css(prop, value);\n    }\n  }\n\n  /**\n   * @class plugin.mbr_btn\n   *\n   * Hello Plugin\n   */\n  $.summernote.addPlugin({\n    /** @property {String} name name of plugin */\n    name: 'mbrFonts',\n\n    /**\n     * @property {Object} buttons\n     * @property {Function} buttons.hello   function to make button\n     * @property {Function} buttons.helloDropdown   function to make button\n     * @property {Function} buttons.helloImage   function to make button\n     */\n    buttons: {\n      mbrFonts: function () {\n        // Google Fonts\n        var items = '';\n        var fonts = getFonts();\n        for (var k = 0; k < fonts.length; k++) {\n          items += '<li><a data-event=\"mbrFonts\" href=\"javascript:void(0);\"' +\n                      'data-value=\"' + fonts[k].name + '\" ' +\n                      'data-css=\"' + fonts[k].css + '\" ' +\n                      'data-url=\"' + fonts[k].url + '\" ' +\n                      'data-slug=\"' + k + '\" ' +\n                      'style=\"font-family: ' + fonts[k].css + ';\">' +\n                      '<i class=\"mbr-icon-check\"></i> ' + fonts[k].name +\n                    '</a></li>';\n        }\n\n        var label = '<span class=\"note-current-mbrFonts\">Roboto</span>';\n        var dropdown = '<ul class=\"dropdown-menu note-check\">' + items + '</ul>';\n\n        return tmpl.button(label, {\n          title: 'Fonts',\n          hide: true,\n          dropdown : dropdown,\n          event: 'mbrFontsPrevent',\n          name: 'mbrFonts'\n        });\n      },\n      mbrFontSize: function () {\n        var items = '';\n        for (var k in fontSizes) {\n          items += '<li><a data-event=\"mbrFontSize\" href=\"javascript:void(0);\"' +\n                      'data-value=\"' + fontSizes[k] + '\">' +\n                      '<i class=\"mbr-icon-check\"></i> ' + fontSizes[k] +\n                    '</a></li>';\n        }\n\n        var label = '<span class=\"note-current-mbrFontSize\">11</span>';\n        var dropdown = '<ul class=\"dropdown-menu note-check\" style=\"min-width: 105px;\"> ' + items + ' </ul>';\n\n        return tmpl.button(label, {\n          title: 'Font Size',\n          hide: true,\n          dropdown : dropdown,\n          event: 'mbrFontsPrevent',\n          name: 'mbrFontSize'\n        });\n      }\n    },\n\n    /**\n     * @property {Object} events\n     * @property {Function} events.hello  run function when button that has a 'hello' event name  fires click\n     * @property {Function} events.helloDropdown run function when button that has a 'helloDropdown' event name  fires click\n     * @property {Function} events.helloImage run function when button that has a 'helloImage' event name  fires click\n     */\n    events: { // events\n      mbrFonts: function (event, editor, layoutInfo) {\n\n        // focus recovery (fix for dropdown)\n        layoutInfo.editable().focus();\n\n        var style = editor.currentStyle();\n        var newFont = $(event.target).attr('data-css');\n        var googleLink = $(event.target).attr('data-url');\n        var item = getAncestor(style.ancestors);\n\n        if (item) {\n          changeProps(item, 'font-family', newFont, googleLink);\n        }\n      },\n      mbrFontSize: function (event, editor, layoutInfo) {\n\n        // focus recovery (fix for dropdown)\n        layoutInfo.editable().focus();\n\n        var style = editor.currentStyle();\n        var newFontSize = $(event.target).attr('data-value');\n        var item = getAncestor(style.ancestors);\n\n        if (item) {\n          changeProps(item, 'font-size', newFontSize + 'px');\n        }\n      },\n      mbrFontsPrevent: function (event) {\n        event.preventDefault();\n      }\n    }\n  });\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/summernote/plugin/summernote-ext-mbr-fonts.js\n")},"./web/app/builder/summernote/plugin/summernote-ext-mbr-iconfont.js":
/*!**************************************************************************!*\
  !*** ./web/app/builder/summernote/plugin/summernote-ext-mbr-iconfont.js ***!
  \**************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\r\n/**\r\n * @class plugin.iconFont\r\n *\r\n * Icon Font plugin for Summernote\r\n *\r\n * ### use a plugin in toolbar\r\n * ```\r\n *\t$("#editor").summernote({\r\n *\t...\r\n *\ttoolbar : [\r\n *\t\t["insert", ["iconFont"]]\r\n *\t]\r\n *\t...\r\n *\t});\r\n * ```\r\n */\r\n\r\n(function (factory) {\r\n\t/* global define */\r\n\tif (true) {\r\n\t\t// AMD. Register as an anonymous module.\r\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t} else {}\r\n}(function ($) {\r\n\t\'use strict\';\r\n\r\n\r\n\r\n\t// core functions: range, dom, template\r\n\tvar tmpl = $.summernote.renderer.getTemplate();\r\n\tvar range = $.summernote.core.range;\r\n\tvar dom = $.summernote.core.dom;\r\n\tvar modules = $.summernote.eventHandler.modules;\r\n\tvar handler = $.summernote.eventHandler;\r\n\r\n\t$.extend($.summernote.options.icons,{\r\n\t\ticonFont:{\r\n\t\t\ticonFont: "sun" // Font icon name\r\n\t\t}\r\n\t});\r\n\r\n\r\n\tfunction summernoteIconRequest(node, parent, callback_node){\r\n\t\tif (window.mbrAppCore && window.mbrAppCore.summernoteIconRequest) {\r\n\t\t\twindow.mbrAppCore.summernoteIconRequest(node, parent, callback_node);\r\n\t\t}\r\n        else {\r\n        \tconsole.log("Error: no summernoteIconRequest handler");\r\n        \tif (callback_node) callback_node();\r\n        }\r\n\t}\r\n\r\n\r\n\t$.summernote.addPlugin({\r\n\r\n\t\t// @property {String} name name of plugin\r\n\t\tname: "iconFont",\r\n\r\n\t\tlangs:{\r\n\t\t\t"en-US":{\r\n\t\t\t\ticonFont:{\r\n\t\t\t\t\ticonFont: "Insert icon"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t// @property {Object} buttons\r\n\t\t// @property {function(object): string} buttons.iconFont\r\n\t\tbuttons: {\r\n\t\t\ticonFont: function (lang, options) {\r\n\t\t\t\treturn tmpl.iconButton(options.iconPrefix + options.icons.iconFont.iconFont, {\r\n\t\t\t\t\tevent: "insertIconFontDialog",\r\n\t\t\t\t\ttitle: lang.iconFont.iconFont,\r\n\t\t\t\t\thide: true\r\n\t\t\t\t}).replace("<button",\'<button data-toggle="tooltip"\');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t// @property {Object} events\r\n\t\t// @property {Function} events.insertIconFontDialog\r\n\t\tevents: {\r\n\r\n\t\t\tinsertIconFontDialog: function (event, editor, layoutInfo) { // console.log("insertIconFontDialog (layoutInfo, editable):", layoutInfo, layoutInfo.editable());\r\n\r\n\t\t\t\t// try to hide popover\r\n\t\t\t\tlayoutInfo.popover().hide();\r\n\r\n\t\t\t\tsetTimeout(function(){ // tempory fix for first time fail insertation\r\n\r\n\t\t\t\t\tvar $editor = layoutInfo.editor(),\r\n\t\t\t\t\t\t$dialog = layoutInfo.dialog(),\r\n\t\t\t\t\t\t$editable = layoutInfo.editable(), // editable block\r\n\t\t\t\t\t\tlinkInfo = editor.getLinkInfo($editable),\r\n\t\t\t\t\t\toptions = $editor.data(\'options\');\r\n\r\n\t\t\t\t\tif (!$("#" + $editable.attr("id")).length) return;\r\n\t\t\t\t\t//console.log($editable);\r\n\r\n\r\n\t\t\t\t\t// save current range\r\n\t\t\t\t\t$editable.focus();\r\n\t\t\t\t\teditor.saveRange($editable);\r\n\r\n\t\t\t\t\tvar rng = range.create();\r\n\t\t\t\t\tvar currentIcon = rng.ec; // * @param {Node} sc - start container // * @param {Number} so - start offset // * @param {Node} ec - end container // * @param {Number} eo - end offset\r\n\t\t\t\t\tif (!currentIcon.tagName)\r\n\t\t\t\t\t\tcurrentIcon = currentIcon.parentNode;\r\n\r\n\t\t\t\t\tvar toBegin = $editable.attr("data-app-btn");\r\n\t\t\t\t\tif (toBegin){\r\n\t\t\t\t\t\tcurrentIcon = $editable.children().get(0); // get first childen as previous node\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsummernoteIconRequest(currentIcon, $editable.get(0), function(node){\r\n\r\n\t\t\t\t\t\t// restore range\r\n\t\t\t\t\t\teditor.restoreRange($editable);\r\n\r\n\t\t\t\t\t\t// restore popover\r\n\t\t\t\t\t\tlayoutInfo.popover().show();\r\n\r\n\t\t\t\t\t\tif (!arguments.length)\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t// apply node\r\n\t\t\t\t\t\tif (node) {\r\n\t\t\t\t\t\t\t// for button insert to the begining\r\n\t\t\t\t\t\t\tif (toBegin){\r\n\t\t\t\t\t\t\t\teditor.prependNode($editable, node);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// for ordinary text insert at the cursor\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t// console.log("insertNode:", node, rng, $editable, currentIcon);\r\n\t\t\t\t\t\t\t\tif (currentIcon)\r\n\t\t\t\t\t\t\t\t\teditor.insertAfter($editable, node, currentIcon);\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\teditor.insertAtCursor($editable, node);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// if old node is iconfont-node then remove\r\n\t\t\t\t\t\tif (currentIcon)\r\n\t\t\t\t\t\t\t$(currentIcon).remove();\r\n\r\n\r\n\t\t\t\t\t\t// $editable blur\r\n\t\t\t\t\t\t$editable.blur(); // need to re-init editor, fix bug with repeat insert\r\n\r\n\t\t\t\t\t})\r\n\r\n\r\n\t\t\t\t},100);\r\n\r\n\t\t\t} // insertIconFontDialog\r\n\t\t} // events\r\n\t}); // $.summernote.addPlugin\r\n\r\n}));\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/summernote/plugin/summernote-ext-mbr-iconfont.js\n')},"./web/app/builder/summernote/plugin/summernote-ext-mbr-link.js":
/*!**********************************************************************!*\
  !*** ./web/app/builder/summernote/plugin/summernote-ext-mbr-link.js ***!
  \**********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n *  @module\n */\n(function(factory) {\n    /* global define */\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(function($) {\n    // template\n    var tmpl = $.summernote.renderer.getTemplate();\n    var range = $.summernote.core.range;\n    var list = $.summernote.core.list;\n    var dom = $.summernote.core.dom;\n\n    /**\n     * @class plugin.mbrLink\n     */\n    $.summernote.addPlugin({\n        /** @property {String} name name of plugin */\n        name: 'mbrLink',\n        \n        langs: {\n            'en-US': {\n                'mbrLink': {\n                    'mbrLink': 'Link'\n                }\n            }\n        },\n\n        buttons: { // buttons\n            mbrLink: function(lang, options) {\n                return tmpl.iconButton('mbr-icon-link', {\n                    event: 'showMbrLinkDialog',\n                    name: 'mbrLink',\n                    title: lang.mbrLink.mbrLink,\n                    hide: true\n                });\n            }\n        },\n\n        events: {\n            showMbrLinkDialog: function(event, editor, layoutInfo) {\n                var linkParams = {\n                    'editor': editor,\n                    'layoutInfo': layoutInfo,\n                    'range': range,\n                    'list': list,\n                    'dom': dom\n                };\n\n                window.mbrAppCore.APP.showMbrLinkDialog(linkParams);\n            }\n        }\n    });\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvYXBwL2J1aWxkZXIvc3VtbWVybm90ZS9wbHVnaW4vc3VtbWVybm90ZS1leHQtbWJyLWxpbmsuanM/ZDdiOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxJQUEwQztBQUNsRDtBQUNBLFFBQVEsaUNBQU8sQ0FBQywyQ0FBUSxDQUFDLG9DQUFFLE9BQU87QUFBQTtBQUFBO0FBQUEsb0dBQUM7QUFDbkMsS0FBSyxNQUFNLEVBR047QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixPQUFPO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDIiwiZmlsZSI6Ii4vd2ViL2FwcC9idWlsZGVyL3N1bW1lcm5vdGUvcGx1Z2luL3N1bW1lcm5vdGUtZXh0LW1ici1saW5rLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQG1vZHVsZVxuICovXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIC8qIGdsb2JhbCBkZWZpbmUgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFsczogalF1ZXJ5XG4gICAgICAgIGZhY3Rvcnkod2luZG93LmpRdWVyeSk7XG4gICAgfVxufShmdW5jdGlvbigkKSB7XG4gICAgLy8gdGVtcGxhdGVcbiAgICB2YXIgdG1wbCA9ICQuc3VtbWVybm90ZS5yZW5kZXJlci5nZXRUZW1wbGF0ZSgpO1xuICAgIHZhciByYW5nZSA9ICQuc3VtbWVybm90ZS5jb3JlLnJhbmdlO1xuICAgIHZhciBsaXN0ID0gJC5zdW1tZXJub3RlLmNvcmUubGlzdDtcbiAgICB2YXIgZG9tID0gJC5zdW1tZXJub3RlLmNvcmUuZG9tO1xuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIHBsdWdpbi5tYnJMaW5rXG4gICAgICovXG4gICAgJC5zdW1tZXJub3RlLmFkZFBsdWdpbih7XG4gICAgICAgIC8qKiBAcHJvcGVydHkge1N0cmluZ30gbmFtZSBuYW1lIG9mIHBsdWdpbiAqL1xuICAgICAgICBuYW1lOiAnbWJyTGluaycsXG4gICAgICAgIFxuICAgICAgICBsYW5nczoge1xuICAgICAgICAgICAgJ2VuLVVTJzoge1xuICAgICAgICAgICAgICAgICdtYnJMaW5rJzoge1xuICAgICAgICAgICAgICAgICAgICAnbWJyTGluayc6ICdMaW5rJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBidXR0b25zOiB7IC8vIGJ1dHRvbnNcbiAgICAgICAgICAgIG1ickxpbms6IGZ1bmN0aW9uKGxhbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG1wbC5pY29uQnV0dG9uKCdtYnItaWNvbi1saW5rJywge1xuICAgICAgICAgICAgICAgICAgICBldmVudDogJ3Nob3dNYnJMaW5rRGlhbG9nJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ21ickxpbmsnLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGFuZy5tYnJMaW5rLm1ickxpbmssXG4gICAgICAgICAgICAgICAgICAgIGhpZGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgIHNob3dNYnJMaW5rRGlhbG9nOiBmdW5jdGlvbihldmVudCwgZWRpdG9yLCBsYXlvdXRJbmZvKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmtQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICdlZGl0b3InOiBlZGl0b3IsXG4gICAgICAgICAgICAgICAgICAgICdsYXlvdXRJbmZvJzogbGF5b3V0SW5mbyxcbiAgICAgICAgICAgICAgICAgICAgJ3JhbmdlJzogcmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICdsaXN0JzogbGlzdCxcbiAgICAgICAgICAgICAgICAgICAgJ2RvbSc6IGRvbVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB3aW5kb3cubWJyQXBwQ29yZS5BUFAuc2hvd01ickxpbmtEaWFsb2cobGlua1BhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./web/app/builder/summernote/plugin/summernote-ext-mbr-link.js\n")},"./web/app/builder/summernote/plugin/summernote-ext-mbr-multiline.js":
/*!***************************************************************************!*\
  !*** ./web/app/builder/summernote/plugin/summernote-ext-mbr-multiline.js ***!
  \***************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n *  @module\n */\n(function (factory) {\n  /* global define */\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(function ($) {\n  \n  // core functions: range, dom\n  var range = $.summernote.core.range;\n  var dom = $.summernote.core.dom;\n\n  /**\n   * @class plugin.multiline\n   * \n   * Multiline Plugin.\n   * Disables the addition of new paragraphs if \"data-multiline\" attribute for node editor is not set.\n   */\n  $.summernote.addPlugin({\n    /** @property {String} name name of plugin */\n    name: 'mbrMultiline',\n    events: {\n      \n      ENTER: function (e, editor, layoutInfo) {\n\n        var $editor = layoutInfo.editor();\n        var isInlineBlock = $editor.is('p, span, a, .btn, button, strong, b, em, i, small, code, label');\n        var isMultilineContent = $editor.data('multiline') || '' === $editor.data('multiline');\n        \n        if (isMultilineContent && !isInlineBlock) {\n          // apply default enter key\n          layoutInfo.holder().summernote('insertParagraph');\n        } else {\n\n          var $editable = layoutInfo.editable();\n          editor.beforeCommand($editable);\n\n          var rng = range.create().deleteContents();\n          var info = dom.splitPoint(rng.getStartPoint(), false);\n          var node = dom.create('br');\n\n          if (info.rightNode) {\n            info.rightNode.parentNode.insertBefore(node, info.rightNode);\n          } else {\n            info.container.appendChild(node);\n            // bug fix: sometimes insertion is not working when cursor located at the end point of editor\n            if ($editor[0] === info.container) {\n              info.container.appendChild(dom.create('br'));\n            }\n          }\n\n          rng.normalize();\n\n          (function (node) {\n          \n            var ec = node;\n            var eo = dom.nodeLength(ec);\n\n            if (dom.isVoid(ec)) {\n              eo = dom.listPrev(ec).length;\n              ec = ec.parentNode;\n            }\n\n            return range.create(ec, eo, ec, eo);\n\n          })(node).select();\n\n          editor.afterCommand($editable);\n\n        }\n\n        // prevent ENTER key\n        return true;\n\n      }\n    \n    },\n\n    // HACK FOR OLD CORE!!!\n    // TODO: remove it after core updated to qwebengine\n    init: function (layoutInfo) {\n      var $note = layoutInfo.holder();\n\n      function removeBR(e) {\n        var deleteKey = e.keyCode === 8 || e.keyCode === 46;\n        if (deleteKey && $note.text().length === 0) {\n          var br = $note.find('br');\n          if (br.length === 1) {\n            br.remove();\n          }\n          var p = $note.find('p');\n          if (p.length === 1) {\n            p.remove();\n          }\n        }\n      }\n\n      $note.on('keyup.summernote', removeBR);\n      removeBR({\n        keyCode: 8\n      });\n    }\n\n  });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvYXBwL2J1aWxkZXIvc3VtbWVybm90ZS9wbHVnaW4vc3VtbWVybm90ZS1leHQtbWJyLW11bHRpbGluZS5qcz8wZjJjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLElBQTBDO0FBQ2hEO0FBQ0EsSUFBSSxpQ0FBTyxDQUFDLDJDQUFRLENBQUMsb0NBQUUsT0FBTztBQUFBO0FBQUE7QUFBQSxvR0FBQztBQUMvQixHQUFHLE1BQU0sRUFHTjtBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLFdBQVc7O0FBRVg7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQSxHQUFHOztBQUVILENBQUMiLCJmaWxlIjoiLi93ZWIvYXBwL2J1aWxkZXIvc3VtbWVybm90ZS9wbHVnaW4vc3VtbWVybm90ZS1leHQtbWJyLW11bHRpbGluZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIEBtb2R1bGVcbiAqL1xuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gIC8qIGdsb2JhbCBkZWZpbmUgKi9cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzOiBqUXVlcnlcbiAgICBmYWN0b3J5KHdpbmRvdy5qUXVlcnkpO1xuICB9XG59KGZ1bmN0aW9uICgkKSB7XG4gIFxuICAvLyBjb3JlIGZ1bmN0aW9uczogcmFuZ2UsIGRvbVxuICB2YXIgcmFuZ2UgPSAkLnN1bW1lcm5vdGUuY29yZS5yYW5nZTtcbiAgdmFyIGRvbSA9ICQuc3VtbWVybm90ZS5jb3JlLmRvbTtcblxuICAvKipcbiAgICogQGNsYXNzIHBsdWdpbi5tdWx0aWxpbmVcbiAgICogXG4gICAqIE11bHRpbGluZSBQbHVnaW4uXG4gICAqIERpc2FibGVzIHRoZSBhZGRpdGlvbiBvZiBuZXcgcGFyYWdyYXBocyBpZiBcImRhdGEtbXVsdGlsaW5lXCIgYXR0cmlidXRlIGZvciBub2RlIGVkaXRvciBpcyBub3Qgc2V0LlxuICAgKi9cbiAgJC5zdW1tZXJub3RlLmFkZFBsdWdpbih7XG4gICAgLyoqIEBwcm9wZXJ0eSB7U3RyaW5nfSBuYW1lIG5hbWUgb2YgcGx1Z2luICovXG4gICAgbmFtZTogJ21ick11bHRpbGluZScsXG4gICAgZXZlbnRzOiB7XG4gICAgICBcbiAgICAgIEVOVEVSOiBmdW5jdGlvbiAoZSwgZWRpdG9yLCBsYXlvdXRJbmZvKSB7XG5cbiAgICAgICAgdmFyICRlZGl0b3IgPSBsYXlvdXRJbmZvLmVkaXRvcigpO1xuICAgICAgICB2YXIgaXNJbmxpbmVCbG9jayA9ICRlZGl0b3IuaXMoJ3AsIHNwYW4sIGEsIC5idG4sIGJ1dHRvbiwgc3Ryb25nLCBiLCBlbSwgaSwgc21hbGwsIGNvZGUsIGxhYmVsJyk7XG4gICAgICAgIHZhciBpc011bHRpbGluZUNvbnRlbnQgPSAkZWRpdG9yLmRhdGEoJ211bHRpbGluZScpIHx8ICcnID09PSAkZWRpdG9yLmRhdGEoJ211bHRpbGluZScpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGlzTXVsdGlsaW5lQ29udGVudCAmJiAhaXNJbmxpbmVCbG9jaykge1xuICAgICAgICAgIC8vIGFwcGx5IGRlZmF1bHQgZW50ZXIga2V5XG4gICAgICAgICAgbGF5b3V0SW5mby5ob2xkZXIoKS5zdW1tZXJub3RlKCdpbnNlcnRQYXJhZ3JhcGgnKTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIHZhciAkZWRpdGFibGUgPSBsYXlvdXRJbmZvLmVkaXRhYmxlKCk7XG4gICAgICAgICAgZWRpdG9yLmJlZm9yZUNvbW1hbmQoJGVkaXRhYmxlKTtcblxuICAgICAgICAgIHZhciBybmcgPSByYW5nZS5jcmVhdGUoKS5kZWxldGVDb250ZW50cygpO1xuICAgICAgICAgIHZhciBpbmZvID0gZG9tLnNwbGl0UG9pbnQocm5nLmdldFN0YXJ0UG9pbnQoKSwgZmFsc2UpO1xuICAgICAgICAgIHZhciBub2RlID0gZG9tLmNyZWF0ZSgnYnInKTtcblxuICAgICAgICAgIGlmIChpbmZvLnJpZ2h0Tm9kZSkge1xuICAgICAgICAgICAgaW5mby5yaWdodE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgaW5mby5yaWdodE5vZGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmZvLmNvbnRhaW5lci5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICAgIC8vIGJ1ZyBmaXg6IHNvbWV0aW1lcyBpbnNlcnRpb24gaXMgbm90IHdvcmtpbmcgd2hlbiBjdXJzb3IgbG9jYXRlZCBhdCB0aGUgZW5kIHBvaW50IG9mIGVkaXRvclxuICAgICAgICAgICAgaWYgKCRlZGl0b3JbMF0gPT09IGluZm8uY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgIGluZm8uY29udGFpbmVyLmFwcGVuZENoaWxkKGRvbS5jcmVhdGUoJ2JyJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJuZy5ub3JtYWxpemUoKTtcblxuICAgICAgICAgIChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGVjID0gbm9kZTtcbiAgICAgICAgICAgIHZhciBlbyA9IGRvbS5ub2RlTGVuZ3RoKGVjKTtcblxuICAgICAgICAgICAgaWYgKGRvbS5pc1ZvaWQoZWMpKSB7XG4gICAgICAgICAgICAgIGVvID0gZG9tLmxpc3RQcmV2KGVjKS5sZW5ndGg7XG4gICAgICAgICAgICAgIGVjID0gZWMucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJhbmdlLmNyZWF0ZShlYywgZW8sIGVjLCBlbyk7XG5cbiAgICAgICAgICB9KShub2RlKS5zZWxlY3QoKTtcblxuICAgICAgICAgIGVkaXRvci5hZnRlckNvbW1hbmQoJGVkaXRhYmxlKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJldmVudCBFTlRFUiBrZXlcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIH1cbiAgICBcbiAgICB9LFxuXG4gICAgLy8gSEFDSyBGT1IgT0xEIENPUkUhISFcbiAgICAvLyBUT0RPOiByZW1vdmUgaXQgYWZ0ZXIgY29yZSB1cGRhdGVkIHRvIHF3ZWJlbmdpbmVcbiAgICBpbml0OiBmdW5jdGlvbiAobGF5b3V0SW5mbykge1xuICAgICAgdmFyICRub3RlID0gbGF5b3V0SW5mby5ob2xkZXIoKTtcblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlQlIoZSkge1xuICAgICAgICB2YXIgZGVsZXRlS2V5ID0gZS5rZXlDb2RlID09PSA4IHx8IGUua2V5Q29kZSA9PT0gNDY7XG4gICAgICAgIGlmIChkZWxldGVLZXkgJiYgJG5vdGUudGV4dCgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHZhciBiciA9ICRub3RlLmZpbmQoJ2JyJyk7XG4gICAgICAgICAgaWYgKGJyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgYnIucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBwID0gJG5vdGUuZmluZCgncCcpO1xuICAgICAgICAgIGlmIChwLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcC5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJG5vdGUub24oJ2tleXVwLnN1bW1lcm5vdGUnLCByZW1vdmVCUik7XG4gICAgICByZW1vdmVCUih7XG4gICAgICAgIGtleUNvZGU6IDhcbiAgICAgIH0pO1xuICAgIH1cblxuICB9KTtcblxufSkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./web/app/builder/summernote/plugin/summernote-ext-mbr-multiline.js\n")},"./web/app/builder/summernote/plugin/summernote-ext-mbr-short-mode.js":
/*!****************************************************************************!*\
  !*** ./web/app/builder/summernote/plugin/summernote-ext-mbr-short-mode.js ***!
  \****************************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n *  @module\n */\n(function(factory){\n    /* global define */\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(function($){\n\n    'use strict';\n\n    var isShortMode = true;\n\n    function decorator(obj, key, callback) {\n        var func = obj[key];\n        obj[key] = function() {\n            var args = Array.prototype.slice.call(arguments);\n            args.unshift(func, arguments);\n            return callback.apply(this, args);\n        };\n    }\n\n    function getSelectorForOptionalButtons(airPopover) {\n        var items = [];\n        for (var i = 0; i < airPopover.length; i++) {\n            var group = airPopover[i];\n            if (!group[2] || !group[2].optional) continue;\n            var optional = group[2].optional;\n            if (typeof optional == 'boolean') {\n                items.push('.note-' + group[0]);\n            } else {\n                for (var j = 0; j < optional.length; j++) {\n                    items.push('[data-name=\"' + optional[j] + '\"]');\n                }\n            }\n        }\n        return items.join(',');\n    }\n\n    function update(layoutInfo) {\n\n        var options = layoutInfo.editor().data('options'),\n            $popover = layoutInfo.popover(),\n            $editable = layoutInfo.editable(),\n            styleInfo = $.summernote.eventHandler.modules.editor.currentStyle($editable);\n\n        if (options.shortMode) {\n\n            var items = getSelectorForOptionalButtons(options.airPopover);\n            if (!items) return;\n\n            var $button = $popover.find('[data-name=\"mbrShortModeMore\"]');\n\n            if (!$button.length) {\n                $editable.summernote('popover.addGroup', ['mbrShortModeMore', ['mbrShortModeMore']]);\n                $button = $popover.find('[data-name=\"mbrShortModeMore\"]').tooltip({\n                    container: 'body',\n                    trigger: 'hover',\n                    placement: 'top'\n                });\n            }\n\n            if (isShortMode) {\n                $button.find('i').removeClass('mbr-icon-angle-left').addClass('mbr-icon-angle-right');\n                $button.attr('data-original-title', 'More');\n                $popover.find(items).addClass('hidden');\n            } else {\n                $button.find('i').removeClass('mbr-icon-angle-right').addClass('mbr-icon-angle-left');\n                $button.attr('data-original-title', 'Less');\n                $popover.find(items).removeClass('hidden');\n            }\n\n        }\n\n        $.summernote.eventHandler.updateStyleInfo(styleInfo, layoutInfo);\n\n    }\n\n    // decorator for $.summernote.eventHandler.modules.popover.addGroup\n    decorator($.summernote.eventHandler.modules.popover, 'addGroup', function(func, args, $holder, group, types, index){\n\n        var options = $holder.data('options');\n        options.airPopover = options.airPopover || [];\n        options.airPopover.push(group);\n\n        var $popover = $('#note-popover-' + $holder.attr('id').replace('note-editor-', ''));\n\n        if (group[0] == 'dropdownMenu') {\n            var items = getSelectorForOptionalButtons(options.airPopover);\n            if ($holder.is('[data-button]')) {\n                $popover.find('.note-mbrShortModeMore').show();\n                if (items && options.shortMode && isShortMode) {\n                    $popover.find(items).addClass('hidden');\n                }\n            } /*else {\n                $popover.find('.note-mbrShortModeMore').hide();\n                if (items) {\n                    $popover.find(items).removeClass('hidden');\n                }\n            }*/\n        }\n\n        (types || 'link,image,button,air').split(',').forEach(function(type){\n            var index = $popover.find('.note-' + type + '-popover .note-mbrShortModeMore').prevAll().length;\n            func.call(this, $holder, group, type, index || -1);\n        }, this);\n\n        if (options.shortMode && isShortMode && group[2] && group[2].optional) {\n            var items = getSelectorForOptionalButtons([group]);\n            if (items) {\n                $popover.find(items).addClass('hidden');\n            }\n        }\n\n    });\n\n    // decorator for $.summernote.eventHandler.updateStyleInfo\n    decorator($.summernote.eventHandler, 'updateStyleInfo', function(func, args, styleInfo, layoutInfo){\n\n        func.apply(this, args);\n\n        var isBtnPopover = styleInfo.anchor && /btn|mbr-menu-item|mbr-editable-menu-item/g.test(styleInfo.anchor.className);\n        if (!isBtnPopover && styleInfo.anchor) {\n            isBtnPopover = !!$(styleInfo.anchor).attr('data-app-btn');\n        }\n\n        var $group = layoutInfo.popover().find('.note-mbrShortModeMore');\n\n        if (isBtnPopover) {\n            $group.removeClass('hidden');\n            return;\n        }\n\n        var isCollapsed = styleInfo.range && styleInfo.range.isCollapsed();\n        var isLink = isCollapsed && styleInfo.anchor;\n\n        if (!isCollapsed || isLink) {\n            $group.addClass('hidden');\n        } else {\n            $group.removeClass('hidden');\n        }\n\n    });\n\n\n\n    var PLUGIN_NAME;\n\n    // core functions: template\n    var tmpl = $.summernote.renderer.getTemplate();\n\n    $.summernote.addPlugin((function(plugin){\n\n        if (!plugin.name) {\n            throw new Error('Plugin name not found.');\n        }\n\n        PLUGIN_NAME = plugin.name;\n\n        var langs   = plugin.langs || {},\n            options = $.summernote.options,\n            buttons = {};\n\n        langs['en-US'] = langs['en-US'] || {};\n        options.icons[PLUGIN_NAME] = {};\n        plugin.events = plugin.events || {};\n        plugin.buttons = plugin.buttons || {};\n\n        var button = function(btnName, eventName){\n            return function (lang, options) {\n                return tmpl.iconButton(options.iconPrefix + options.icons[PLUGIN_NAME][btnName], {\n                    event: eventName,\n                    title: lang[PLUGIN_NAME][btnName],\n                    hide: true\n                }).replace('<button','<button data-toggle=\"tooltip\"');\n            };\n        };\n\n        $.each(plugin.buttons, function(btnName){\n\n            var globalBtnName = PLUGIN_NAME + btnName.charAt(0).toUpperCase() + btnName.substr(1);\n\n            buttons[globalBtnName] = button(btnName, globalBtnName);\n            plugin.events[globalBtnName] = this.click;\n\n            langs['en-US'][btnName] = this.title || '';\n            options.icons[PLUGIN_NAME][btnName] = this.icon || '';\n\n        });\n\n        plugin.langs = {};\n        for (var name in langs) {\n            plugin.langs[name] = {};\n            plugin.langs[name][PLUGIN_NAME] = {};\n            for (var key in langs[name]) {\n                plugin.langs[name][PLUGIN_NAME][key] = langs[name][key];\n            }\n        }\n\n        plugin.buttons = buttons;\n\n        return plugin;\n\n    })({\n\n        name: 'mbrShortMode',\n\n        /*\n        langs: {\n            'de-DE': {\n                addItem: '...',\n                addSubItem: '...',\n                ...\n            }\n        },\n        */\n\n        init: function(layoutInfo) {\n            isShortMode = true;\n            update(layoutInfo);\n        },\n\n        buttons: {\n\n            more: {\n\n                title : 'More',\n                icon  : 'angle-right',\n                click : function (event, editor, layoutInfo) {\n                    event.stopPropagation();\n                    isShortMode = !isShortMode;\n                    update(layoutInfo);\n                }\n\n            }\n\n        }\n\n    }));\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/summernote/plugin/summernote-ext-mbr-short-mode.js\n")},"./web/app/builder/summernote/summernote.js":
/*!**************************************************!*\
  !*** ./web/app/builder/summernote/summernote.js ***!
  \**************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Super simple wysiwyg editor on Bootstrap v0.6.17\n * http://summernote.org/\n *\n * summernote.js\n * Copyright 2013-2015 Alan Hong. and other contributors\n * summernote may be freely distributed under the MIT license./\n *\n * Date: 2015-11-11T13:12Z\n * Modified by Mobirise.com\n */\n(function (factory) {\n  /* global define */\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"jquery\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(function ($) {\n  if (!Array.prototype.reduce) {\n    /**\n     * Array.prototype.reduce polyfill\n     *\n     * @param {Function} callback\n     * @param {Value} [initialValue]\n     * @return {Value}\n     *\n     * @see http://goo.gl/WNriQD\n     */\n    Array.prototype.reduce = function (callback) {\n      var t = Object(this), len = t.length >>> 0, k = 0, value;\n      if (arguments.length === 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in t)) {\n          k++;\n        }\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n        value = t[k++];\n      }\n      for (; k < len; k++) {\n        if (k in t) {\n          value = callback(value, t[k], k, t);\n        }\n      }\n      return value;\n    };\n  }\n\n  if ('function' !== typeof Array.prototype.filter) {\n    /**\n     * Array.prototype.filter polyfill\n     *\n     * @param {Function} func\n     * @return {Array}\n     *\n     * @see http://goo.gl/T1KFnq\n     */\n    Array.prototype.filter = function (func) {\n      var t = Object(this), len = t.length >>> 0;\n\n      var res = [];\n      var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n      for (var i = 0; i < len; i++) {\n        if (i in t) {\n          var val = t[i];\n          if (func.call(thisArg, val, i, t)) {\n            res.push(val);\n          }\n        }\n      }\n\n      return res;\n    };\n  }\n\n  if (!Array.prototype.map) {\n    /**\n     * Array.prototype.map polyfill\n     *\n     * @param {Function} callback\n     * @return {Array}\n     *\n     * @see https://goo.gl/SMWaMK\n     */\n    Array.prototype.map = function (callback, thisArg) {\n      var T, A, k;\n      if (this === null) {\n        throw new TypeError(' this is null or not defined');\n      }\n\n      var O = Object(this);\n      var len = O.length >>> 0;\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      if (arguments.length > 1) {\n        T = thisArg;\n      }\n\n      A = new Array(len);\n      k = 0;\n\n      while (k < len) {\n        var kValue, mappedValue;\n        if (k in O) {\n          kValue = O[k];\n          mappedValue = callback.call(T, kValue, k, O);\n          A[k] = mappedValue;\n        }\n        k++;\n      }\n      return A;\n    };\n  }\n\n  var isSupportAmd = false;//typeof define === 'function' && define.amd;\n\n  /**\n   * returns whether font is installed or not.\n   *\n   * @param {String} fontName\n   * @return {Boolean}\n   */\n  var isFontInstalled = function (fontName) {\n    var testFontName = fontName === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS';\n    var $tester = $('<div>').css({\n      position: 'absolute',\n      left: '-9999px',\n      top: '-9999px',\n      fontSize: '200px'\n    }).text('mmmmmmmmmwwwwwww').appendTo(document.body);\n\n    var originalWidth = $tester.css('fontFamily', testFontName).width();\n    var width = $tester.css('fontFamily', fontName + ',' + testFontName).width();\n\n    $tester.remove();\n\n    return originalWidth !== width;\n  };\n\n  var userAgent = navigator.userAgent;\n  var isMSIE = /MSIE|Trident/i.test(userAgent);\n  var browserVersion;\n  if (isMSIE) {\n    var matches = /MSIE (\\d+[.]\\d+)/.exec(userAgent);\n    if (matches) {\n      browserVersion = parseFloat(matches[1]);\n    }\n    matches = /Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/.exec(userAgent);\n    if (matches) {\n      browserVersion = parseFloat(matches[1]);\n    }\n  }\n\n  /**\n   * @class core.agent\n   *\n   * Object which check platform and agent\n   *\n   * @singleton\n   * @alternateClassName agent\n   */\n  var agent = {\n    /** @property {Boolean} [isMac=false] true if this agent is Mac  */\n    isMac: navigator.appVersion.indexOf('Mac') > -1,\n    /** @property {Boolean} [isMSIE=false] true if this agent is a Internet Explorer  */\n    isMSIE: isMSIE,\n    /** @property {Boolean} [isFF=false] true if this agent is a Firefox  */\n    isFF: /firefox/i.test(userAgent),\n    isWebkit: /webkit/i.test(userAgent),\n    /** @property {Boolean} [isSafari=false] true if this agent is a Safari  */\n    isSafari: /safari/i.test(userAgent),\n    /** @property {Float} browserVersion current browser version  */\n    browserVersion: browserVersion,\n    /** @property {String} jqueryVersion current jQuery version string  */\n    jqueryVersion: parseFloat($.fn.jquery),\n    isSupportAmd: isSupportAmd,\n    hasCodeMirror: /*isSupportAmd ? require.specified('CodeMirror') :*/ !!window.CodeMirror,\n    isFontInstalled: isFontInstalled,\n    isW3CRangeSupport: !!document.createRange\n  };\n\n  /**\n   * @class core.func\n   *\n   * func utils (for high-order func's arg)\n   *\n   * @singleton\n   * @alternateClassName func\n   */\n  var func = (function () {\n    var eq = function (itemA) {\n      return function (itemB) {\n        return itemA === itemB;\n      };\n    };\n\n    var eq2 = function (itemA, itemB) {\n      return itemA === itemB;\n    };\n\n    var peq2 = function (propName) {\n      return function (itemA, itemB) {\n        return itemA[propName] === itemB[propName];\n      };\n    };\n\n    var ok = function () {\n      return true;\n    };\n\n    var fail = function () {\n      return false;\n    };\n\n    var not = function (f) {\n      return function () {\n        return !f.apply(f, arguments);\n      };\n    };\n\n    var and = function (fA, fB) {\n      return function (item) {\n        return fA(item) && fB(item);\n      };\n    };\n\n    var self = function (a) {\n      return a;\n    };\n\n    var idCounter = 0;\n\n    /**\n     * generate a globally-unique id\n     *\n     * @param {String} [prefix]\n     */\n    var uniqueId = function (prefix) {\n      var id = ++idCounter + '';\n      return prefix ? prefix + id : id;\n    };\n\n    /**\n     * returns bnd (bounds) from rect\n     *\n     * - IE Compatability Issue: http://goo.gl/sRLOAo\n     * - Scroll Issue: http://goo.gl/sNjUc\n     *\n     * @param {Rect} rect\n     * @return {Object} bounds\n     * @return {Number} bounds.top\n     * @return {Number} bounds.left\n     * @return {Number} bounds.width\n     * @return {Number} bounds.height\n     */\n    var rect2bnd = function (rect) {\n      var $document = $(document);\n      return {\n        top: rect.top + $document.scrollTop(),\n        left: rect.left + $document.scrollLeft(),\n        width: rect.right - rect.left,\n        height: rect.bottom - rect.top\n      };\n    };\n\n    /**\n     * returns a copy of the object where the keys have become the values and the values the keys.\n     * @param {Object} obj\n     * @return {Object}\n     */\n    var invertObject = function (obj) {\n      var inverted = {};\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          inverted[obj[key]] = key;\n        }\n      }\n      return inverted;\n    };\n\n    /**\n     * @param {String} namespace\n     * @param {String} [prefix]\n     * @return {String}\n     */\n    var namespaceToCamel = function (namespace, prefix) {\n      prefix = prefix || '';\n      return prefix + namespace.split('.').map(function (name) {\n        return name.substring(0, 1).toUpperCase() + name.substring(1);\n      }).join('');\n    };\n\n    return {\n      eq: eq,\n      eq2: eq2,\n      peq2: peq2,\n      ok: ok,\n      fail: fail,\n      self: self,\n      not: not,\n      and: and,\n      uniqueId: uniqueId,\n      rect2bnd: rect2bnd,\n      invertObject: invertObject,\n      namespaceToCamel: namespaceToCamel\n    };\n  })();\n\n  /**\n   * @class core.list\n   *\n   * list utils\n   *\n   * @singleton\n   * @alternateClassName list\n   */\n  var list = (function () {\n    /**\n     * returns the first item of an array.\n     *\n     * @param {Array} array\n     */\n    var head = function (array) {\n      return array[0];\n    };\n\n    /**\n     * returns the last item of an array.\n     *\n     * @param {Array} array\n     */\n    var last = function (array) {\n      return array[array.length - 1];\n    };\n\n    /**\n     * returns everything but the last entry of the array.\n     *\n     * @param {Array} array\n     */\n    var initial = function (array) {\n      return array.slice(0, array.length - 1);\n    };\n\n    /**\n     * returns the rest of the items in an array.\n     *\n     * @param {Array} array\n     */\n    var tail = function (array) {\n      return array.slice(1);\n    };\n\n    /**\n     * returns item of array\n     */\n    var find = function (array, pred) {\n      for (var idx = 0, len = array.length; idx < len; idx ++) {\n        var item = array[idx];\n        if (pred(item)) {\n          return item;\n        }\n      }\n    };\n\n    /**\n     * returns true if all of the values in the array pass the predicate truth test.\n     */\n    var all = function (array, pred) {\n      for (var idx = 0, len = array.length; idx < len; idx ++) {\n        if (!pred(array[idx])) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    /**\n     * returns index of item\n     */\n    var indexOf = function (array, item) {\n      return $.inArray(item, array);\n    };\n\n    /**\n     * returns true if the value is present in the list.\n     */\n    var contains = function (array, item) {\n      return indexOf(array, item) !== -1;\n    };\n\n    /**\n     * get sum from a list\n     *\n     * @param {Array} array - array\n     * @param {Function} fn - iterator\n     */\n    var sum = function (array, fn) {\n      fn = fn || func.self;\n      return array.reduce(function (memo, v) {\n        return memo + fn(v);\n      }, 0);\n    };\n\n    /**\n     * returns a copy of the collection with array type.\n     * @param {Collection} collection - collection eg) node.childNodes, ...\n     */\n    var from = function (collection) {\n      var result = [], idx = -1, length = collection.length;\n      while (++idx < length) {\n        result[idx] = collection[idx];\n      }\n      return result;\n    };\n\n    /**\n     * cluster elements by predicate function.\n     *\n     * @param {Array} array - array\n     * @param {Function} fn - predicate function for cluster rule\n     * @param {Array[]}\n     */\n    var clusterBy = function (array, fn) {\n      if (!array.length) { return []; }\n      var aTail = tail(array);\n      return aTail.reduce(function (memo, v) {\n        var aLast = last(memo);\n        if (fn(last(aLast), v)) {\n          aLast[aLast.length] = v;\n        } else {\n          memo[memo.length] = [v];\n        }\n        return memo;\n      }, [[head(array)]]);\n    };\n\n    /**\n     * returns a copy of the array with all falsy values removed\n     *\n     * @param {Array} array - array\n     * @param {Function} fn - predicate function for cluster rule\n     */\n    var compact = function (array) {\n      var aResult = [];\n      for (var idx = 0, len = array.length; idx < len; idx ++) {\n        if (array[idx]) { aResult.push(array[idx]); }\n      }\n      return aResult;\n    };\n\n    /**\n     * produces a duplicate-free version of the array\n     *\n     * @param {Array} array\n     */\n    var unique = function (array) {\n      var results = [];\n\n      for (var idx = 0, len = array.length; idx < len; idx ++) {\n        if (!contains(results, array[idx])) {\n          results.push(array[idx]);\n        }\n      }\n\n      return results;\n    };\n\n    /**\n     * returns next item.\n     * @param {Array} array\n     */\n    var next = function (array, item) {\n      var idx = indexOf(array, item);\n      if (idx === -1) { return null; }\n\n      return array[idx + 1];\n    };\n\n    /**\n     * returns prev item.\n     * @param {Array} array\n     */\n    var prev = function (array, item) {\n      var idx = indexOf(array, item);\n      if (idx === -1) { return null; }\n\n      return array[idx - 1];\n    };\n\n    return { head: head, last: last, initial: initial, tail: tail,\n             prev: prev, next: next, find: find, contains: contains,\n             all: all, sum: sum, from: from,\n             clusterBy: clusterBy, compact: compact, unique: unique };\n  })();\n\n\n  var NBSP_CHAR = String.fromCharCode(160);\n  var ZERO_WIDTH_NBSP_CHAR = '\\ufeff';\n\n  /**\n   * @class core.dom\n   *\n   * Dom functions\n   *\n   * @singleton\n   * @alternateClassName dom\n   */\n  var dom = (function () {\n    /**\n     * @method isEditable\n     *\n     * returns whether node is `note-editable` or not.\n     *\n     * @param {Node} node\n     * @return {Boolean}\n     */\n    var isEditable = function (node) {\n      return node && $(node).hasClass('note-editable');\n    };\n\n    /**\n     * @method isControlSizing\n     *\n     * returns whether node is `note-control-sizing` or not.\n     *\n     * @param {Node} node\n     * @return {Boolean}\n     */\n    var isControlSizing = function (node) {\n      return node && $(node).hasClass('note-control-sizing');\n    };\n\n    /**\n     * @method  buildLayoutInfo\n     *\n     * build layoutInfo from $editor(.note-editor)\n     *\n     * @param {jQuery} $editor\n     * @return {Object}\n     * @return {Function} return.editor\n     * @return {Node} return.dropzone\n     * @return {Node} return.toolbar\n     * @return {Node} return.editable\n     * @return {Node} return.codable\n     * @return {Node} return.popover\n     * @return {Node} return.handle\n     * @return {Node} return.dialog\n     */\n    var buildLayoutInfo = function ($editor) {\n      var makeFinder;\n\n      // air mode\n      if ($editor.hasClass('note-air-editor')) {\n        var id = list.last($editor.attr('id').split('-'));\n        makeFinder = function (sIdPrefix) {\n          return function () { return $(sIdPrefix + id); };\n        };\n\n        return {\n          editor: function () { return $editor; },\n          holder : function () { return $editor.data('holder'); },\n          editable: function () { return $editor; },\n          popover: makeFinder('#note-popover-'),\n          handle: makeFinder('#note-handle-'),\n          dialog: makeFinder('#note-dialog-')\n        };\n\n        // frame mode\n      } else {\n        makeFinder = function (className, $base) {\n          $base = $base || $editor;\n          return function () { return $base.find(className); };\n        };\n\n        var options = $editor.data('options');\n        var $dialogHolder = (options && options.dialogsInBody) ? $(document.body) : null;\n\n        return {\n          editor: function () { return $editor; },\n          holder : function () { return $editor.data('holder'); },\n          dropzone: makeFinder('.note-dropzone'),\n          toolbar: makeFinder('.note-toolbar'),\n          editable: makeFinder('.note-editable'),\n          codable: makeFinder('.note-codable'),\n          statusbar: makeFinder('.note-statusbar'),\n          popover: makeFinder('.note-popover'),\n          handle: makeFinder('.note-handle'),\n          dialog: makeFinder('.note-dialog', $dialogHolder)\n        };\n      }\n    };\n\n    /**\n     * returns makeLayoutInfo from editor's descendant node.\n     *\n     * @private\n     * @param {Node} descendant\n     * @return {Object}\n     */\n    var makeLayoutInfo = function (descendant) {\n      var $target = $(descendant).closest('.note-editor, .note-air-editor, .note-air-layout');\n\n      if (!$target.length) {\n        return null;\n      }\n\n      var $editor;\n      if ($target.is('.note-editor, .note-air-editor')) {\n        $editor = $target;\n      } else {\n        $editor = $('#note-editor-' + list.last($target.attr('id').split('-')));\n      }\n\n      return buildLayoutInfo($editor);\n    };\n\n    /**\n     * @method makePredByNodeName\n     *\n     * returns predicate which judge whether nodeName is same\n     *\n     * @param {String} nodeName\n     * @return {Function}\n     */\n    var makePredByNodeName = function (nodeName) {\n      nodeName = nodeName.toUpperCase();\n      return function (node) {\n        return node && node.nodeName && node.nodeName.toUpperCase() === nodeName;\n      };\n    };\n\n    /**\n     * @method isText\n     *\n     *\n     *\n     * @param {Node} node\n     * @return {Boolean} true if node's type is text(3)\n     */\n    var isText = function (node) {\n      return node && node.nodeType === 3;\n    };\n\n    /**\n     * ex) br, col, embed, hr, img, input, ...\n     * @see http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\n     */\n    var isVoid = function (node) {\n      return node && /^BR|^IMG|^HR|^IFRAME|^BUTTON/.test(node.nodeName.toUpperCase());\n    };\n\n    var isPara = function (node) {\n      if (isEditable(node)) {\n        return false;\n      }\n\n      // Chrome(v31.0), FF(v25.0.1) use DIV for paragraph\n      return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName.toUpperCase());\n    };\n\n    var isLi = makePredByNodeName('LI');\n\n    var isPurePara = function (node) {\n      return isPara(node) && !isLi(node);\n    };\n\n    var isTable = makePredByNodeName('TABLE');\n\n    var isInline = function (node) {\n      return !isBodyContainer(node) &&\n             !isList(node) &&\n             !isHr(node) &&\n             !isPara(node) &&\n             !isTable(node) &&\n             !isBlockquote(node);\n    };\n\n    var isList = function (node) {\n      return node && /^UL|^OL/.test(node.nodeName.toUpperCase());\n    };\n\n    var isHr = makePredByNodeName('HR');\n\n    var isCell = function (node) {\n      return node && /^TD|^TH/.test(node.nodeName.toUpperCase());\n    };\n\n    var isBlockquote = makePredByNodeName('BLOCKQUOTE');\n\n    var isBodyContainer = function (node) {\n      return isCell(node) || isBlockquote(node) || isEditable(node);\n    };\n\n    var isAnchor = makePredByNodeName('A');\n\n    var isParaInline = function (node) {\n      return isInline(node) && !!ancestor(node, isPara);\n    };\n\n    var isBodyInline = function (node) {\n      return isInline(node) && !ancestor(node, isPara);\n    };\n\n    var isBody = makePredByNodeName('BODY');\n\n    /**\n     * returns whether nodeB is closest sibling of nodeA\n     *\n     * @param {Node} nodeA\n     * @param {Node} nodeB\n     * @return {Boolean}\n     */\n    var isClosestSibling = function (nodeA, nodeB) {\n      return nodeA.nextSibling === nodeB ||\n             nodeA.previousSibling === nodeB;\n    };\n\n    /**\n     * returns array of closest siblings with node\n     *\n     * @param {Node} node\n     * @param {function} [pred] - predicate function\n     * @return {Node[]}\n     */\n    var withClosestSiblings = function (node, pred) {\n      pred = pred || func.ok;\n\n      var siblings = [];\n      if (node.previousSibling && pred(node.previousSibling)) {\n        siblings.push(node.previousSibling);\n      }\n      siblings.push(node);\n      if (node.nextSibling && pred(node.nextSibling)) {\n        siblings.push(node.nextSibling);\n      }\n      return siblings;\n    };\n\n    /**\n     * blank HTML for cursor position\n     * - [workaround] old IE only works with &nbsp;\n     * - [workaround] IE11 and other browser works with bogus br\n     */\n    var blankHTML = agent.isMSIE && agent.browserVersion < 11 ? '&nbsp;' : '<br>';\n\n    /**\n     * @method nodeLength\n     *\n     * returns #text's text size or element's childNodes size\n     *\n     * @param {Node} node\n     */\n    var nodeLength = function (node) {\n      if (isText(node)) {\n        return node.nodeValue.length;\n      }\n\n      return node.childNodes.length;\n    };\n\n    /**\n     * returns whether node is empty or not.\n     *\n     * @param {Node} node\n     * @return {Boolean}\n     */\n    var isEmpty = function (node) {\n      var len = nodeLength(node);\n\n      if (len === 0) {\n        return true;\n      } else if (!isText(node) && len === 1 && node.innerHTML === blankHTML) {\n        // ex) <p><br></p>, <span><br></span>\n        return true;\n      } else if (list.all(node.childNodes, isText) && node.innerHTML === '') {\n        // ex) <p></p>, <span></span>\n        return true;\n      }\n\n      return false;\n    };\n\n    /**\n     * padding blankHTML if node is empty (for cursor position)\n     */\n    var paddingBlankHTML = function (node) {\n      if (!isVoid(node) && !nodeLength(node)) {\n        node.innerHTML = blankHTML;\n      }\n    };\n\n    /**\n     * find nearest ancestor predicate hit\n     *\n     * @param {Node} node\n     * @param {Function} pred - predicate function\n     */\n    var ancestor = function (node, pred) {\n      while (node) {\n        if (pred(node)) { return node; }\n        if (isEditable(node)) { break; }\n\n        node = node.parentNode;\n      }\n      return null;\n    };\n\n    /**\n     * find nearest ancestor only single child blood line and predicate hit\n     *\n     * @param {Node} node\n     * @param {Function} pred - predicate function\n     */\n    var singleChildAncestor = function (node, pred) {\n      node = node.parentNode;\n\n      while (node) {\n        if (nodeLength(node) !== 1) { break; }\n        if (pred(node)) { return node; }\n        if (isEditable(node)) { break; }\n\n        node = node.parentNode;\n      }\n      return null;\n    };\n\n    /**\n     * returns new array of ancestor nodes (until predicate hit).\n     *\n     * @param {Node} node\n     * @param {Function} [optional] pred - predicate function\n     */\n    var listAncestor = function (node, pred) {\n      pred = pred || func.fail;\n\n      var ancestors = [];\n      ancestor(node, function (el) {\n        if (!isEditable(el)) {\n          ancestors.push(el);\n        }\n\n        return pred(el);\n      });\n      return ancestors;\n    };\n\n    /**\n     * find farthest ancestor predicate hit\n     */\n    var lastAncestor = function (node, pred) {\n      var ancestors = listAncestor(node);\n      return list.last(ancestors.filter(pred));\n    };\n\n    /**\n     * returns common ancestor node between two nodes.\n     *\n     * @param {Node} nodeA\n     * @param {Node} nodeB\n     */\n    var commonAncestor = function (nodeA, nodeB) {\n      var ancestors = listAncestor(nodeA);\n      for (var n = nodeB; n; n = n.parentNode) {\n        if ($.inArray(n, ancestors) > -1) { return n; }\n      }\n      return null; // difference document area\n    };\n\n    /**\n     * listing all previous siblings (until predicate hit).\n     *\n     * @param {Node} node\n     * @param {Function} [optional] pred - predicate function\n     */\n    var listPrev = function (node, pred) {\n      pred = pred || func.fail;\n\n      var nodes = [];\n      while (node) {\n        if (pred(node)) { break; }\n        nodes.push(node);\n        node = node.previousSibling;\n      }\n      return nodes;\n    };\n\n    /**\n     * listing next siblings (until predicate hit).\n     *\n     * @param {Node} node\n     * @param {Function} [pred] - predicate function\n     */\n    var listNext = function (node, pred) {\n      pred = pred || func.fail;\n\n      var nodes = [];\n      while (node) {\n        if (pred(node)) { break; }\n        nodes.push(node);\n        node = node.nextSibling;\n      }\n      return nodes;\n    };\n\n    /**\n     * listing descendant nodes\n     *\n     * @param {Node} node\n     * @param {Function} [pred] - predicate function\n     */\n    var listDescendant = function (node, pred) {\n      var descendents = [];\n      pred = pred || func.ok;\n\n      // start DFS(depth first search) with node\n      (function fnWalk(current) {\n        if (node !== current && pred(current)) {\n          descendents.push(current);\n        }\n        for (var idx = 0, len = current.childNodes.length; idx < len; idx++) {\n          fnWalk(current.childNodes[idx]);\n        }\n      })(node);\n\n      return descendents;\n    };\n\n    /**\n     * wrap node with new tag.\n     *\n     * @param {Node} node\n     * @param {Node} tagName of wrapper\n     * @return {Node} - wrapper\n     */\n    var wrap = function (node, wrapperName) {\n      var parent = node.parentNode;\n      var wrapper = $('<' + wrapperName + '>')[0];\n\n      parent.insertBefore(wrapper, node);\n      wrapper.appendChild(node);\n\n      return wrapper;\n    };\n\n    /**\n     * insert node after preceding\n     *\n     * @param {Node} node\n     * @param {Node} preceding - predicate function\n     */\n    var insertAfter = function (node, preceding) {\n      var next = preceding.nextSibling, parent = preceding.parentNode;\n      if (next) {\n        parent.insertBefore(node, next);\n      } else {\n        parent.appendChild(node);\n      }\n      return node;\n    };\n\n    /**\n     * append elements.\n     *\n     * @param {Node} node\n     * @param {Collection} aChild\n     */\n    var appendChildNodes = function (node, aChild) {\n      $.each(aChild, function (idx, child) {\n        node.appendChild(child);\n      });\n      return node;\n    };\n\n    /**\n     * returns whether boundaryPoint is left edge or not.\n     *\n     * @param {BoundaryPoint} point\n     * @return {Boolean}\n     */\n    var isLeftEdgePoint = function (point) {\n      return point.offset === 0;\n    };\n\n    /**\n     * returns whether boundaryPoint is right edge or not.\n     *\n     * @param {BoundaryPoint} point\n     * @return {Boolean}\n     */\n    var isRightEdgePoint = function (point) {\n      return point.offset === nodeLength(point.node);\n    };\n\n    /**\n     * returns whether boundaryPoint is edge or not.\n     *\n     * @param {BoundaryPoint} point\n     * @return {Boolean}\n     */\n    var isEdgePoint = function (point) {\n      return isLeftEdgePoint(point) || isRightEdgePoint(point);\n    };\n\n    /**\n     * returns wheter node is left edge of ancestor or not.\n     *\n     * @param {Node} node\n     * @param {Node} ancestor\n     * @return {Boolean}\n     */\n    var isLeftEdgeOf = function (node, ancestor) {\n      while (node && node !== ancestor) {\n        if (position(node) !== 0) {\n          return false;\n        }\n        node = node.parentNode;\n      }\n\n      return true;\n    };\n\n    /**\n     * returns whether node is right edge of ancestor or not.\n     *\n     * @param {Node} node\n     * @param {Node} ancestor\n     * @return {Boolean}\n     */\n    var isRightEdgeOf = function (node, ancestor) {\n      while (node && node !== ancestor) {\n        if (position(node) !== nodeLength(node.parentNode) - 1) {\n          return false;\n        }\n        node = node.parentNode;\n      }\n\n      return true;\n    };\n\n    /**\n     * returns whether point is left edge of ancestor or not.\n     * @param {BoundaryPoint} point\n     * @param {Node} ancestor\n     * @return {Boolean}\n     */\n    var isLeftEdgePointOf = function (point, ancestor) {\n      return isLeftEdgePoint(point) && isLeftEdgeOf(point.node, ancestor);\n    };\n\n    /**\n     * returns whether point is right edge of ancestor or not.\n     * @param {BoundaryPoint} point\n     * @param {Node} ancestor\n     * @return {Boolean}\n     */\n    var isRightEdgePointOf = function (point, ancestor) {\n      return isRightEdgePoint(point) && isRightEdgeOf(point.node, ancestor);\n    };\n\n    /**\n     * returns offset from parent.\n     *\n     * @param {Node} node\n     */\n    var position = function (node) {\n      var offset = 0;\n      while ((node = node.previousSibling)) {\n        offset += 1;\n      }\n      return offset;\n    };\n\n    var hasChildren = function (node) {\n      return !!(node && node.childNodes && node.childNodes.length);\n    };\n\n    /**\n     * returns previous boundaryPoint\n     *\n     * @param {BoundaryPoint} point\n     * @param {Boolean} isSkipInnerOffset\n     * @return {BoundaryPoint}\n     */\n    var prevPoint = function (point, isSkipInnerOffset) {\n      var node, offset;\n\n      if (point.offset === 0) {\n        if (isEditable(point.node)) {\n          return null;\n        }\n\n        node = point.node.parentNode;\n        offset = position(point.node);\n      } else if (hasChildren(point.node)) {\n        node = point.node.childNodes[point.offset - 1];\n        offset = nodeLength(node);\n      } else {\n        node = point.node;\n        offset = isSkipInnerOffset ? 0 : point.offset - 1;\n      }\n\n      return {\n        node: node,\n        offset: offset\n      };\n    };\n\n    /**\n     * returns next boundaryPoint\n     *\n     * @param {BoundaryPoint} point\n     * @param {Boolean} isSkipInnerOffset\n     * @return {BoundaryPoint}\n     */\n    var nextPoint = function (point, isSkipInnerOffset) {\n      var node, offset;\n\n      if (nodeLength(point.node) === point.offset) {\n        if (isEditable(point.node)) {\n          return null;\n        }\n\n        node = point.node.parentNode;\n        offset = position(point.node) + 1;\n      } else if (hasChildren(point.node)) {\n        node = point.node.childNodes[point.offset];\n        offset = 0;\n      } else {\n        node = point.node;\n        offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1;\n      }\n\n      return {\n        node: node,\n        offset: offset\n      };\n    };\n\n    /**\n     * returns whether pointA and pointB is same or not.\n     *\n     * @param {BoundaryPoint} pointA\n     * @param {BoundaryPoint} pointB\n     * @return {Boolean}\n     */\n    var isSamePoint = function (pointA, pointB) {\n      return pointA.node === pointB.node && pointA.offset === pointB.offset;\n    };\n\n    /**\n     * returns whether point is visible (can set cursor) or not.\n     *\n     * @param {BoundaryPoint} point\n     * @return {Boolean}\n     */\n    var isVisiblePoint = function (point) {\n      if (isText(point.node) || !hasChildren(point.node) || isEmpty(point.node)) {\n        return true;\n      }\n\n      var leftNode = point.node.childNodes[point.offset - 1];\n      var rightNode = point.node.childNodes[point.offset];\n      if ((!leftNode || isVoid(leftNode)) && (!rightNode || isVoid(rightNode))) {\n        return true;\n      }\n\n      return false;\n    };\n\n    /**\n     * @method prevPointUtil\n     *\n     * @param {BoundaryPoint} point\n     * @param {Function} pred\n     * @return {BoundaryPoint}\n     */\n    var prevPointUntil = function (point, pred) {\n      while (point) {\n        if (pred(point)) {\n          return point;\n        }\n\n        point = prevPoint(point);\n      }\n\n      return null;\n    };\n\n    /**\n     * @method nextPointUntil\n     *\n     * @param {BoundaryPoint} point\n     * @param {Function} pred\n     * @return {BoundaryPoint}\n     */\n    var nextPointUntil = function (point, pred) {\n      while (point) {\n        if (pred(point)) {\n          return point;\n        }\n\n        point = nextPoint(point);\n      }\n\n      return null;\n    };\n\n    /**\n     * returns whether point has character or not.\n     *\n     * @param {Point} point\n     * @return {Boolean}\n     */\n    var isCharPoint = function (point) {\n      if (!isText(point.node)) {\n        return false;\n      }\n\n      var ch = point.node.nodeValue.charAt(point.offset - 1);\n      return ch && (ch !== ' ' && ch !== NBSP_CHAR);\n    };\n\n    /**\n     * @method walkPoint\n     *\n     * @param {BoundaryPoint} startPoint\n     * @param {BoundaryPoint} endPoint\n     * @param {Function} handler\n     * @param {Boolean} isSkipInnerOffset\n     */\n    var walkPoint = function (startPoint, endPoint, handler, isSkipInnerOffset) {\n      var point = startPoint;\n\n      while (point) {\n        handler(point);\n\n        if (isSamePoint(point, endPoint)) {\n          break;\n        }\n\n        var isSkipOffset = isSkipInnerOffset &&\n                           startPoint.node !== point.node &&\n                           endPoint.node !== point.node;\n        point = nextPoint(point, isSkipOffset);\n      }\n    };\n\n    /**\n     * @method makeOffsetPath\n     *\n     * return offsetPath(array of offset) from ancestor\n     *\n     * @param {Node} ancestor - ancestor node\n     * @param {Node} node\n     */\n    var makeOffsetPath = function (ancestor, node) {\n      var ancestors = listAncestor(node, func.eq(ancestor));\n      return ancestors.map(position).reverse();\n    };\n\n    /**\n     * @method fromOffsetPath\n     *\n     * return element from offsetPath(array of offset)\n     *\n     * @param {Node} ancestor - ancestor node\n     * @param {array} offsets - offsetPath\n     */\n    var fromOffsetPath = function (ancestor, offsets) {\n      var current = ancestor;\n      for (var i = 0, len = offsets.length; i < len; i++) {\n        if (current.childNodes.length <= offsets[i]) {\n          current = current.childNodes[current.childNodes.length - 1];\n        } else {\n          current = current.childNodes[offsets[i]];\n        }\n      }\n      return current;\n    };\n\n    /**\n     * @method splitNode\n     *\n     * split element or #text\n     *\n     * @param {BoundaryPoint} point\n     * @param {Object} [options]\n     * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false\n     * @param {Boolean} [options.isNotSplitEdgePoint] - default: false\n     * @return {Node} right node of boundaryPoint\n     */\n    var splitNode = function (point, options) {\n      var isSkipPaddingBlankHTML = options && options.isSkipPaddingBlankHTML;\n      var isNotSplitEdgePoint = options && options.isNotSplitEdgePoint;\n\n      // edge case\n      if (isEdgePoint(point) && (isText(point.node) || isNotSplitEdgePoint)) {\n        if (isLeftEdgePoint(point)) {\n          return point.node;\n        } else if (isRightEdgePoint(point)) {\n          return point.node.nextSibling;\n        }\n      }\n\n      // split #text\n      if (isText(point.node)) {\n        return point.node.splitText(point.offset);\n      } else {\n        var childNode = point.node.childNodes[point.offset];\n        var clone = insertAfter(point.node.cloneNode(false), point.node);\n        appendChildNodes(clone, listNext(childNode));\n\n        if (!isSkipPaddingBlankHTML) {\n          paddingBlankHTML(point.node);\n          paddingBlankHTML(clone);\n        }\n\n        return clone;\n      }\n    };\n\n    /**\n     * @method splitTree\n     *\n     * split tree by point\n     *\n     * @param {Node} root - split root\n     * @param {BoundaryPoint} point\n     * @param {Object} [options]\n     * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false\n     * @param {Boolean} [options.isNotSplitEdgePoint] - default: false\n     * @return {Node} right node of boundaryPoint\n     */\n    var splitTree = function (root, point, options) {\n      // ex) [#text, <span>, <p>]\n      var ancestors = listAncestor(point.node, func.eq(root));\n\n      if (!ancestors.length) {\n        return null;\n      } else if (ancestors.length === 1) {\n        return splitNode(point, options);\n      }\n\n      return ancestors.reduce(function (node, parent) {\n        if (node === point.node) {\n          node = splitNode(point, options);\n        }\n\n        return splitNode({\n          node: parent,\n          offset: node ? dom.position(node) : nodeLength(parent)\n        }, options);\n      });\n    };\n\n    /**\n     * split point\n     *\n     * @param {Point} point\n     * @param {Boolean} isInline\n     * @return {Object}\n     */\n    var splitPoint = function (point, isInline) {\n      // find splitRoot, container\n      //  - inline: splitRoot is a child of paragraph\n      //  - block: splitRoot is a child of bodyContainer\n      var pred = isInline ? isPara : isBodyContainer;\n      var ancestors = listAncestor(point.node, pred);\n      var topAncestor = list.last(ancestors) || point.node;\n\n      var splitRoot, container;\n      if (pred(topAncestor)) {\n        splitRoot = ancestors[ancestors.length - 2];\n        container = topAncestor;\n      } else {\n        splitRoot = topAncestor;\n        container = splitRoot.parentNode;\n      }\n\n      // if splitRoot is exists, split with splitTree\n      var pivot = splitRoot && splitTree(splitRoot, point, {\n        isSkipPaddingBlankHTML: isInline,\n        isNotSplitEdgePoint: isInline\n      });\n\n      // if container is point.node, find pivot with point.offset\n      if (!pivot && container === point.node) {\n        pivot = point.node.childNodes[point.offset];\n      }\n\n      return {\n        rightNode: pivot,\n        container: container\n      };\n    };\n\n    var create = function (nodeName) {\n      return document.createElement(nodeName);\n    };\n\n    var createText = function (text) {\n      return document.createTextNode(text);\n    };\n\n    /**\n     * @method remove\n     *\n     * remove node, (isRemoveChild: remove child or not)\n     *\n     * @param {Node} node\n     * @param {Boolean} isRemoveChild\n     */\n    var remove = function (node, isRemoveChild) {\n      if (!node || !node.parentNode) { return; }\n      if (node.removeNode) { return node.removeNode(isRemoveChild); }\n\n      var parent = node.parentNode;\n      if (!isRemoveChild) {\n        var nodes = [];\n        var i, len;\n        for (i = 0, len = node.childNodes.length; i < len; i++) {\n          nodes.push(node.childNodes[i]);\n        }\n\n        for (i = 0, len = nodes.length; i < len; i++) {\n          parent.insertBefore(nodes[i], node);\n        }\n      }\n\n      parent.removeChild(node);\n    };\n\n    /**\n     * @method removeWhile\n     *\n     * @param {Node} node\n     * @param {Function} pred\n     */\n    var removeWhile = function (node, pred) {\n      while (node) {\n        if (isEditable(node) || !pred(node)) {\n          break;\n        }\n\n        var parent = node.parentNode;\n        remove(node);\n        node = parent;\n      }\n    };\n\n    /**\n     * @method replace\n     *\n     * replace node with provided nodeName\n     *\n     * @param {Node} node\n     * @param {String} nodeName\n     * @return {Node} - new node\n     */\n    var replace = function (node, nodeName) {\n      if (node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n        return node;\n      }\n\n      var newNode = create(nodeName);\n\n      if (node.style.cssText) {\n        newNode.style.cssText = node.style.cssText;\n      }\n\n      appendChildNodes(newNode, list.from(node.childNodes));\n      insertAfter(newNode, node);\n      remove(node);\n\n      return newNode;\n    };\n\n    var isTextarea = makePredByNodeName('TEXTAREA');\n\n    /**\n     * @param {jQuery} $node\n     * @param {Boolean} [stripLinebreaks] - default: false\n     */\n    var value = function ($node, stripLinebreaks) {\n      var val = isTextarea($node[0]) ? $node.val() : $node.html();\n      if (stripLinebreaks) {\n        return val.replace(/[\\n\\r]/g, '');\n      }\n      return val;\n    };\n\n    /**\n     * @method html\n     *\n     * get the HTML contents of node\n     *\n     * @param {jQuery} $node\n     * @param {Boolean} [isNewlineOnBlock]\n     */\n    var html = function ($node, isNewlineOnBlock) {\n      var markup = value($node);\n\n      if (isNewlineOnBlock) {\n        var regexTag = /<(\\/?)(\\b(?!!)[^>\\s]*)(.*?)(\\s*\\/?>)/g;\n        markup = markup.replace(regexTag, function (match, endSlash, name) {\n          name = name.toUpperCase();\n          var isEndOfInlineContainer = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(name) &&\n                                       !!endSlash;\n          var isBlockNode = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(name);\n\n          return match + ((isEndOfInlineContainer || isBlockNode) ? '\\n' : '');\n        });\n        markup = $.trim(markup);\n      }\n\n      return markup;\n    };\n\n    return {\n      /** @property {String} NBSP_CHAR */\n      NBSP_CHAR: NBSP_CHAR,\n      /** @property {String} ZERO_WIDTH_NBSP_CHAR */\n      ZERO_WIDTH_NBSP_CHAR: ZERO_WIDTH_NBSP_CHAR,\n      /** @property {String} blank */\n      blank: blankHTML,\n      /** @property {String} emptyPara */\n      emptyPara: '<p>' + blankHTML + '</p>',\n      makePredByNodeName: makePredByNodeName,\n      isEditable: isEditable,\n      isControlSizing: isControlSizing,\n      buildLayoutInfo: buildLayoutInfo,\n      makeLayoutInfo: makeLayoutInfo,\n      isText: isText,\n      isVoid: isVoid,\n      isPara: isPara,\n      isPurePara: isPurePara,\n      isInline: isInline,\n      isBlock: func.not(isInline),\n      isBodyInline: isBodyInline,\n      isBody: isBody,\n      isParaInline: isParaInline,\n      isList: isList,\n      isTable: isTable,\n      isCell: isCell,\n      isBlockquote: isBlockquote,\n      isBodyContainer: isBodyContainer,\n      isAnchor: isAnchor,\n      isDiv: makePredByNodeName('DIV'),\n      isLi: isLi,\n      isBR: makePredByNodeName('BR'),\n      isSpan: makePredByNodeName('SPAN'),\n      isB: makePredByNodeName('B'),\n      isU: makePredByNodeName('U'),\n      isS: makePredByNodeName('S'),\n      isI: makePredByNodeName('I'),\n      isImg: makePredByNodeName('IMG'),\n      isTextarea: isTextarea,\n      isEmpty: isEmpty,\n      isEmptyAnchor: func.and(isAnchor, isEmpty),\n      isClosestSibling: isClosestSibling,\n      withClosestSiblings: withClosestSiblings,\n      nodeLength: nodeLength,\n      isLeftEdgePoint: isLeftEdgePoint,\n      isRightEdgePoint: isRightEdgePoint,\n      isEdgePoint: isEdgePoint,\n      isLeftEdgeOf: isLeftEdgeOf,\n      isRightEdgeOf: isRightEdgeOf,\n      isLeftEdgePointOf: isLeftEdgePointOf,\n      isRightEdgePointOf: isRightEdgePointOf,\n      prevPoint: prevPoint,\n      nextPoint: nextPoint,\n      isSamePoint: isSamePoint,\n      isVisiblePoint: isVisiblePoint,\n      prevPointUntil: prevPointUntil,\n      nextPointUntil: nextPointUntil,\n      isCharPoint: isCharPoint,\n      walkPoint: walkPoint,\n      ancestor: ancestor,\n      singleChildAncestor: singleChildAncestor,\n      listAncestor: listAncestor,\n      lastAncestor: lastAncestor,\n      listNext: listNext,\n      listPrev: listPrev,\n      listDescendant: listDescendant,\n      commonAncestor: commonAncestor,\n      wrap: wrap,\n      insertAfter: insertAfter,\n      appendChildNodes: appendChildNodes,\n      position: position,\n      hasChildren: hasChildren,\n      makeOffsetPath: makeOffsetPath,\n      fromOffsetPath: fromOffsetPath,\n      splitTree: splitTree,\n      splitPoint: splitPoint,\n      create: create,\n      createText: createText,\n      remove: remove,\n      removeWhile: removeWhile,\n      replace: replace,\n      html: html,\n      value: value\n    };\n  })();\n\n\n  var range = (function () {\n\n    /**\n     * return boundaryPoint from TextRange, inspired by Andy Na's HuskyRange.js\n     *\n     * @param {TextRange} textRange\n     * @param {Boolean} isStart\n     * @return {BoundaryPoint}\n     *\n     * @see http://msdn.microsoft.com/en-us/library/ie/ms535872(v=vs.85).aspx\n     */\n    var textRangeToPoint = function (textRange, isStart) {\n      var container = textRange.parentElement(), offset;\n\n      var tester = document.body.createTextRange(), prevContainer;\n      var childNodes = list.from(container.childNodes);\n      for (offset = 0; offset < childNodes.length; offset++) {\n        if (dom.isText(childNodes[offset])) {\n          continue;\n        }\n        tester.moveToElementText(childNodes[offset]);\n        if (tester.compareEndPoints('StartToStart', textRange) >= 0) {\n          break;\n        }\n        prevContainer = childNodes[offset];\n      }\n\n      if (offset !== 0 && dom.isText(childNodes[offset - 1])) {\n        var textRangeStart = document.body.createTextRange(), curTextNode = null;\n        textRangeStart.moveToElementText(prevContainer || container);\n        textRangeStart.collapse(!prevContainer);\n        curTextNode = prevContainer ? prevContainer.nextSibling : container.firstChild;\n\n        var pointTester = textRange.duplicate();\n        pointTester.setEndPoint('StartToStart', textRangeStart);\n        var textCount = pointTester.text.replace(/[\\r\\n]/g, '').length;\n\n        while (textCount > curTextNode.nodeValue.length && curTextNode.nextSibling) {\n          textCount -= curTextNode.nodeValue.length;\n          curTextNode = curTextNode.nextSibling;\n        }\n\n        /* jshint ignore:start */\n        var dummy = curTextNode.nodeValue; // enforce IE to re-reference curTextNode, hack\n        /* jshint ignore:end */\n\n        if (isStart && curTextNode.nextSibling && dom.isText(curTextNode.nextSibling) &&\n            textCount === curTextNode.nodeValue.length) {\n          textCount -= curTextNode.nodeValue.length;\n          curTextNode = curTextNode.nextSibling;\n        }\n\n        container = curTextNode;\n        offset = textCount;\n      }\n\n      return {\n        cont: container,\n        offset: offset\n      };\n    };\n\n    /**\n     * return TextRange from boundary point (inspired by google closure-library)\n     * @param {BoundaryPoint} point\n     * @return {TextRange}\n     */\n    var pointToTextRange = function (point) {\n      var textRangeInfo = function (container, offset) {\n        var node, isCollapseToStart;\n\n        if (dom.isText(container)) {\n          var prevTextNodes = dom.listPrev(container, func.not(dom.isText));\n          var prevContainer = list.last(prevTextNodes).previousSibling;\n          node =  prevContainer || container.parentNode;\n          offset += list.sum(list.tail(prevTextNodes), dom.nodeLength);\n          isCollapseToStart = !prevContainer;\n        } else {\n          node = container.childNodes[offset] || container;\n          if (dom.isText(node)) {\n            return textRangeInfo(node, 0);\n          }\n\n          offset = 0;\n          isCollapseToStart = false;\n        }\n\n        return {\n          node: node,\n          collapseToStart: isCollapseToStart,\n          offset: offset\n        };\n      };\n\n      var textRange = document.body.createTextRange();\n      var info = textRangeInfo(point.node, point.offset);\n\n      textRange.moveToElementText(info.node);\n      textRange.collapse(info.collapseToStart);\n      textRange.moveStart('character', info.offset);\n      return textRange;\n    };\n\n    /**\n     * Wrapped Range\n     *\n     * @constructor\n     * @param {Node} sc - start container\n     * @param {Number} so - start offset\n     * @param {Node} ec - end container\n     * @param {Number} eo - end offset\n     */\n    var WrappedRange = function (sc, so, ec, eo) {\n      this.sc = sc;\n      this.so = so;\n      this.ec = ec;\n      this.eo = eo;\n\n      // nativeRange: get nativeRange from sc, so, ec, eo\n      var nativeRange = function () {\n        if (agent.isW3CRangeSupport) {\n          var w3cRange = document.createRange();\n          w3cRange.setStart(sc, so);\n          w3cRange.setEnd(ec, eo);\n\n          return w3cRange;\n        } else {\n          var textRange = pointToTextRange({\n            node: sc,\n            offset: so\n          });\n\n          textRange.setEndPoint('EndToEnd', pointToTextRange({\n            node: ec,\n            offset: eo\n          }));\n\n          return textRange;\n        }\n      };\n\n      this.getPoints = function () {\n        return {\n          sc: sc,\n          so: so,\n          ec: ec,\n          eo: eo\n        };\n      };\n\n      this.getStartPoint = function () {\n        return {\n          node: sc,\n          offset: so\n        };\n      };\n\n      this.getEndPoint = function () {\n        return {\n          node: ec,\n          offset: eo\n        };\n      };\n\n      /**\n       * select update visible range\n       */\n      this.select = function () {\n        var nativeRng = nativeRange();\n        if (agent.isW3CRangeSupport) {\n          var selection = document.getSelection();\n          if (selection.rangeCount > 0) {\n            selection.removeAllRanges();\n          }\n          selection.addRange(nativeRng);\n        } else {\n          nativeRng.select();\n        }\n\n        return this;\n      };\n\n      /**\n       * @return {WrappedRange}\n       */\n      this.normalize = function () {\n\n        /**\n         * @param {BoundaryPoint} point\n         * @param {Boolean} isLeftToRight\n         * @return {BoundaryPoint}\n         */\n        var getVisiblePoint = function (point, isLeftToRight) {\n          if ((dom.isVisiblePoint(point) && !dom.isEdgePoint(point)) ||\n              (dom.isVisiblePoint(point) && dom.isRightEdgePoint(point) && !isLeftToRight) ||\n              (dom.isVisiblePoint(point) && dom.isLeftEdgePoint(point) && isLeftToRight) ||\n              (dom.isVisiblePoint(point) && dom.isBlock(point.node) && dom.isEmpty(point.node))) {\n            return point;\n          }\n\n          // point on block's edge\n          var block = dom.ancestor(point.node, dom.isBlock);\n          if (((dom.isLeftEdgePointOf(point, block) || dom.isVoid(dom.prevPoint(point).node)) && !isLeftToRight) ||\n              ((dom.isRightEdgePointOf(point, block) || dom.isVoid(dom.nextPoint(point).node)) && isLeftToRight)) {\n\n            // returns point already on visible point\n            if (dom.isVisiblePoint(point)) {\n              return point;\n            }\n            // reverse direction\n            isLeftToRight = !isLeftToRight;\n          }\n\n          var nextPoint = isLeftToRight ? dom.nextPointUntil(dom.nextPoint(point), dom.isVisiblePoint) :\n                                          dom.prevPointUntil(dom.prevPoint(point), dom.isVisiblePoint);\n          return nextPoint || point;\n        };\n\n        var endPoint = getVisiblePoint(this.getEndPoint(), false);\n        var startPoint = this.isCollapsed() ? endPoint : getVisiblePoint(this.getStartPoint(), true);\n\n        return new WrappedRange(\n          startPoint.node,\n          startPoint.offset,\n          endPoint.node,\n          endPoint.offset\n        );\n      };\n\n      /**\n       * returns matched nodes on range\n       *\n       * @param {Function} [pred] - predicate function\n       * @param {Object} [options]\n       * @param {Boolean} [options.includeAncestor]\n       * @param {Boolean} [options.fullyContains]\n       * @return {Node[]}\n       */\n      this.nodes = function (pred, options) {\n        pred = pred || func.ok;\n\n        var includeAncestor = options && options.includeAncestor;\n        var fullyContains = options && options.fullyContains;\n\n        // TODO compare points and sort\n        var startPoint = this.getStartPoint();\n        var endPoint = this.getEndPoint();\n\n        var nodes = [];\n        var leftEdgeNodes = [];\n\n        dom.walkPoint(startPoint, endPoint, function (point) {\n          if (dom.isEditable(point.node)) {\n            return;\n          }\n\n          var node;\n          if (fullyContains) {\n            if (dom.isLeftEdgePoint(point)) {\n              leftEdgeNodes.push(point.node);\n            }\n            if (dom.isRightEdgePoint(point) && list.contains(leftEdgeNodes, point.node)) {\n              node = point.node;\n            }\n          } else if (includeAncestor) {\n            node = dom.ancestor(point.node, pred);\n          } else {\n            node = point.node;\n          }\n\n          if (node && pred(node)) {\n            nodes.push(node);\n          }\n        }, true);\n\n        return list.unique(nodes);\n      };\n\n      /**\n       * returns commonAncestor of range\n       * @return {Element} - commonAncestor\n       */\n      this.commonAncestor = function () {\n        return dom.commonAncestor(sc, ec);\n      };\n\n      /**\n       * returns expanded range by pred\n       *\n       * @param {Function} pred - predicate function\n       * @return {WrappedRange}\n       */\n      this.expand = function (pred) {\n        var startAncestor = dom.ancestor(sc, pred);\n        var endAncestor = dom.ancestor(ec, pred);\n\n        if (!startAncestor && !endAncestor) {\n          return new WrappedRange(sc, so, ec, eo);\n        }\n\n        var boundaryPoints = this.getPoints();\n\n        if (startAncestor) {\n          boundaryPoints.sc = startAncestor;\n          boundaryPoints.so = 0;\n        }\n\n        if (endAncestor) {\n          boundaryPoints.ec = endAncestor;\n          boundaryPoints.eo = dom.nodeLength(endAncestor);\n        }\n\n        return new WrappedRange(\n          boundaryPoints.sc,\n          boundaryPoints.so,\n          boundaryPoints.ec,\n          boundaryPoints.eo\n        );\n      };\n\n      /**\n       * @param {Boolean} isCollapseToStart\n       * @return {WrappedRange}\n       */\n      this.collapse = function (isCollapseToStart) {\n        if (isCollapseToStart) {\n          return new WrappedRange(sc, so, sc, so);\n        } else {\n          return new WrappedRange(ec, eo, ec, eo);\n        }\n      };\n\n      /**\n       * splitText on range\n       */\n      this.splitText = function () {\n        var isSameContainer = sc === ec;\n        var boundaryPoints = this.getPoints();\n\n        if (dom.isText(ec) && !dom.isEdgePoint(this.getEndPoint())) {\n          ec.splitText(eo);\n        }\n\n        if (dom.isText(sc) && !dom.isEdgePoint(this.getStartPoint())) {\n          boundaryPoints.sc = sc.splitText(so);\n          boundaryPoints.so = 0;\n\n          if (isSameContainer) {\n            boundaryPoints.ec = boundaryPoints.sc;\n            boundaryPoints.eo = eo - so;\n          }\n        }\n\n        return new WrappedRange(\n          boundaryPoints.sc,\n          boundaryPoints.so,\n          boundaryPoints.ec,\n          boundaryPoints.eo\n        );\n      };\n\n      /**\n       * delete contents on range\n       * @return {WrappedRange}\n       */\n      this.deleteContents = function () {\n        if (this.isCollapsed()) {\n          return this;\n        }\n\n        var rng = this.splitText();\n        var nodes = rng.nodes(null, {\n          fullyContains: true\n        });\n\n        // find new cursor point\n        var point = dom.prevPointUntil(rng.getStartPoint(), function (point) {\n          return !list.contains(nodes, point.node);\n        });\n\n        var emptyParents = [];\n        $.each(nodes, function (idx, node) {\n          // find empty parents\n          var parent = node.parentNode;\n          if (point.node !== parent && dom.nodeLength(parent) === 1) {\n            emptyParents.push(parent);\n          }\n          dom.remove(node, false);\n        });\n\n        // remove empty parents\n        $.each(emptyParents, function (idx, node) {\n          dom.remove(node, false);\n        });\n\n        return new WrappedRange(\n          point.node,\n          point.offset,\n          point.node,\n          point.offset\n        ).normalize();\n      };\n\n      /**\n       * makeIsOn: return isOn(pred) function\n       */\n      var makeIsOn = function (pred) {\n        return function () {\n          var ancestor = dom.ancestor(sc, pred);\n          return !!ancestor && (ancestor === dom.ancestor(ec, pred));\n        };\n      };\n\n      // isOnEditable: judge whether range is on editable or not\n      this.isOnEditable = makeIsOn(dom.isEditable);\n      // isOnList: judge whether range is on list node or not\n      this.isOnList = makeIsOn(dom.isList);\n      // isOnAnchor: judge whether range is on anchor node or not\n      this.isOnAnchor = makeIsOn(dom.isAnchor);\n      // isOnAnchor: judge whether range is on cell node or not\n      this.isOnCell = makeIsOn(dom.isCell);\n\n      /**\n       * @param {Function} pred\n       * @return {Boolean}\n       */\n      this.isLeftEdgeOf = function (pred) {\n        if (!dom.isLeftEdgePoint(this.getStartPoint())) {\n          return false;\n        }\n\n        var node = dom.ancestor(this.sc, pred);\n        return node && dom.isLeftEdgeOf(this.sc, node);\n      };\n\n      /**\n       * returns whether range was collapsed or not\n       */\n      this.isCollapsed = function () {\n        return sc === ec && so === eo;\n      };\n\n      /**\n       * wrap inline nodes which children of body with paragraph\n       *\n       * @return {WrappedRange}\n       */\n      this.wrapBodyInlineWithPara = function () {\n        if (dom.isBodyContainer(sc) && dom.isEmpty(sc)) {\n          sc.innerHTML = dom.emptyPara;\n          return new WrappedRange(sc.firstChild, 0, sc.firstChild, 0);\n        }\n\n        /**\n         * [workaround] firefox often create range on not visible point. so normalize here.\n         *  - firefox: |<p>text</p>|\n         *  - chrome: <p>|text|</p>\n         */\n        var rng = this.normalize();\n        if (dom.isParaInline(sc) || dom.isPara(sc)) {\n          return rng;\n        }\n\n        // find inline top ancestor\n        var topAncestor;\n        if (dom.isInline(rng.sc)) {\n          var ancestors = dom.listAncestor(rng.sc, func.not(dom.isInline));\n          topAncestor = list.last(ancestors);\n          if (!dom.isInline(topAncestor)) {\n            topAncestor = ancestors[ancestors.length - 2] || rng.sc.childNodes[rng.so];\n          }\n        } else {\n          topAncestor = rng.sc.childNodes[rng.so > 0 ? rng.so - 1 : 0];\n        }\n\n        // siblings not in paragraph\n        var inlineSiblings = dom.listPrev(topAncestor, dom.isParaInline).reverse();\n        inlineSiblings = inlineSiblings.concat(dom.listNext(topAncestor.nextSibling, dom.isParaInline));\n\n        // wrap with paragraph\n        if (inlineSiblings.length) {\n          var para = dom.wrap(list.head(inlineSiblings), 'p');\n          dom.appendChildNodes(para, list.tail(inlineSiblings));\n        }\n\n        return this.normalize();\n      };\n\n      /**\n       * insert node at current cursor\n       *\n       * @param {Node} node\n       * @return {Node}\n       */\n      this.insertNode = function (node) {\n        var rng = this.wrapBodyInlineWithPara().deleteContents();\n        var info = dom.splitPoint(rng.getStartPoint(), dom.isInline(node));\n\n        if (info.rightNode) {\n          info.rightNode.parentNode.insertBefore(node, info.rightNode);\n        } else {\n          info.container.appendChild(node);\n        }\n\n        return node;\n      };\n\n      /**\n       * insert html at current cursor\n       */\n      this.pasteHTML = function (markup) {\n        var contentsContainer = $('<div></div>').html(markup)[0];\n        var childNodes = list.from(contentsContainer.childNodes);\n\n        var rng = this.wrapBodyInlineWithPara().deleteContents();\n\n        return childNodes.reverse().map(function (childNode) {\n          return rng.insertNode(childNode);\n        }).reverse();\n      };\n\n      /**\n       * returns text in range\n       *\n       * @return {String}\n       */\n      this.toString = function () {\n        var nativeRng = nativeRange();\n        return agent.isW3CRangeSupport ? nativeRng.toString() : nativeRng.text;\n      };\n\n      /**\n       * returns range for word before cursor\n       *\n       * @param {Boolean} [findAfter] - find after cursor, default: false\n       * @return {WrappedRange}\n       */\n      this.getWordRange = function (findAfter) {\n        var endPoint = this.getEndPoint();\n\n        if (!dom.isCharPoint(endPoint)) {\n          return this;\n        }\n\n        var startPoint = dom.prevPointUntil(endPoint, function (point) {\n          return !dom.isCharPoint(point);\n        });\n\n        if (findAfter) {\n          endPoint = dom.nextPointUntil(endPoint, function (point) {\n            return !dom.isCharPoint(point);\n          });\n        }\n\n        return new WrappedRange(\n          startPoint.node,\n          startPoint.offset,\n          endPoint.node,\n          endPoint.offset\n        );\n      };\n\n      /**\n       * create offsetPath bookmark\n       *\n       * @param {Node} editable\n       */\n      this.bookmark = function (editable) {\n        return {\n          s: {\n            path: dom.makeOffsetPath(editable, sc),\n            offset: so\n          },\n          e: {\n            path: dom.makeOffsetPath(editable, ec),\n            offset: eo\n          }\n        };\n      };\n\n      /**\n       * create offsetPath bookmark base on paragraph\n       *\n       * @param {Node[]} paras\n       */\n      this.paraBookmark = function (paras) {\n        return {\n          s: {\n            path: list.tail(dom.makeOffsetPath(list.head(paras), sc)),\n            offset: so\n          },\n          e: {\n            path: list.tail(dom.makeOffsetPath(list.last(paras), ec)),\n            offset: eo\n          }\n        };\n      };\n\n      /**\n       * getClientRects\n       * @return {Rect[]}\n       */\n      this.getClientRects = function () {\n        var nativeRng = nativeRange();\n        return nativeRng.getClientRects();\n      };\n    };\n\n  /**\n   * @class core.range\n   *\n   * Data structure\n   *  * BoundaryPoint: a point of dom tree\n   *  * BoundaryPoints: two boundaryPoints corresponding to the start and the end of the Range\n   *\n   * See to http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position\n   *\n   * @singleton\n   * @alternateClassName range\n   */\n    return {\n      /**\n       * @method\n       *\n       * create Range Object From arguments or Browser Selection\n       *\n       * @param {Node} sc - start container\n       * @param {Number} so - start offset\n       * @param {Node} ec - end container\n       * @param {Number} eo - end offset\n       * @return {WrappedRange}\n       */\n      create : function (sc, so, ec, eo) {\n        if (!arguments.length) { // from Browser Selection\n          if (agent.isW3CRangeSupport) {\n            var selection = document.getSelection();\n            if (!selection || selection.rangeCount === 0) {\n              return null;\n            } else if (dom.isBody(selection.anchorNode)) {\n              // Firefox: returns entire body as range on initialization. We won't never need it.\n              return null;\n            }\n\n            var nativeRng = selection.getRangeAt(0);\n            sc = nativeRng.startContainer;\n            so = nativeRng.startOffset;\n            ec = nativeRng.endContainer;\n            eo = nativeRng.endOffset;\n          } else { // IE8: TextRange\n            var textRange = document.selection.createRange();\n            var textRangeEnd = textRange.duplicate();\n            textRangeEnd.collapse(false);\n            var textRangeStart = textRange;\n            textRangeStart.collapse(true);\n\n            var startPoint = textRangeToPoint(textRangeStart, true),\n            endPoint = textRangeToPoint(textRangeEnd, false);\n\n            // same visible point case: range was collapsed.\n            if (dom.isText(startPoint.node) && dom.isLeftEdgePoint(startPoint) &&\n                dom.isTextNode(endPoint.node) && dom.isRightEdgePoint(endPoint) &&\n                endPoint.node.nextSibling === startPoint.node) {\n              startPoint = endPoint;\n            }\n\n            sc = startPoint.cont;\n            so = startPoint.offset;\n            ec = endPoint.cont;\n            eo = endPoint.offset;\n          }\n        } else if (arguments.length === 2) { //collapsed\n          ec = sc;\n          eo = so;\n        }\n        return new WrappedRange(sc, so, ec, eo);\n      },\n\n      /**\n       * @method\n       *\n       * create WrappedRange from node\n       *\n       * @param {Node} node\n       * @return {WrappedRange}\n       */\n      createFromNode: function (node) {\n        var sc = node;\n        var so = 0;\n        var ec = node;\n        var eo = dom.nodeLength(ec);\n\n        // browsers can't target a picture or void node\n        if (dom.isVoid(sc)) {\n          so = dom.listPrev(sc).length - 1;\n          sc = sc.parentNode;\n        }\n        if (dom.isBR(ec)) {\n          eo = dom.listPrev(ec).length - 1;\n          ec = ec.parentNode;\n        } else if (dom.isVoid(ec)) {\n          eo = dom.listPrev(ec).length;\n          ec = ec.parentNode;\n        }\n\n        return this.create(sc, so, ec, eo);\n      },\n\n      /**\n       * create WrappedRange from node after position\n       *\n       * @param {Node} node\n       * @return {WrappedRange}\n       */\n      createFromNodeBefore: function (node) {\n        return this.createFromNode(node).collapse(true);\n      },\n\n      /**\n       * create WrappedRange from node after position\n       *\n       * @param {Node} node\n       * @return {WrappedRange}\n       */\n      createFromNodeAfter: function (node) {\n        return this.createFromNode(node).collapse();\n      },\n\n      /**\n       * @method\n       *\n       * create WrappedRange from bookmark\n       *\n       * @param {Node} editable\n       * @param {Object} bookmark\n       * @return {WrappedRange}\n       */\n      createFromBookmark : function (editable, bookmark) {\n        var sc = dom.fromOffsetPath(editable, bookmark.s.path);\n        var so = bookmark.s.offset;\n        var ec = dom.fromOffsetPath(editable, bookmark.e.path);\n        var eo = bookmark.e.offset;\n        return new WrappedRange(sc, so, ec, eo);\n      },\n\n      /**\n       * @method\n       *\n       * create WrappedRange from paraBookmark\n       *\n       * @param {Object} bookmark\n       * @param {Node[]} paras\n       * @return {WrappedRange}\n       */\n      createFromParaBookmark: function (bookmark, paras) {\n        var so = bookmark.s.offset;\n        var eo = bookmark.e.offset;\n        var sc = dom.fromOffsetPath(list.head(paras), bookmark.s.path);\n        var ec = dom.fromOffsetPath(list.last(paras), bookmark.e.path);\n\n        return new WrappedRange(sc, so, ec, eo);\n      }\n    };\n  })();\n\n  /**\n   * @class defaults\n   *\n   * @singleton\n   */\n  var defaults = {\n    /** @property */\n    version: '0.6.17',\n\n    /**\n     *\n     * for event options, reference to EventHandler.attach\n     *\n     * @property {Object} options\n     * @property {String/Number} [options.width=null] set editor width\n     * @property {String/Number} [options.height=null] set editor height, ex) 300\n     * @property {String/Number} options.minHeight set minimum height of editor\n     * @property {String/Number} options.maxHeight\n     * @property {String/Number} options.focus\n     * @property {Number} options.tabsize\n     * @property {Boolean} options.styleWithSpan\n     * @property {Object} options.codemirror\n     * @property {Object} [options.codemirror.mode='text/html']\n     * @property {Object} [options.codemirror.htmlMode=true]\n     * @property {Object} [options.codemirror.lineNumbers=true]\n     * @property {String} [options.lang=en-US] language 'en-US', 'ko-KR', ...\n     * @property {String} [options.direction=null] text direction, ex) 'rtl'\n     * @property {Array} [options.toolbar]\n     * @property {Boolean} [options.airMode=false]\n     * @property {Array} [options.airPopover]\n     * @property {Fucntion} [options.onInit] initialize\n     * @property {Fucntion} [options.onsubmit]\n     */\n    options: {\n      width: null,                  // set editor width\n      height: null,                 // set editor height, ex) 300\n\n      minHeight: null,              // set minimum height of editor\n      maxHeight: null,              // set maximum height of editor\n\n      focus: false,                 // set focus to editable area after initializing summernote\n\n      tabsize: 4,                   // size of tab ex) 2 or 4\n      styleWithSpan: true,          // style with span (Chrome and FF only)\n\n      disableLinkTarget: false,     // hide link Target Checkbox\n      disableDragAndDrop: false,    // disable drag and drop event\n      disableResizeEditor: false,   // disable resizing editor\n      disableResizeImage: false,    // disable resizing image\n\n      shortcuts: true,              // enable keyboard shortcuts\n\n      placeholder: false,           // enable placeholder text\n      prettifyHtml: true,           // enable prettifying html while toggling codeview\n\n      iconPrefix: 'mbr-icon-',         // prefix for css icon classes\n\n      icons: {\n        font: {\n          bold: 'bold',\n          italic: 'italic',\n          underline: 'underline',\n          clear: 'eraser',\n          height: 'text-height',\n          strikethrough: 'strikethrough',\n          superscript: 'superscript',\n          subscript: 'subscript'\n        },\n        image: {\n          image: 'picture-o',\n          floatLeft: 'align-left',\n          floatRight: 'align-right',\n          floatNone: 'align-justify',\n          shapeRounded: 'square',\n          shapeCircle: 'circle-o',\n          shapeThumbnail: 'picture-o',\n          shapeNone: 'times',\n          remove: 'trash-o'\n        },\n        link: {\n          link: 'link',\n          unlink: 'unlink',\n          edit: 'edit2'\n        },\n        table: {\n          table: 'table'\n        },\n        hr: {\n          insert: 'minus'\n        },\n        style: {\n          style: 'magic-stick'\n        },\n        lists: {\n          unordered: 'bulleted-list',\n          ordered: 'numbered-list'\n        },\n        options: {\n          help: 'question',\n          fullscreen: 'arrows-alt',\n          codeview: 'code'\n        },\n        paragraph: {\n          paragraph: 'align-left',\n          outdent: 'outdent',\n          indent: 'indent',\n          left: 'align-left',\n          center: 'align-center',\n          right: 'align-right',\n          justify: 'align-justify'\n        },\n        color: {\n          recent: 'font'\n        },\n        history: {\n          undo: 'undo',\n          redo: 'repeat'\n        },\n        misc: {\n          check: 'check'\n        }\n      },\n\n      dialogsInBody: false,          // false will add dialogs into editor\n\n      codemirror: {                 // codemirror options\n        mode: 'text/html',\n        htmlMode: true,\n        lineNumbers: true\n      },\n\n      // language\n      lang: 'en-US',                // language 'en-US', 'ko-KR', ...\n      direction: null,              // text direction, ex) 'rtl'\n\n      // toolbar\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'italic', 'underline', 'clear']],\n        // ['font', ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['height', ['height']],\n        ['table', ['table']],\n        ['insert', ['link', 'picture', 'hr']],\n        ['view', ['fullscreen', 'codeview']],\n        ['help', ['help']]\n      ],\n\n      plugin : { },\n\n      // air mode: inline editor\n      airMode: false,\n      // airPopover: [\n      //   ['style', ['style']],\n      //   ['font', ['bold', 'italic', 'underline', 'clear']],\n      //   ['fontname', ['fontname']],\n      //   ['color', ['color']],\n      //   ['para', ['ul', 'ol', 'paragraph']],\n      //   ['height', ['height']],\n      //   ['table', ['table']],\n      //   ['insert', ['link', 'picture']],\n      //   ['help', ['help']]\n      // ],\n      airPopover: [\n        ['color', ['color']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['para', ['ul', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'picture']]\n      ],\n\n      // style tag\n      styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4'],\n\n      // default fontName\n      defaultFontName: 'Helvetica Neue',\n\n      // fontName\n      fontNames: [\n        'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',\n        'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',\n        'Tahoma', 'Times New Roman', 'Verdana'\n      ],\n      fontNamesIgnoreCheck: [],\n\n      fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\n\n      // pallete colors(n x n)\n      colors: [\n        ['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'],\n        ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],\n        ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],\n        ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],\n        ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],\n        ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],\n        ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],\n        ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']\n      ],\n\n      // lineHeight\n      lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],\n\n      // insertTable max size\n      insertTableMaxSize: {\n        col: 10,\n        row: 10\n      },\n\n      // image\n      maximumImageFileSize: null, // size in bytes, null = no limit\n\n      // callbacks\n      oninit: null,             // initialize\n      onfocus: null,            // editable has focus\n      onblur: null,             // editable out of focus\n      onenter: null,            // enter key pressed\n      onkeyup: null,            // keyup\n      onkeydown: null,          // keydown\n      onImageUpload: null,      // imageUpload\n      onImageUploadError: null, // imageUploadError\n      onMediaDelete: null,      // media delete\n      onToolbarClick: null,\n      onsubmit: null,\n\n      /**\n       * manipulate link address when user create link\n       * @param {String} sLinkUrl\n       * @return {String}\n       */\n      onCreateLink: function (sLinkUrl) {\n        if (sLinkUrl.indexOf('@') !== -1 && sLinkUrl.indexOf(':') === -1) {\n          sLinkUrl =  'mailto:' + sLinkUrl;\n        }\n\n        return sLinkUrl;\n      },\n\n      keyMap: {\n        pc: {\n          'ENTER': 'insertParagraph',\n          'CTRL+Z': 'undo',\n          'CTRL+Y': 'redo',\n          'TAB': 'tab',\n          'SHIFT+TAB': 'untab',\n          'CTRL+B': 'bold',\n          'CTRL+I': 'italic',\n          'CTRL+U': 'underline',\n          'CTRL+SHIFT+S': 'strikethrough',\n          'CTRL+BACKSLASH': 'removeFormat',\n          'CTRL+SHIFT+L': 'justifyLeft',\n          'CTRL+SHIFT+E': 'justifyCenter',\n          'CTRL+SHIFT+R': 'justifyRight',\n          'CTRL+SHIFT+J': 'justifyFull',\n          'CTRL+SHIFT+NUM7': 'insertUnorderedList',\n          'CTRL+SHIFT+NUM8': 'insertOrderedList',\n          'CTRL+LEFTBRACKET': 'outdent',\n          'CTRL+RIGHTBRACKET': 'indent',\n          'CTRL+ENTER': 'insertHorizontalRule'\n        },\n\n        mac: {\n          'ENTER': 'insertParagraph',\n          'CMD+Z': 'undo',\n          'CMD+SHIFT+Z': 'redo',\n          'TAB': 'tab',\n          'SHIFT+TAB': 'untab',\n          'CMD+B': 'bold',\n          'CMD+I': 'italic',\n          'CMD+U': 'underline',\n          'CMD+SHIFT+S': 'strikethrough',\n          'CMD+BACKSLASH': 'removeFormat',\n          'CMD+SHIFT+L': 'justifyLeft',\n          'CMD+SHIFT+E': 'justifyCenter',\n          'CMD+SHIFT+R': 'justifyRight',\n          'CMD+SHIFT+J': 'justifyFull',\n          'CMD+SHIFT+NUM7': 'insertUnorderedList',\n          'CMD+SHIFT+NUM8': 'insertOrderedList',\n          'CMD+LEFTBRACKET': 'outdent',\n          'CMD+RIGHTBRACKET': 'indent',\n          'CMD+ENTER': 'insertHorizontalRule',\n          'CMD+V': 'paste'\n        }\n      }\n    },\n\n    // default language: en-US\n    lang: {\n      'en-US': {\n        font: {\n          bold: 'Bold',\n          italic: 'Italic',\n          underline: 'Underline',\n          clear: 'Remove Font Style',\n          height: 'Line Height',\n          name: 'Font Family',\n          strikethrough: 'Strikethrough',\n          subscript: 'Subscript',\n          superscript: 'Superscript',\n          size: 'Font Size'\n        },\n        image: {\n          image: 'Picture',\n          insert: 'Insert Image',\n          resizeFull: 'Resize Full',\n          resizeHalf: 'Resize Half',\n          resizeQuarter: 'Resize Quarter',\n          floatLeft: 'Float Left',\n          floatRight: 'Float Right',\n          floatNone: 'Float None',\n          shapeRounded: 'Shape: Rounded',\n          shapeCircle: 'Shape: Circle',\n          shapeThumbnail: 'Shape: Thumbnail',\n          shapeNone: 'Shape: None',\n          dragImageHere: 'Drag image or text here',\n          dropImage: 'Drop image or Text',\n          selectFromFiles: 'Select from files',\n          maximumFileSize: 'Maximum file size',\n          maximumFileSizeError: 'Maximum file size exceeded.',\n          url: 'Image URL',\n          remove: 'Remove Image'\n        },\n        link: {\n          link: 'Link',\n          insert: 'Insert Link',\n          unlink: 'Unlink',\n          edit: 'Edit',\n          textToDisplay: 'Text to display',\n          url: 'To what URL should this link go?',\n          openInNewWindow: 'Open in new window'\n        },\n        table: {\n          table: 'Table'\n        },\n        hr: {\n          insert: 'Insert Horizontal Rule'\n        },\n        style: {\n          style: 'Style',\n          normal: 'Normal',\n          blockquote: 'Quote',\n          pre: 'Code',\n          h1: 'Header 1',\n          h2: 'Header 2',\n          h3: 'Header 3',\n          h4: 'Header 4',\n          h5: 'Header 5',\n          h6: 'Header 6'\n        },\n        lists: {\n          unordered: 'Unordered list',\n          ordered: 'Ordered list'\n        },\n        options: {\n          help: 'Help',\n          fullscreen: 'Full Screen',\n          codeview: 'Code View'\n        },\n        paragraph: {\n          paragraph: 'Paragraph',\n          outdent: 'Outdent',\n          indent: 'Indent',\n          left: 'Align left',\n          center: 'Align center',\n          right: 'Align right',\n          justify: 'Justify full'\n        },\n        color: {\n          recent: 'Recent Color',\n          more: 'More Color',\n          background: 'Background Color',\n          foreground: 'Foreground Color',\n          transparent: 'Transparent',\n          setTransparent: 'Set transparent',\n          reset: 'Reset',\n          resetToDefault: 'Reset to default'\n        },\n        shortcut: {\n          shortcuts: 'Keyboard shortcuts',\n          close: 'Close',\n          textFormatting: 'Text formatting',\n          action: 'Action',\n          paragraphFormatting: 'Paragraph formatting',\n          documentStyle: 'Document Style',\n          extraKeys: 'Extra keys'\n        },\n        history: {\n          undo: 'Undo',\n          redo: 'Redo'\n        }\n      }\n    }\n  };\n\n  /**\n   * @class core.async\n   *\n   * Async functions which returns `Promise`\n   *\n   * @singleton\n   * @alternateClassName async\n   */\n  var async = (function () {\n    /**\n     * @method readFileAsDataURL\n     *\n     * read contents of file as representing URL\n     *\n     * @param {File} file\n     * @return {Promise} - then: sDataUrl\n     */\n    var readFileAsDataURL = function (file) {\n      return $.Deferred(function (deferred) {\n        $.extend(new FileReader(), {\n          onload: function (e) {\n            var sDataURL = e.target.result;\n            deferred.resolve(sDataURL);\n          },\n          onerror: function () {\n            deferred.reject(this);\n          }\n        }).readAsDataURL(file);\n      }).promise();\n    };\n\n    /**\n     * @method createImage\n     *\n     * create `<image>` from url string\n     *\n     * @param {String} sUrl\n     * @param {String} filename\n     * @return {Promise} - then: $image\n     */\n    var createImage = function (sUrl, filename) {\n      return $.Deferred(function (deferred) {\n        var $img = $('<img>');\n\n        $img.one('load', function () {\n          $img.off('error abort');\n          deferred.resolve($img);\n        }).one('error abort', function () {\n          $img.off('load').detach();\n          deferred.reject($img);\n        }).css({\n          display: 'none'\n        }).appendTo(document.body).attr({\n          'src': sUrl,\n          'data-filename': filename\n        });\n      }).promise();\n    };\n\n    return {\n      readFileAsDataURL: readFileAsDataURL,\n      createImage: createImage\n    };\n  })();\n\n  /**\n   * @class core.key\n   *\n   * Object for keycodes.\n   *\n   * @singleton\n   * @alternateClassName key\n   */\n  var key = (function () {\n    var keyMap = {\n      'BACKSPACE': 8,\n      'TAB': 9,\n      'ENTER': 13,\n      'SPACE': 32,\n\n      // Arrow\n      'LEFT': 37,\n      'UP': 38,\n      'RIGHT': 39,\n      'DOWN': 40,\n\n      // Number: 0-9\n      'NUM0': 48,\n      'NUM1': 49,\n      'NUM2': 50,\n      'NUM3': 51,\n      'NUM4': 52,\n      'NUM5': 53,\n      'NUM6': 54,\n      'NUM7': 55,\n      'NUM8': 56,\n\n      // Alphabet: a-z\n      'B': 66,\n      'E': 69,\n      'I': 73,\n      'J': 74,\n      'K': 75,\n      'L': 76,\n      'R': 82,\n      'S': 83,\n      'U': 85,\n      'V': 86,\n      'Y': 89,\n      'Z': 90,\n\n      'SLASH': 191,\n      'LEFTBRACKET': 219,\n      'BACKSLASH': 220,\n      'RIGHTBRACKET': 221\n    };\n\n    return {\n      /**\n       * @method isEdit\n       *\n       * @param {Number} keyCode\n       * @return {Boolean}\n       */\n      isEdit: function (keyCode) {\n        return list.contains([\n          keyMap.BACKSPACE,\n          keyMap.TAB,\n          keyMap.ENTER,\n          keyMap.SPACe\n        ], keyCode);\n      },\n      /**\n       * @method isMove\n       *\n       * @param {Number} keyCode\n       * @return {Boolean}\n       */\n      isMove: function (keyCode) {\n        return list.contains([\n          keyMap.LEFT,\n          keyMap.UP,\n          keyMap.RIGHT,\n          keyMap.DOWN\n        ], keyCode);\n      },\n      /**\n       * @property {Object} nameFromCode\n       * @property {String} nameFromCode.8 \"BACKSPACE\"\n       */\n      nameFromCode: func.invertObject(keyMap),\n      code: keyMap\n    };\n  })();\n\n  /**\n   * @class editing.History\n   *\n   * Editor History\n   *\n   */\n  var History = function ($editable) {\n    var stack = [], stackOffset = -1;\n    var editable = $editable[0];\n\n    var makeSnapshot = function () {\n      var rng = range.create();\n      var emptyBookmark = {s: {path: [], offset: 0}, e: {path: [], offset: 0}};\n\n      return {\n        contents: $editable.html(),\n        bookmark: (rng ? rng.bookmark(editable) : emptyBookmark)\n      };\n    };\n\n    var applySnapshot = function (snapshot) {\n      if (snapshot.contents !== null) {\n        $editable.html(snapshot.contents);\n      }\n      if (snapshot.bookmark !== null) {\n        range.createFromBookmark(editable, snapshot.bookmark).select();\n      }\n    };\n\n    /**\n     * undo\n     */\n    this.undo = function () {\n      // Create snap shot if not yet recorded\n      if ($editable.html() !== stack[stackOffset].contents) {\n        this.recordUndo();\n      }\n\n      if (0 < stackOffset) {\n        stackOffset--;\n        applySnapshot(stack[stackOffset]);\n      }\n    };\n\n    /**\n     * redo\n     */\n    this.redo = function () {\n      if (stack.length - 1 > stackOffset) {\n        stackOffset++;\n        applySnapshot(stack[stackOffset]);\n      }\n    };\n\n    /**\n     * recorded undo\n     */\n    this.recordUndo = function () {\n      stackOffset++;\n\n      // Wash out stack after stackOffset\n      if (stack.length > stackOffset) {\n        stack = stack.slice(0, stackOffset);\n      }\n\n      // Create new snapshot and push it to the end\n      stack.push(makeSnapshot());\n    };\n\n    // Create first undo stack\n    this.recordUndo();\n  };\n\n  /**\n   * @class editing.Style\n   *\n   * Style\n   *\n   */\n  var Style = function () {\n    /**\n     * @method jQueryCSS\n     *\n     * [workaround] for old jQuery\n     * passing an array of style properties to .css()\n     * will result in an object of property-value pairs.\n     * (compability with version < 1.9)\n     *\n     * @private\n     * @param  {jQuery} $obj\n     * @param  {Array} propertyNames - An array of one or more CSS properties.\n     * @return {Object}\n     */\n    var jQueryCSS = function ($obj, propertyNames) {\n      if (agent.jqueryVersion < 1.9) {\n        var result = {};\n        $.each(propertyNames, function (idx, propertyName) {\n          result[propertyName] = $obj.css(propertyName);\n        });\n        return result;\n      }\n      return $obj.css.call($obj, propertyNames);\n    };\n\n    /**\n     * returns style object from node\n     *\n     * @param {jQuery} $node\n     * @return {Object}\n     */\n    this.fromNode = function ($node) {\n      var properties = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height'];\n      var styleInfo = jQueryCSS($node, properties) || {};\n      styleInfo['font-size'] = parseInt(styleInfo['font-size'], 10);\n      return styleInfo;\n    };\n\n    /**\n     * paragraph level style\n     *\n     * @param {WrappedRange} rng\n     * @param {Object} styleInfo\n     */\n    this.stylePara = function (rng, styleInfo) {\n      $.each(rng.nodes(dom.isPara, {\n        includeAncestor: true\n      }), function (idx, para) {\n        $(para).css(styleInfo);\n      });\n    };\n\n    /**\n     * insert and returns styleNodes on range.\n     *\n     * @param {WrappedRange} rng\n     * @param {Object} [options] - options for styleNodes\n     * @param {String} [options.nodeName] - default: `SPAN`\n     * @param {Boolean} [options.expandClosestSibling] - default: `false`\n     * @param {Boolean} [options.onlyPartialContains] - default: `false`\n     * @return {Node[]}\n     */\n    this.styleNodes = function (rng, options) {\n      rng = rng.splitText();\n\n      var nodeName = options && options.nodeName || 'SPAN';\n      var expandClosestSibling = !!(options && options.expandClosestSibling);\n      var onlyPartialContains = !!(options && options.onlyPartialContains);\n\n      if (rng.isCollapsed()) {\n        return [rng.insertNode(dom.create(nodeName))];\n      }\n\n      var pred = dom.makePredByNodeName(nodeName);\n      var nodes = rng.nodes(dom.isText, {\n        fullyContains: true\n      }).map(function (text) {\n        return dom.singleChildAncestor(text, pred) || dom.wrap(text, nodeName);\n      });\n\n      if (expandClosestSibling) {\n        if (onlyPartialContains) {\n          var nodesInRange = rng.nodes();\n          // compose with partial contains predication\n          pred = func.and(pred, function (node) {\n            return list.contains(nodesInRange, node);\n          });\n        }\n\n        return nodes.map(function (node) {\n          var siblings = dom.withClosestSiblings(node, pred);\n          var head = list.head(siblings);\n          var tails = list.tail(siblings);\n          $.each(tails, function (idx, elem) {\n            dom.appendChildNodes(head, elem.childNodes);\n            dom.remove(elem);\n          });\n          return list.head(siblings);\n        });\n      } else {\n        return nodes;\n      }\n    };\n\n    /**\n     * get current style on cursor\n     *\n     * @param {WrappedRange} rng\n     * @return {Object} - object contains style properties.\n     */\n    this.current = function (rng) {\n      var $cont = $(dom.isText(rng.sc) ? rng.sc.parentNode : rng.sc);\n      var styleInfo = this.fromNode($cont);\n\n      // document.queryCommandState for toggle state\n      styleInfo['font-bold'] = document.queryCommandState('bold') ? 'bold' : 'normal';\n      styleInfo['font-italic'] = document.queryCommandState('italic') ? 'italic' : 'normal';\n      styleInfo['font-underline'] = document.queryCommandState('underline') ? 'underline' : 'normal';\n      styleInfo['font-strikethrough'] = document.queryCommandState('strikeThrough') ? 'strikethrough' : 'normal';\n      styleInfo['font-superscript'] = document.queryCommandState('superscript') ? 'superscript' : 'normal';\n      styleInfo['font-subscript'] = document.queryCommandState('subscript') ? 'subscript' : 'normal';\n\n      // list-style-type to list-style(unordered, ordered)\n      if (!rng.isOnList()) {\n        styleInfo['list-style'] = 'none';\n      } else {\n        var aOrderedType = ['circle', 'disc', 'disc-leading-zero', 'square'];\n        var isUnordered = $.inArray(styleInfo['list-style-type'], aOrderedType) > -1;\n        styleInfo['list-style'] = isUnordered ? 'unordered' : 'ordered';\n      }\n\n      var para = dom.ancestor(rng.sc, dom.isPara);\n      if (para && para.style['line-height']) {\n        styleInfo['line-height'] = para.style.lineHeight;\n      } else {\n        var lineHeight = parseInt(styleInfo['line-height'], 10) / parseInt(styleInfo['font-size'], 10);\n        styleInfo['line-height'] = lineHeight.toFixed(1);\n      }\n\n      styleInfo.anchor = rng.isOnAnchor() && dom.ancestor(rng.sc, dom.isAnchor);\n      styleInfo.ancestors = dom.listAncestor(rng.sc, dom.isEditable);\n      styleInfo.range = rng;\n\n      return styleInfo;\n    };\n  };\n\n\n  /**\n   * @class editing.Bullet\n   *\n   * @alternateClassName Bullet\n   */\n  var Bullet = function () {\n    /**\n     * @method insertOrderedList\n     *\n     * toggle ordered list\n     *\n     * @type command\n     */\n    this.insertOrderedList = function () {\n      this.toggleList('OL');\n    };\n\n    /**\n     * @method insertUnorderedList\n     *\n     * toggle unordered list\n     *\n     * @type command\n     */\n    this.insertUnorderedList = function () {\n      this.toggleList('UL');\n    };\n\n    /**\n     * @method indent\n     *\n     * indent\n     *\n     * @type command\n     */\n    this.indent = function () {\n      var self = this;\n      var rng = range.create().wrapBodyInlineWithPara();\n\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));\n\n      $.each(clustereds, function (idx, paras) {\n        var head = list.head(paras);\n        if (dom.isLi(head)) {\n          self.wrapList(paras, head.parentNode.nodeName);\n        } else {\n          $.each(paras, function (idx, para) {\n            $(para).css('marginLeft', function (idx, val) {\n              return (parseInt(val, 10) || 0) + 25;\n            });\n          });\n        }\n      });\n\n      rng.select();\n    };\n\n    /**\n     * @method outdent\n     *\n     * outdent\n     *\n     * @type command\n     */\n    this.outdent = function () {\n      var self = this;\n      var rng = range.create().wrapBodyInlineWithPara();\n\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));\n\n      $.each(clustereds, function (idx, paras) {\n        var head = list.head(paras);\n        if (dom.isLi(head)) {\n          self.releaseList([paras]);\n        } else {\n          $.each(paras, function (idx, para) {\n            $(para).css('marginLeft', function (idx, val) {\n              val = (parseInt(val, 10) || 0);\n              return val > 25 ? val - 25 : '';\n            });\n          });\n        }\n      });\n\n      rng.select();\n    };\n\n    /**\n     * @method toggleList\n     *\n     * toggle list\n     *\n     * @param {String} listName - OL or UL\n     */\n    this.toggleList = function (listName) {\n      var self = this;\n      var rng = range.create().wrapBodyInlineWithPara();\n\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });\n      var bookmark = rng.paraBookmark(paras);\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));\n\n      // paragraph to list\n      if (list.find(paras, dom.isPurePara)) {\n        var wrappedParas = [];\n        $.each(clustereds, function (idx, paras) {\n          wrappedParas = wrappedParas.concat(self.wrapList(paras, listName));\n        });\n        paras = wrappedParas;\n      // list to paragraph or change list style\n      } else {\n        var diffLists = rng.nodes(dom.isList, {\n          includeAncestor: true\n        }).filter(function (listNode) {\n          return !$.nodeName(listNode, listName);\n        });\n\n        if (diffLists.length) {\n          $.each(diffLists, function (idx, listNode) {\n            dom.replace(listNode, listName);\n          });\n        } else {\n          paras = this.releaseList(clustereds, true);\n        }\n      }\n\n      range.createFromParaBookmark(bookmark, paras).select();\n    };\n\n    /**\n     * @method wrapList\n     *\n     * @param {Node[]} paras\n     * @param {String} listName\n     * @return {Node[]}\n     */\n    this.wrapList = function (paras, listName) {\n      var head = list.head(paras);\n      var last = list.last(paras);\n\n      var prevList = dom.isList(head.previousSibling) && head.previousSibling;\n      var nextList = dom.isList(last.nextSibling) && last.nextSibling;\n\n      var listNode = prevList || dom.insertAfter(dom.create(listName || 'UL'), last);\n\n      // P to LI\n      paras = paras.map(function (para) {\n        return dom.isPurePara(para) ? dom.replace(para, 'LI') : para;\n      });\n\n      // append to list(<ul>, <ol>)\n      dom.appendChildNodes(listNode, paras);\n\n      if (nextList) {\n        dom.appendChildNodes(listNode, list.from(nextList.childNodes));\n        dom.remove(nextList);\n      }\n\n      return paras;\n    };\n\n    /**\n     * @method releaseList\n     *\n     * @param {Array[]} clustereds\n     * @param {Boolean} isEscapseToBody\n     * @return {Node[]}\n     */\n    this.releaseList = function (clustereds, isEscapseToBody) {\n      var releasedParas = [];\n\n      $.each(clustereds, function (idx, paras) {\n        var head = list.head(paras);\n        var last = list.last(paras);\n\n        var headList = isEscapseToBody ? dom.lastAncestor(head, dom.isList) :\n                                         head.parentNode;\n        var lastList = headList.childNodes.length > 1 ? dom.splitTree(headList, {\n          node: last.parentNode,\n          offset: dom.position(last) + 1\n        }, {\n          isSkipPaddingBlankHTML: true\n        }) : null;\n\n        var middleList = dom.splitTree(headList, {\n          node: head.parentNode,\n          offset: dom.position(head)\n        }, {\n          isSkipPaddingBlankHTML: true\n        });\n\n        paras = isEscapseToBody ? dom.listDescendant(middleList, dom.isLi) :\n                                  list.from(middleList.childNodes).filter(dom.isLi);\n\n        // LI to P\n        if (isEscapseToBody || !dom.isList(headList.parentNode)) {\n          paras = paras.map(function (para) {\n            return dom.replace(para, 'P');\n          });\n        }\n\n        $.each(list.from(paras).reverse(), function (idx, para) {\n          dom.insertAfter(para, headList);\n        });\n\n        // remove empty lists\n        var rootLists = list.compact([headList, middleList, lastList]);\n        $.each(rootLists, function (idx, rootList) {\n          var listNodes = [rootList].concat(dom.listDescendant(rootList, dom.isList));\n          $.each(listNodes.reverse(), function (idx, listNode) {\n            if (!dom.nodeLength(listNode)) {\n              dom.remove(listNode, true);\n            }\n          });\n        });\n\n        releasedParas = releasedParas.concat(paras);\n      });\n\n      return releasedParas;\n    };\n  };\n\n\n  /**\n   * @class editing.Typing\n   *\n   * Typing\n   *\n   */\n  var Typing = function () {\n\n    // a Bullet instance to toggle lists off\n    var bullet = new Bullet();\n\n    /**\n     * insert tab\n     *\n     * @param {jQuery} $editable\n     * @param {WrappedRange} rng\n     * @param {Number} tabsize\n     */\n    this.insertTab = function ($editable, rng, tabsize) {\n      var tab = dom.createText(new Array(tabsize + 1).join(dom.NBSP_CHAR));\n      rng = rng.deleteContents();\n      rng.insertNode(tab, true);\n\n      rng = range.create(tab, tabsize);\n      rng.select();\n    };\n\n    /**\n     * insert paragraph\n     */\n    this.insertParagraph = function () {\n      var rng = range.create();\n\n      // deleteContents on range.\n      rng = rng.deleteContents();\n\n      // Wrap range if it needs to be wrapped by paragraph\n      rng = rng.wrapBodyInlineWithPara();\n\n      // finding paragraph\n      var splitRoot = dom.ancestor(rng.sc, dom.isPara);\n\n      var nextPara;\n      // on paragraph: split paragraph\n      if (splitRoot) {\n        // if it is an empty line with li\n        if (dom.isEmpty(splitRoot) && dom.isLi(splitRoot)) {\n          // disable UL/OL and escape!\n          bullet.toggleList(splitRoot.parentNode.nodeName);\n          return;\n        // if new line has content (not a line break)\n        } else {\n          nextPara = dom.splitTree(splitRoot, rng.getStartPoint());\n\n          var emptyAnchors = dom.listDescendant(splitRoot, dom.isEmptyAnchor);\n          emptyAnchors = emptyAnchors.concat(dom.listDescendant(nextPara, dom.isEmptyAnchor));\n\n          $.each(emptyAnchors, function (idx, anchor) {\n            dom.remove(anchor);\n          });\n        }\n      // no paragraph: insert empty paragraph\n      } else {\n        var next = rng.sc.childNodes[rng.so];\n        nextPara = $(dom.emptyPara)[0];\n        if (next) {\n          rng.sc.insertBefore(nextPara, next);\n        } else {\n          rng.sc.appendChild(nextPara);\n        }\n      }\n\n      range.create(nextPara, 0).normalize().select();\n\n    };\n\n  };\n\n  /**\n   * @class editing.Table\n   *\n   * Table\n   *\n   */\n  var Table = function () {\n    /**\n     * handle tab key\n     *\n     * @param {WrappedRange} rng\n     * @param {Boolean} isShift\n     */\n    this.tab = function (rng, isShift) {\n      var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n      var table = dom.ancestor(cell, dom.isTable);\n      var cells = dom.listDescendant(table, dom.isCell);\n\n      var nextCell = list[isShift ? 'prev' : 'next'](cells, cell);\n      if (nextCell) {\n        range.create(nextCell, 0).select();\n      }\n    };\n\n    /**\n     * create empty table element\n     *\n     * @param {Number} rowCount\n     * @param {Number} colCount\n     * @return {Node}\n     */\n    this.createTable = function (colCount, rowCount) {\n      var tds = [], tdHTML;\n      for (var idxCol = 0; idxCol < colCount; idxCol++) {\n        tds.push('<td>' + dom.blank + '</td>');\n      }\n      tdHTML = tds.join('');\n\n      var trs = [], trHTML;\n      for (var idxRow = 0; idxRow < rowCount; idxRow++) {\n        trs.push('<tr>' + tdHTML + '</tr>');\n      }\n      trHTML = trs.join('');\n      return $('<table class=\"table table-bordered\">' + trHTML + '</table>')[0];\n    };\n  };\n\n\n  var KEY_BOGUS = 'bogus';\n\n  /**\n   * @class editing.Editor\n   *\n   * Editor\n   *\n   */\n  var Editor = function (handler) {\n\n    var self = this;\n    var style = new Style();\n    var table = new Table();\n    var typing = new Typing();\n    var bullet = new Bullet();\n\n    /**\n     * @method createRange\n     *\n     * create range\n     *\n     * @param {jQuery} $editable\n     * @return {WrappedRange}\n     */\n    this.createRange = function ($editable) {\n      this.focus($editable);\n      return range.create();\n    };\n\n    /**\n     * @method saveRange\n     *\n     * save current range\n     *\n     * @param {jQuery} $editable\n     * @param {Boolean} [thenCollapse=false]\n     */\n    this.saveRange = function ($editable, thenCollapse) {\n      this.focus($editable);\n      $editable.data('range', range.create());\n      if (thenCollapse) {\n        range.create().collapse().select();\n      }\n    };\n\n    /**\n     * @method saveRange\n     *\n     * save current node list to $editable.data('childNodes')\n     *\n     * @param {jQuery} $editable\n     */\n    this.saveNode = function ($editable) {\n      // copy child node reference\n      var copy = [];\n      for (var key  = 0, len = $editable[0].childNodes.length; key < len; key++) {\n        copy.push($editable[0].childNodes[key]);\n      }\n      $editable.data('childNodes', copy);\n    };\n\n    /**\n     * @method restoreRange\n     *\n     * restore lately range\n     *\n     * @param {jQuery} $editable\n     */\n    this.restoreRange = function ($editable) {\n      var rng = $editable.data('range');\n      if (rng) {\n        rng.select();\n        this.focus($editable);\n      }\n    };\n\n    /**\n     * @method restoreNode\n     *\n     * restore lately node list\n     *\n     * @param {jQuery} $editable\n     */\n    this.restoreNode = function ($editable) {\n      $editable.html('');\n      var child = $editable.data('childNodes');\n      for (var index = 0, len = child.length; index < len; index++) {\n        $editable[0].appendChild(child[index]);\n      }\n    };\n\n    /**\n     * @method currentStyle\n     *\n     * current style\n     *\n     * @param {Node} target\n     * @return {Object|Boolean} unfocus\n     */\n    this.currentStyle = function (target) {\n      var rng = range.create(); // init original editable range\n\n      // if no range found, then create range from target\n      if (!rng || !rng.isOnEditable()){\n          var domTarget = $(target).get(0);\n          rng = range.create(domTarget,0, domTarget,0);\n      }\n\n      var styleInfo =  rng && rng.isOnEditable() ? style.current(rng.normalize()) : {};\n      if (dom.isImg(target)) {\n        styleInfo.image = target;\n      }\n      return styleInfo;\n    };\n\n    /**\n     * style from node\n     *\n     * @param {jQuery} $node\n     * @return {Object}\n     */\n    this.styleFromNode = function ($node) {\n      return style.fromNode($node);\n    };\n\n    var triggerOnBeforeChange = function ($editable) {\n      var $holder = dom.makeLayoutInfo($editable).holder();\n      handler.bindCustomEvent(\n        $holder, $editable.data('callbacks'), 'before.command'\n      )($editable.html(), $editable);\n    };\n\n    var triggerOnChange = function ($editable) {\n      var $holder = dom.makeLayoutInfo($editable).holder();\n      handler.bindCustomEvent(\n        $holder, $editable.data('callbacks'), 'change'\n      )($editable.html(), $editable);\n    };\n\n    /**\n     * @method undo\n     * undo\n     * @param {jQuery} $editable\n     */\n    this.undo = function ($editable) {\n      triggerOnBeforeChange($editable);\n      $editable.data('NoteHistory').undo();\n      triggerOnChange($editable);\n    };\n\n    /**\n     * @method redo\n     * redo\n     * @param {jQuery} $editable\n     */\n    this.redo = function ($editable) {\n      triggerOnBeforeChange($editable);\n      $editable.data('NoteHistory').redo();\n      triggerOnChange($editable);\n    };\n\n    /**\n     * @method beforeCommand\n     * before command\n     * @param {jQuery} $editable\n     */\n    var beforeCommand = this.beforeCommand = function ($editable) {\n      triggerOnBeforeChange($editable);\n      // keep focus on editable before command execution\n      self.focus($editable);\n    };\n\n    /**\n     * @method afterCommand\n     * after command\n     * @param {jQuery} $editable\n     * @param {Boolean} isPreventTrigger\n     */\n    var afterCommand = this.afterCommand = function ($editable, isPreventTrigger) {\n      $editable.data('NoteHistory').recordUndo();\n      if (!isPreventTrigger) {\n        triggerOnChange($editable);\n      }\n    };\n\n    /**\n     * @method bold\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method italic\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method underline\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method strikethrough\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method formatBlock\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method superscript\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method subscript\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method justifyLeft\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method justifyCenter\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method justifyRight\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method justifyFull\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method formatBlock\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method removeFormat\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method backColor\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method foreColor\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method insertHorizontalRule\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /**\n     * @method fontName\n     *\n     * change font name\n     *\n     * @param {jQuery} $editable\n     * @param {Mixed} value\n     */\n\n    /* jshint ignore:start */\n    // native commands(with execCommand), generate function for execCommand\n    var commands = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript',\n                    'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull',\n                    'formatBlock', 'removeFormat',\n                    'backColor', 'foreColor', 'fontName'];\n\n    for (var idx = 0, len = commands.length; idx < len; idx ++) {\n      this[commands[idx]] = (function (sCmd) {\n        return function ($editable, value) {\n          beforeCommand($editable);\n\n          document.execCommand(sCmd, false, value);\n\n          afterCommand($editable, true);\n        };\n      })(commands[idx]);\n    }\n    /* jshint ignore:end */\n\n    /**\n     * @method tab\n     *\n     * handle tab key\n     *\n     * @param {jQuery} $editable\n     * @param {Object} options\n     */\n    this.tab = function ($editable, options) {\n      var rng = this.createRange($editable);\n      if (rng.isCollapsed() && rng.isOnCell()) {\n        table.tab(rng);\n      } else {\n        beforeCommand($editable);\n        typing.insertTab($editable, rng, options.tabsize);\n        afterCommand($editable);\n      }\n    };\n\n    /**\n     * @method untab\n     *\n     * handle shift+tab key\n     *\n     */\n    this.untab = function ($editable) {\n      var rng = this.createRange($editable);\n      if (rng.isCollapsed() && rng.isOnCell()) {\n        table.tab(rng, true);\n      }\n    };\n\n    /**\n     * @method insertParagraph\n     *\n     * insert paragraph\n     *\n     * @param {Node} $editable\n     */\n    this.insertParagraph = function ($editable) {\n      beforeCommand($editable);\n      typing.insertParagraph($editable);\n      afterCommand($editable);\n    };\n\n    /**\n     * @method insertOrderedList\n     *\n     * @param {jQuery} $editable\n     */\n    this.insertOrderedList = function ($editable) {\n      beforeCommand($editable);\n      bullet.insertOrderedList($editable);\n      afterCommand($editable);\n    };\n\n    /**\n     * @param {jQuery} $editable\n     */\n    this.insertUnorderedList = function ($editable) {\n      beforeCommand($editable);\n      bullet.insertUnorderedList($editable);\n      afterCommand($editable);\n    };\n\n    /**\n     * @param {jQuery} $editable\n     */\n    this.indent = function ($editable) {\n      beforeCommand($editable);\n      bullet.indent($editable);\n      afterCommand($editable);\n    };\n\n    /**\n     * @param {jQuery} $editable\n     */\n    this.outdent = function ($editable) {\n      beforeCommand($editable);\n      bullet.outdent($editable);\n      afterCommand($editable);\n    };\n\n    /**\n     * insert image\n     *\n     * @param {jQuery} $editable\n     * @param {String} sUrl\n     */\n    this.insertImage = function ($editable, sUrl, filename) {\n      async.createImage(sUrl, filename).then(function ($image) {\n        beforeCommand($editable);\n        $image.css({\n          display: '',\n          width: Math.min($editable.width(), $image.width())\n        });\n        range.create().insertNode($image[0]);\n        range.createFromNodeAfter($image[0]).select();\n        afterCommand($editable);\n      }).fail(function () {\n        var $holder = dom.makeLayoutInfo($editable).holder();\n        handler.bindCustomEvent(\n          $holder, $editable.data('callbacks'), 'image.upload.error'\n        )();\n      });\n    };\n\n    /**\n     * @method insertNode\n     * insert node\n     * @param {Node} $editable\n     * @param {Node} node\n     */\n    this.insertNode = function ($editable, node) {\n      beforeCommand($editable);\n      range.create().insertNode(node);\n      range.createFromNodeAfter(node).select();\n      afterCommand($editable);\n    };\n\n\t// prepend node, cloned from summernote.Editor.insertNode\n\tthis.prependNode = function($editable, node){\n\t\tbeforeCommand($editable);\n\t\t$editable.prepend(node);\n\t\trange.createFromNodeAfter(node).select();\n\t\tafterCommand($editable);\n\t}\n\n\tthis.insertAfter = function($editable, node, after){\n\t\tbeforeCommand($editable);\n\t\t$(after).after(node);\n\t\trange.createFromNodeAfter(node).select();\n\t\tafterCommand($editable);\n\t}\n\n\t// == insertNode with fixes for insert into paragraph\n\tthis.insertAtCursor = function($editable, node){\n\t\tbeforeCommand($editable);\n\t\tinsertNodeAtCursor(node);\n\t\trange.createFromNodeAfter(node).select();\n\t\tafterCommand($editable);\n\t}\n\n\tfunction insertNodeAtCursor(node){\n\t\tvar sel, range, html;\n\t\tif (window.getSelection) {\n\t\t\tsel = window.getSelection();\n\t\t\tif (sel.getRangeAt && sel.rangeCount) {\n\t\t\t\trange = sel.getRangeAt(0);\n\t\t\t\trange.deleteContents();\n\t\t\t\trange.insertNode(node);\n\t\t\t}\n\t\t// for ie<9\n\t\t} else if (document.selection && document.selection.createRange) {\n\t\t\tdocument.selection.createRange().text = node.outerHTML;\n\t\t}\n\t}\n\n    /**\n     * insert text\n     * @param {Node} $editable\n     * @param {String} text\n     */\n    this.insertText = function ($editable, text) {\n      beforeCommand($editable);\n      var textNode = range.create().insertNode(dom.createText(text));\n      range.create(textNode, dom.nodeLength(textNode)).select();\n      afterCommand($editable);\n    };\n\n    /**\n     * paste HTML\n     * @param {Node} $editable\n     * @param {String} markup\n     */\n    this.pasteHTML = function ($editable, markup) {\n      beforeCommand($editable);\n      var contents = range.create().pasteHTML(markup);\n      range.createFromNodeAfter(list.last(contents)).select();\n      afterCommand($editable);\n    };\n\n    /**\n     * formatBlock\n     *\n     * @param {jQuery} $editable\n     * @param {String} tagName\n     */\n    this.formatBlock = function ($editable, tagName) {\n      beforeCommand($editable);\n      // [workaround] for MSIE, IE need `<`\n      tagName = agent.isMSIE ? '<' + tagName + '>' : tagName;\n      document.execCommand('FormatBlock', false, tagName);\n      afterCommand($editable);\n    };\n\n    this.formatPara = function ($editable) {\n      beforeCommand($editable);\n      this.formatBlock($editable, 'P');\n      afterCommand($editable);\n    };\n\n    /* jshint ignore:start */\n    for (var idx = 1; idx <= 6; idx ++) {\n      this['formatH' + idx] = function (idx) {\n        return function ($editable) {\n          this.formatBlock($editable, 'H' + idx);\n        };\n      }(idx);\n    };\n    /* jshint ignore:end */\n\n    /**\n     * fontSize\n     *\n     * @param {jQuery} $editable\n     * @param {String} value - px\n     */\n    this.fontSize = function ($editable, value) {\n      var rng = range.create();\n\n      if (rng.isCollapsed()) {\n        var spans = style.styleNodes(rng);\n        var firstSpan = list.head(spans);\n\n        $(spans).css({\n          'font-size': value + 'px'\n        });\n\n        // [workaround] added styled bogus span for style\n        //  - also bogus character needed for cursor position\n        if (firstSpan && !dom.nodeLength(firstSpan)) {\n          firstSpan.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR;\n          range.createFromNodeAfter(firstSpan.firstChild).select();\n          $editable.data(KEY_BOGUS, firstSpan);\n        }\n      } else {\n        beforeCommand($editable);\n        $(style.styleNodes(rng)).css({\n          'font-size': value + 'px'\n        });\n        afterCommand($editable);\n      }\n    };\n\n    /**\n     * insert horizontal rule\n     * @param {jQuery} $editable\n     */\n    this.insertHorizontalRule = function ($editable) {\n      beforeCommand($editable);\n\n      var rng = range.create();\n      var hrNode = rng.insertNode($('<HR/>')[0]);\n      if (hrNode.nextSibling) {\n        range.create(hrNode.nextSibling, 0).normalize().select();\n      }\n\n      afterCommand($editable);\n    };\n\n    /**\n     * remove bogus node and character\n     */\n    this.removeBogus = function ($editable) {\n      var bogusNode = $editable.data(KEY_BOGUS);\n      if (!bogusNode) {\n        return;\n      }\n\n      var textNode = list.find(list.from(bogusNode.childNodes), dom.isText);\n\n      var bogusCharIdx = textNode.nodeValue.indexOf(dom.ZERO_WIDTH_NBSP_CHAR);\n      if (bogusCharIdx !== -1) {\n        textNode.deleteData(bogusCharIdx, 1);\n      }\n\n      if (dom.isEmpty(bogusNode)) {\n        dom.remove(bogusNode);\n      }\n\n      $editable.removeData(KEY_BOGUS);\n    };\n\n    /**\n     * lineHeight\n     * @param {jQuery} $editable\n     * @param {String} value\n     */\n    this.lineHeight = function ($editable, value) {\n      beforeCommand($editable);\n      style.stylePara(range.create(), {\n        lineHeight: value\n      });\n      afterCommand($editable);\n    };\n\n    /**\n     * unlink\n     *\n     * @type command\n     *\n     * @param {jQuery} $editable\n     */\n    this.unlink = function ($editable) {\n      var rng = this.createRange($editable);\n      if (rng.isOnAnchor()) {\n        var anchor = dom.ancestor(rng.sc, dom.isAnchor);\n        rng = range.createFromNode(anchor);\n        rng.select();\n\n        beforeCommand($editable);\n        document.execCommand('unlink');\n        afterCommand($editable);\n      }\n    };\n\n    /**\n     * create link (command)\n     *\n     * @param {jQuery} $editable\n     * @param {Object} linkInfo\n     * @param {Object} options\n     */\n    this.createLink = function ($editable, linkInfo, options) {\n      var linkUrl = linkInfo.url;\n      var linkText = linkInfo.text;\n      var isNewWindow = linkInfo.isNewWindow;\n      var rng = linkInfo.range || this.createRange($editable);\n      var isTextChanged = rng.toString() !== linkText;\n\n      options = options || dom.makeLayoutInfo($editable).editor().data('options');\n\n      beforeCommand($editable);\n\n      if (options.onCreateLink) {\n        linkUrl = options.onCreateLink(linkUrl);\n      }\n\n      var anchors = [];\n      if (isTextChanged) {\n        // Create a new link when text changed.\n        var anchor = rng.insertNode($('<A>' + linkText + '</A>')[0]);\n        anchors.push(anchor);\n      } else {\n        anchors = style.styleNodes(rng, {\n          nodeName: 'A',\n          expandClosestSibling: true,\n          onlyPartialContains: true\n        });\n      }\n\n      $.each(anchors, function (idx, anchor) {\n        $(anchor).attr('href', linkUrl);\n        if (isNewWindow) {\n          $(anchor).attr('target', '_blank');\n        } else {\n          $(anchor).removeAttr('target');\n        }\n      });\n\n      var startRange = range.createFromNodeBefore(list.head(anchors));\n      var startPoint = startRange.getStartPoint();\n      var endRange = range.createFromNodeAfter(list.last(anchors));\n      var endPoint = endRange.getEndPoint();\n\n      range.create(\n        startPoint.node,\n        startPoint.offset,\n        endPoint.node,\n        endPoint.offset\n      ).select();\n\n      afterCommand($editable);\n    };\n\n    /**\n     * returns link info\n     *\n     * @return {Object}\n     * @return {WrappedRange} return.range\n     * @return {String} return.text\n     * @return {Boolean} [return.isNewWindow=true]\n     * @return {String} [return.url=\"\"]\n     */\n    this.getLinkInfo = function ($editable) {\n      this.focus($editable);\n\n      var rng = range.create().expand(dom.isAnchor);\n\n      // Get the first anchor on range(for edit).\n      var $anchor = $editable.is('a') ? $editable: $(list.head(rng.nodes(dom.isAnchor)));\n      var text = $anchor.is('a') ? $anchor.html() : rng.toString();\n\n      return {\n        range: rng,\n        text: text,\n        isNewWindow: $anchor.length ? $anchor.attr('target') === '_blank' : false,\n        url: $anchor.length ? $anchor.attr('href') : ''\n      };\n    };\n\n    /**\n     * setting color\n     *\n     * @param {Node} $editable\n     * @param {Object} sObjColor  color code\n     * @param {String} sObjColor.foreColor foreground color\n     * @param {String} sObjColor.backColor background color\n     */\n    this.color = function ($editable, sObjColor) {\n      var oColor = JSON.parse(sObjColor);\n      var foreColor = oColor.foreColor, backColor = oColor.backColor;\n\n      beforeCommand($editable);\n\n      if (foreColor) { document.execCommand('foreColor', false, foreColor); }\n      if (backColor) { document.execCommand('backColor', false, backColor); }\n\n      afterCommand($editable);\n    };\n\n    /**\n     * insert Table\n     *\n     * @param {Node} $editable\n     * @param {String} sDim dimension of table (ex : \"5x5\")\n     */\n    this.insertTable = function ($editable, sDim) {\n      var dimension = sDim.split('x');\n      beforeCommand($editable);\n\n      var rng = range.create().deleteContents();\n      rng.insertNode(table.createTable(dimension[0], dimension[1]));\n      afterCommand($editable);\n    };\n\n    /**\n     * float me\n     *\n     * @param {jQuery} $editable\n     * @param {String} value\n     * @param {jQuery} $target\n     */\n    this.floatMe = function ($editable, value, $target) {\n      beforeCommand($editable);\n      $target.css('float', value);\n      afterCommand($editable);\n    };\n\n    /**\n     * change image shape\n     *\n     * @param {jQuery} $editable\n     * @param {String} value css class\n     * @param {Node} $target\n     */\n    this.imageShape = function ($editable, value, $target) {\n      beforeCommand($editable);\n\n      $target.removeClass('img-rounded img-circle img-thumbnail');\n\n      if (value) {\n        $target.addClass(value);\n      }\n\n      afterCommand($editable);\n    };\n\n    /**\n     * resize overlay element\n     * @param {jQuery} $editable\n     * @param {String} value\n     * @param {jQuery} $target - target element\n     */\n    this.resize = function ($editable, value, $target) {\n      beforeCommand($editable);\n\n      $target.css({\n        width: value * 100 + '%',\n        height: ''\n      });\n\n      afterCommand($editable);\n    };\n\n    /**\n     * @param {Position} pos\n     * @param {jQuery} $target - target element\n     * @param {Boolean} [bKeepRatio] - keep ratio\n     */\n    this.resizeTo = function (pos, $target, bKeepRatio) {\n      var imageSize;\n      if (bKeepRatio) {\n        var newRatio = pos.y / pos.x;\n        var ratio = $target.data('ratio');\n        imageSize = {\n          width: ratio > newRatio ? pos.x : pos.y / ratio,\n          height: ratio > newRatio ? pos.x * ratio : pos.y\n        };\n      } else {\n        imageSize = {\n          width: pos.x,\n          height: pos.y\n        };\n      }\n\n      $target.css(imageSize);\n    };\n\n    /**\n     * remove media object\n     *\n     * @param {jQuery} $editable\n     * @param {String} value - dummy argument (for keep interface)\n     * @param {jQuery} $target - target element\n     */\n    this.removeMedia = function ($editable, value, $target) {\n      beforeCommand($editable);\n      $target.detach();\n\n      handler.bindCustomEvent(\n        $(), $editable.data('callbacks'), 'media.delete'\n      )($target, $editable);\n\n      afterCommand($editable);\n    };\n\n    /**\n     * set focus\n     *\n     * @param $editable\n     */\n    this.focus = function ($editable) {\n      $editable.focus();\n\n      // [workaround] for firefox bug http://goo.gl/lVfAaI\n      if (agent.isFF) {\n        var rng = range.create();\n        if (!rng || rng.isOnEditable()) {\n          return;\n        }\n        range.createFromNode($editable[0])\n             .normalize()\n             .collapse()\n             .select();\n      }\n    };\n\n    /**\n     * returns whether contents is empty or not.\n     *\n     * @param {jQuery} $editable\n     * @return {Boolean}\n     */\n    this.isEmpty = function ($editable) {\n      return dom.isEmpty($editable[0]) || dom.emptyPara === $editable.html();\n    };\n  };\n\n  /**\n   * @class module.Button\n   *\n   * Button\n   */\n  var Button = function () {\n    /**\n     * update button status\n     *\n     * @param {jQuery} $container\n     * @param {Object} styleInfo\n     */\n    this.update = function ($container, styleInfo) {\n      /**\n       * handle dropdown's check mark (for fontname, fontsize, lineHeight).\n       * @param {jQuery} $btn\n       * @param {Number} value\n       */\n      var checkDropdownMenu = function ($btn, value) {\n        $btn.find('.dropdown-menu li a').each(function () {\n          var isChecked;\n          if (typeof value === 'function') {\n            isChecked = value($(this));\n          } else {\n            // always compare string to avoid creating another func.\n            isChecked = ($(this).data('value') + '') === (value + '');\n          }\n\n          this.className = isChecked ? 'checked' : '';\n        });\n      };\n\n      /**\n       * update button state(active or not).\n       *\n       * @private\n       * @param {String} selector\n       * @param {Function} pred\n       */\n      var btnState = function (selector, pred) {\n        var $btn = $container.find(selector);\n        $btn.toggleClass('active', pred());\n      };\n\n      if (styleInfo.image) {\n        var $img = $(styleInfo.image);\n\n        btnState('button[data-event=\"imageShape\"][data-value=\"img-rounded\"]', function () {\n          return $img.hasClass('img-rounded');\n        });\n        btnState('button[data-event=\"imageShape\"][data-value=\"img-circle\"]', function () {\n          return $img.hasClass('img-circle');\n        });\n        btnState('button[data-event=\"imageShape\"][data-value=\"img-thumbnail\"]', function () {\n          return $img.hasClass('img-thumbnail');\n        });\n        btnState('button[data-event=\"imageShape\"]:not([data-value])', function () {\n          return !$img.is('.img-rounded, .img-circle, .img-thumbnail');\n        });\n\n        var imgFloat = $img.css('float');\n        btnState('button[data-event=\"floatMe\"][data-value=\"left\"]', function () {\n          return imgFloat === 'left';\n        });\n        btnState('button[data-event=\"floatMe\"][data-value=\"right\"]', function () {\n          return imgFloat === 'right';\n        });\n        btnState('button[data-event=\"floatMe\"][data-value=\"none\"]', function () {\n          return imgFloat !== 'left' && imgFloat !== 'right';\n        });\n\n        var style = $img.attr('style');\n        btnState('button[data-event=\"resize\"][data-value=\"1\"]', function () {\n          return !!/(^|\\s)(max-)?width\\s*:\\s*100%/.test(style);\n        });\n        btnState('button[data-event=\"resize\"][data-value=\"0.5\"]', function () {\n          return !!/(^|\\s)(max-)?width\\s*:\\s*50%/.test(style);\n        });\n        btnState('button[data-event=\"resize\"][data-value=\"0.25\"]', function () {\n          return !!/(^|\\s)(max-)?width\\s*:\\s*25%/.test(style);\n        });\n        return;\n      }\n\n      // fontname\n      var $fontname = $container.find('.note-fontname');\n      if ($fontname.length) {\n        var selectedFont = styleInfo['font-family'];\n        if (!!selectedFont) {\n\n          var list = selectedFont.split(',');\n          for (var i = 0, len = list.length; i < len; i++) {\n            selectedFont = list[i].replace(/[\\'\\\"]/g, '').replace(/\\s+$/, '').replace(/^\\s+/, '');\n            if (agent.isFontInstalled(selectedFont)) {\n              break;\n            }\n          }\n\n          $fontname.find('.note-current-fontname').text(selectedFont);\n          checkDropdownMenu($fontname, selectedFont);\n\n        }\n      }\n\n      // fontsize\n      var $fontsize = $container.find('.note-fontsize');\n      $fontsize.find('.note-current-fontsize').text(styleInfo['font-size']);\n      checkDropdownMenu($fontsize, parseFloat(styleInfo['font-size']));\n\n      // lineheight\n      var $lineHeight = $container.find('.note-height');\n      checkDropdownMenu($lineHeight, parseFloat(styleInfo['line-height']));\n\n      btnState('button[data-event=\"bold\"]', function () {\n        return styleInfo['font-bold'] === 'bold';\n      });\n      btnState('button[data-event=\"italic\"]', function () {\n        return styleInfo['font-italic'] === 'italic';\n      });\n      btnState('button[data-event=\"underline\"]', function () {\n        return styleInfo['font-underline'] === 'underline';\n      });\n      btnState('button[data-event=\"strikethrough\"]', function () {\n        return styleInfo['font-strikethrough'] === 'strikethrough';\n      });\n      btnState('button[data-event=\"superscript\"]', function () {\n        return styleInfo['font-superscript'] === 'superscript';\n      });\n      btnState('button[data-event=\"subscript\"]', function () {\n        return styleInfo['font-subscript'] === 'subscript';\n      });\n      btnState('button[data-event=\"justifyLeft\"]', function () {\n        return styleInfo['text-align'] === 'left' || styleInfo['text-align'] === 'start';\n      });\n      btnState('button[data-event=\"justifyCenter\"]', function () {\n        return styleInfo['text-align'] === 'center';\n      });\n      btnState('button[data-event=\"justifyRight\"]', function () {\n        return styleInfo['text-align'] === 'right';\n      });\n      btnState('button[data-event=\"justifyFull\"]', function () {\n        return styleInfo['text-align'] === 'justify';\n      });\n      btnState('button[data-event=\"insertUnorderedList\"]', function () {\n        return styleInfo['list-style'] === 'unordered';\n      });\n      btnState('button[data-event=\"insertOrderedList\"]', function () {\n        return styleInfo['list-style'] === 'ordered';\n      });\n\n\n      // mbrBtnColor\n      var isModernMenu = !!$(styleInfo.anchor).closest('[data-app-modern-menu]').length;\n      var $mbrBtnColor = $container.find('.note-mbrBtnColor');\n      var $mbrLinkColor = $container.find('.note-mbrLinkColor');\n      if ($(styleInfo.anchor).is('.btn:not(.mbr-menu-item, .mbr-editable-menu-item)')) {\n        $mbrLinkColor.hide();\n        $mbrBtnColor.parent().css('display', ''); // .show();\n        checkDropdownMenu($mbrBtnColor, function ($item) {\n          var checked = $(styleInfo.anchor).hasClass($item.data('value'));\n\n          // if checked - change label on button\n          if (checked) {\n            var label = $item.find('> span').clone().css('margin-left', 0);\n            $mbrBtnColor.find('button > .note-current-mbrBtnColor').html(label);\n          }\n\n          return checked;\n        });\n        // menu item\n      } else if ($(styleInfo.anchor).is('.nav-link[data-app-btn], .dropdown-item[data-app-btn]') && !isModernMenu) {\n        $mbrBtnColor.parent().hide();\n        $mbrLinkColor.hide();\n      } else {\n        $mbrBtnColor.parent().hide();\n        $mbrLinkColor.show();\n\n        // links\n        if ($(styleInfo.anchor).is('a')) {\n          checkDropdownMenu($mbrLinkColor, function ($item) {\n            var checked = $(styleInfo.anchor).hasClass($item.data('value'));\n\n            // if no specific link classes - add 'text-link' classname styles\n            if ($item.data('value') === 'text-primary' && !$(styleInfo.anchor).is('.text-primary,' +\n              '.text-success,' +\n              '.text-info,' +\n              '.text-warning,' +\n              '.text-danger,' +\n              '.text-white,' +\n              '.text-black,' +\n              '.text-gray')) {\n              checked = true;\n            }\n\n            // if checked - change label on button\n            if (checked) {\n              var label = $item.find('> span').clone().css('margin-left', 0);\n              $mbrLinkColor.find('button > .note-current-mbrLinkColor').html(label);\n            }\n\n            return checked;\n          });\n        }\n      }\n\n\n      // mbrBtnRemove\n      var $mbrBtnRemove = $container.find('.btn[data-name=\"mbrBtnRemove\"]');\n      if ($mbrBtnRemove.length) {\n        var isMenu = $(styleInfo.anchor).hasClass('mbr-menu-item') ||\n              $(styleInfo.anchor).hasClass('mbr-editable-menu-item');\n        var useParent = isMenu ||\n              $(styleInfo.anchor).attr('data-app-btn') === 'parent';\n        var mbrBtnRemoveSiblings = useParent ?\n              $(styleInfo.anchor).parent().siblings('li').find('> a')\n              : $(styleInfo.anchor).siblings('btn, [data-app-btn]');\n\n        // disable mbrBtnRemove only for menu item\n        if (isMenu) {\n          if (!mbrBtnRemoveSiblings.length) {\n            $mbrBtnRemove.attr('disabled', 'disabled');\n          } else {\n            $mbrBtnRemove.removeAttr('disabled');\n          }\n        }\n      }\n\n      // mbrFontSize\n      var $mbrFontsize = $container.find('.note-mbrFonts > [data-name=mbrFontSize]');\n      $mbrFontsize.find('.note-current-mbrFontSize').text(styleInfo['font-size']);\n      checkDropdownMenu($mbrFontsize, parseFloat(styleInfo['font-size']));\n\n      // mbrFontName\n      var $mbrFontname = $container.find('.note-mbrFonts > [data-name=mbrFonts]');\n      if ($mbrFontname.length) {\n        var selectedMbrFont = styleInfo['font-family'];\n        if (!!selectedMbrFont) {\n\n          var mbrFontsList = selectedMbrFont.split(',');\n          for (var k = 0, klen = mbrFontsList.length; k < klen; k++) {\n            selectedMbrFont = mbrFontsList[k].replace(/[\\'\\\"]/g, '').replace(/\\s+$/, '').replace(/^\\s+/, '');\n            if (agent.isFontInstalled(selectedMbrFont)) {\n              break;\n            }\n          }\n\n          $mbrFontname.find('.note-current-mbrFonts')\n            .css('font-family', '\\'' + selectedMbrFont + '\\'')\n            .text(selectedMbrFont);\n          checkDropdownMenu($mbrFontname, selectedMbrFont);\n\n        }\n      }\n\n      // mbrColor\n      var $mbrColorBtn = $container.find('[data-name=mbrColor] .curTextColor');\n\n      if (styleInfo.ancestors) {\n        var $editable = $(styleInfo.ancestors[0]).parent();\n        var options = $editable.data('options');\n\n        var removeMbrColorBtn = $(styleInfo.anchor).hasClass('btn') ||\n              $(styleInfo.anchor).is('[data-app-btn]:not(.mbr-menu-item, .mbr-editable-menu-item, .nav-link, .dropdown-item)');\n        if (options && options.customToolbar && options.customToolbar.mbrColor === 'on') {\n          removeMbrColorBtn = false;\n        }\n\n        if (removeMbrColorBtn) {\n          $mbrColorBtn.parent().remove();\n        } else {\n          var $currentColor;\n          for (var n in styleInfo.ancestors) {\n            if (/P|DIV|UL|H1|H2|H3|H4|H5|H6/g.test(styleInfo.ancestors[n].tagName)) {\n              $currentColor = $(styleInfo.ancestors[n]).css('color');\n              continue;\n            }\n          }\n          if (!$currentColor) {\n            var $parent = $(styleInfo.ancestors[0]).parent();\n            $currentColor = $parent.css('color');\n          }\n          $mbrColorBtn.css({\n            background: $.summernote.adaptColorForBg($currentColor || '#000')\n          });\n        }\n      }\n\n\n      // mbrAlign\n      var $mbrAlignBtn = $container.find('[data-name=mbrAlign]');\n      var $mbrAlignBtnIcon = $mbrAlignBtn.find('> i');\n      switch (styleInfo['text-align']) {\n        case 'left':\n        case 'start':\n          $mbrAlignBtnIcon.attr('class', 'mbr-icon-align-left');\n          // $mbrAlignBtn.attr('data-event', 'justifyCenter');\n          break;\n        case 'right':\n          $mbrAlignBtnIcon.attr('class', 'mbr-icon-align-right');\n          // $mbrAlignBtn.attr('data-event', 'justifyFull');\n          break;\n        case 'center':\n          $mbrAlignBtnIcon.attr('class', 'mbr-icon-align-center');\n          // $mbrAlignBtn.attr('data-event', 'justifyRight');\n          break;\n        case 'justify':\n          $mbrAlignBtnIcon.attr('class', 'mbr-icon-align-justify');\n          // $mbrAlignBtn.attr('data-event', 'justifyLeft');\n          break;\n      }\n    };\n\n    /**\n     * update recent color\n     *\n     * @param {Node} button\n     * @param {String} eventName\n     * @param {Mixed} value\n     */\n    this.updateRecentColor = function (button, eventName, value) {\n      var $color = $(button).closest('.note-color');\n      var $recentColor = $color.find('.note-recent-color');\n      var colorInfo = JSON.parse($recentColor.attr('data-value'));\n      colorInfo[eventName] = value;\n      $recentColor.attr('data-value', JSON.stringify(colorInfo));\n      var sKey = eventName === 'backColor' ? 'background-color' : 'color';\n      $recentColor.find('i').css(sKey, value);\n    };\n  };\n\n  /**\n   * @class module.Toolbar\n   *\n   * Toolbar\n   */\n  var Toolbar = function () {\n    var button = new Button();\n\n    this.update = function ($toolbar, styleInfo) {\n      button.update($toolbar, styleInfo);\n    };\n\n    /**\n     * @param {Node} button\n     * @param {String} eventName\n     * @param {String} value\n     */\n    this.updateRecentColor = function (buttonNode, eventName, value) {\n      button.updateRecentColor(buttonNode, eventName, value);\n    };\n\n    /**\n     * activate buttons exclude codeview\n     * @param {jQuery} $toolbar\n     */\n    this.activate = function ($toolbar) {\n      $toolbar.find('button')\n              .not('button[data-event=\"codeview\"]')\n              .removeClass('disabled');\n    };\n\n    /**\n     * deactivate buttons exclude codeview\n     * @param {jQuery} $toolbar\n     */\n    this.deactivate = function ($toolbar) {\n      $toolbar.find('button')\n              .not('button[data-event=\"codeview\"]')\n              .addClass('disabled');\n    };\n\n    /**\n     * @param {jQuery} $container\n     * @param {Boolean} [bFullscreen=false]\n     */\n    this.updateFullscreen = function ($container, bFullscreen) {\n      var $btn = $container.find('button[data-event=\"fullscreen\"]');\n      $btn.toggleClass('active', bFullscreen);\n    };\n\n    /**\n     * @param {jQuery} $container\n     * @param {Boolean} [isCodeview=false]\n     */\n    this.updateCodeview = function ($container, isCodeview) {\n      var $btn = $container.find('button[data-event=\"codeview\"]');\n      $btn.toggleClass('active', isCodeview);\n\n      if (isCodeview) {\n        this.deactivate($container);\n      } else {\n        this.activate($container);\n      }\n    };\n\n    /**\n     * get button in toolbar\n     *\n     * @param {jQuery} $editable\n     * @param {String} name\n     * @return {jQuery}\n     */\n    this.get = function ($editable, name) {\n      var $toolbar = dom.makeLayoutInfo($editable).toolbar();\n\n      return $toolbar.find('[data-name=' + name + ']');\n    };\n\n    /**\n     * set button state\n     * @param {jQuery} $editable\n     * @param {String} name\n     * @param {Boolean} [isActive=true]\n     */\n    this.setButtonState = function ($editable, name, isActive) {\n      isActive = (isActive === false) ? false : true;\n\n      var $button = this.get($editable, name);\n      $button.toggleClass('active', isActive);\n    };\n  };\n\n  var EDITABLE_PADDING = 24;\n\n  var Statusbar = function () {\n    var $document = $(document);\n\n    this.attach = function (layoutInfo, options) {\n      if (!options.disableResizeEditor) {\n        layoutInfo.statusbar().on('mousedown', hStatusbarMousedown);\n      }\n    };\n\n    /**\n     * `mousedown` event handler on statusbar\n     *\n     * @param {MouseEvent} event\n     */\n    var hStatusbarMousedown = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      var $editable = dom.makeLayoutInfo(event.target).editable();\n      var editableTop = $editable.offset().top - $document.scrollTop();\n\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);\n      var options = layoutInfo.editor().data('options');\n\n      $document.on('mousemove.summernote', function (event) {\n        var nHeight = event.clientY - (editableTop + EDITABLE_PADDING);\n\n        nHeight = (options.minHeight > 0) ? Math.max(nHeight, options.minHeight) : nHeight;\n        nHeight = (options.maxHeight > 0) ? Math.min(nHeight, options.maxHeight) : nHeight;\n\n        $editable.height(nHeight);\n      }).one('mouseup.summernote', function () {\n        $document.off('mousemove.summernote');\n      });\n    };\n  };\n\n  /**\n   * @class module.Popover\n   *\n   * Popover (http://getbootstrap.com/javascript/#popovers)\n   *\n   */\n  var Popover = function () {\n    var button = new Button();\n\n    var PX_POPOVER_ARROW_OFFSET_X = -11;\n    var POPOVER_MAX_L_OFFSET = 5;\n    var POPOVER_MAX_R_OFFSET = 5;\n    var POPOVER_MAX_T_OFFSET = 20;\n    // when popover top offset < MAX_TOP_OFFSET - show dropdown, else - dropup\n    var DROPDOWN_MAX_TOP_OFFSET = 200;\n\n    /**\n     * returns position from placeholder\n     *\n     * @private\n     * @param {Node} placeholder\n     * @param {Boolean} isAirMode\n     * @return {Object}\n     * @return {Number} return.left\n     * @return {Number} return.top\n     */\n    var posFromPlaceholder = function (placeholder, isAirMode, styleInfo) {\n      var $placeholder = $(placeholder);\n      var pos = isAirMode ? $placeholder.offset() : $placeholder.position();\n      var width = $placeholder.outerWidth(true); // include margin\n\n      // popover below placeholder.\n      return {\n        left: pos.left + width / 2,\n        top: pos.top,\n        lineHeight: styleInfo.ancestors[0] ? $(styleInfo.ancestors[0].parentNode).outerHeight() : ''\n      };\n    };\n\n    /**\n     * Regenerate Position of Popover\n     *\n     * @private\n     * @param {jQuery} popover\n     * @param {Position} pos\n     */\n    var regeneratePosition = function ($popover, pos) {\n      var wndWidth = $(window).width();\n\n      // get popover sizes\n      $popover.css({\n        display: 'block',\n        left: POPOVER_MAX_L_OFFSET,\n        top: POPOVER_MAX_T_OFFSET\n      });\n      var popoverWidth = $popover.outerWidth();\n      var popoverHeight = $popover.outerHeight();\n      $popover.css('display', 'none');\n\n      // set new position\n      pos.left = pos.left - popoverWidth / 2;\n\n      // when popover top < POPOVER_MAX_T_OFFSET - regenerate position\n      if (pos.top - popoverHeight < POPOVER_MAX_T_OFFSET) {\n        $popover.removeClass('top').addClass('bottom');\n        pos.top = pos.top + parseFloat(pos.lineHeight);\n      } else {\n        $popover.removeClass('bottom').addClass('top');\n        pos.top = pos.top - popoverHeight;\n      }\n\n      // when popover left < 0 and right > window width - regenerate position\n      var oldLeft = pos.left;\n      if (pos.left < POPOVER_MAX_L_OFFSET) {\n        pos.left = POPOVER_MAX_L_OFFSET;\n      } else if (pos.left + popoverWidth > (wndWidth - POPOVER_MAX_R_OFFSET * 2)) {\n        pos.left = (wndWidth - POPOVER_MAX_R_OFFSET * 2) - popoverWidth;\n      }\n\n      // fix dropdowns\n      var $dropdowns = $popover.find('.dropdown-menu').parent('.btn-group');\n      if (pos.top < DROPDOWN_MAX_TOP_OFFSET) {\n        $dropdowns.removeClass('dropup');\n      } else {\n        $dropdowns.addClass('dropup');\n      }\n\n      // fix arrow position\n      var arrowMarginLeft = PX_POPOVER_ARROW_OFFSET_X + oldLeft - pos.left;\n      $popover.find('> .arrow').css('margin-left', arrowMarginLeft);\n      return pos;\n    };\n\n    /**\n     * show popover\n     *\n     * @private\n     * @param {jQuery} popover\n     * @param {Position} pos\n     */\n    var showPopover = function($popover, pos) {\n      pos = regeneratePosition($popover, pos);\n\n      $popover.css({\n          display: 'block',\n          left: pos.left,\n          top: pos.top\n      });\n    };\n\n\tthis.addGroup = renderer.addGroup;\n\n    /**\n     * update current state\n     * @param {jQuery} $popover - popover container\n     * @param {Object} styleInfo - style object\n     * @param {Boolean} isAirMode\n     */\n    this.update = function ($popover, styleInfo, isAirMode) {\n      button.update($popover, styleInfo);\n      var isBtnPopover = styleInfo.anchor && /btn|mbr-menu-item|mbr-editable-menu-item/g.test(styleInfo.anchor.className);\n      if (!isBtnPopover && styleInfo.anchor) {\n        isBtnPopover = !!$(styleInfo.anchor).attr('data-app-btn');\n      }\n\n      var isCollapsed = styleInfo.range && styleInfo.range.isCollapsed();\n      var isLink = isCollapsed && styleInfo.anchor && !isBtnPopover;\n\n      var $linkPopover = $popover.find('.note-link-popover');\n      if (isLink) {\n        var $anchor = $linkPopover.find('a:eq(0)');\n        var href = $(styleInfo.anchor).attr('href');\n        var target = $(styleInfo.anchor).attr('target');\n        $anchor.html(href);\n        if (!target) {\n          $anchor.removeAttr('target');\n        } else {\n          $anchor.attr('target', '_blank');\n        }\n        setTimeout(function () {\n            showPopover($linkPopover, posFromPlaceholder(styleInfo.anchor, isAirMode, styleInfo), styleInfo);\n        }, 0);\n      } else {\n        $linkPopover.hide();\n      }\n\n      var $buttonPopover = $popover.find('.note-button-popover');\n      if (isBtnPopover) {\n        var btnPos = posFromPlaceholder(styleInfo.anchor, isAirMode, styleInfo);\n        setTimeout(function() { // fixed bug with Summernote's blinking; sometimes I have to do bad things\n          showPopover($buttonPopover, btnPos);\n        }, 0);\n      } else {\n        $buttonPopover.hide();\n      }\n\n      var $imagePopover = $popover.find('.note-image-popover');\n      if (styleInfo.image) {\n        showPopover($imagePopover, posFromPlaceholder(styleInfo.image, isAirMode, styleInfo), styleInfo);\n      } else {\n        $imagePopover.hide();\n      }\n\n      var $airPopover = $popover.find('.note-air-popover');\n      if (isAirMode && styleInfo.range && !isBtnPopover && !isLink) {\n        var rect = styleInfo.range.getClientRects();\n\n        if (rect[0]) {\n          // fix rect result\n          var fixedWidthResult = 0;\n          var fixedRightResult = 0;\n          for (var k in rect) {\n            if (typeof rect[k] === 'object') {\n              if (rect[k].top === rect[0].top) {\n                fixedWidthResult += rect[k].width;\n                fixedRightResult = rect[k].right;\n              } else {\n                continue;\n              }\n            }\n          }\n          rect = {\n            bottom: rect[0].bottom,\n            height: rect[0].height,\n            left: rect[0].left,\n            top: rect[0].top,\n            right: fixedRightResult,\n            width: fixedWidthResult\n          };\n\n          var $font = $airPopover.find('.note-font');\n          var $lists = $airPopover.find('.note-para');\n          var $style = $airPopover.find('.note-style');\n          var $mbrLink = $airPopover.find('.note-mbrLink');\n          var $mbrFonts = $airPopover.find('.note-mbrFonts');\n          var $mbrAlign = $airPopover.find('button[data-name=mbrAlign]');\n\n          var pos;\n\n          // when selected text\n          if (isCollapsed) {\n            // hide LINK, B and I buttons\n            $font.hide();\n            $mbrLink.hide();\n            // show lists, style, fonts, colors and align buttons\n            $lists.show();\n            $style.show();\n            $mbrFonts.show();\n            $mbrAlign.show();\n\n            var changedItem;\n            for (var n in styleInfo.ancestors) {\n              if (/P|DIV|UL|H1|H2|H3|H4|H5|H6/g.test(styleInfo.ancestors[n].tagName)) {\n                changedItem = styleInfo.ancestors[n];\n                continue;\n              }\n            }\n            if (!changedItem) {\n              changedItem = $(styleInfo.ancestors[0]).parent()[0];\n            }\n            if (!changedItem) {\n              return;\n            }\n            pos = posFromPlaceholder(changedItem, isAirMode, styleInfo);\n          }\n          // wneh none selection\n          else {\n            // show LINK, B and I buttons\n            $font.show();\n            $mbrLink.show();\n            // hide lists, style, fonts, colors and align buttons\n            $lists.hide();\n            $style.hide();\n            $mbrFonts.hide();\n            $mbrAlign.hide();\n\n            var bnd = func.rect2bnd(rect);\n            pos = {\n              left: Math.max(bnd.left + bnd.width / 2, 0),\n              top: bnd.top,\n              lineHeight: styleInfo.ancestors[0] ? $(styleInfo.ancestors[0].parentNode).outerHeight() : ''\n            };\n          }\n\n          setTimeout(function () {\n              showPopover($airPopover, pos);\n          }, 0);\n        }\n      } else {\n        $airPopover.hide();\n      }\n    };\n\n    /**\n     * @param {Node} button\n     * @param {String} eventName\n     * @param {String} value\n     */\n    this.updateRecentColor = function (button, eventName, value) {\n      button.updateRecentColor(button, eventName, value);\n    };\n\n    /**\n     * hide all popovers\n     * @param {jQuery} $popover - popover container\n     */\n    this.hide = function ($popover) {\n      $popover.children().hide();\n    };\n  };\n\n  /**\n   * @class module.Handle\n   *\n   * Handle\n   */\n  var Handle = function (handler) {\n    var $document = $(document);\n\n    /**\n     * `mousedown` event handler on $handle\n     *  - controlSizing: resize image\n     *\n     * @param {MouseEvent} event\n     */\n    var hHandleMousedown = function (event) {\n      if (dom.isControlSizing(event.target)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        var layoutInfo = dom.makeLayoutInfo(event.target),\n            $handle = layoutInfo.handle(),\n            $popover = layoutInfo.popover(),\n            $editable = layoutInfo.editable(),\n            $editor = layoutInfo.editor();\n\n        var target = $handle.find('.note-control-selection').data('target'),\n            $target = $(target), posStart = $target.offset(),\n            scrollTop = $document.scrollTop();\n\n        var isAirMode = $editor.data('options').airMode;\n\n        $document.on('mousemove.summernote', function (event) {\n          handler.invoke('editor.resizeTo', {\n            x: event.clientX - posStart.left,\n            y: event.clientY - (posStart.top - scrollTop)\n          }, $target, !event.shiftKey);\n\n          handler.invoke('handle.update', $handle, {image: target}, isAirMode);\n          handler.invoke('popover.update', $popover, {image: target}, isAirMode);\n        }).one('mouseup', function () {\n          $document.off('mousemove.summernote');\n          handler.invoke('editor.afterCommand', $editable);\n        });\n\n        if (!$target.data('ratio')) { // original ratio.\n          $target.data('ratio', $target.height() / $target.width());\n        }\n      }\n    };\n\n    this.attach = function (layoutInfo) {\n      layoutInfo.handle().on('mousedown.summernote', hHandleMousedown);\n    };\n\n    /**\n     * update handle\n     * @param {jQuery} $handle\n     * @param {Object} styleInfo\n     * @param {Boolean} isAirMode\n     */\n    this.update = function ($handle, styleInfo, isAirMode) {\n      var $selection = $handle.find('.note-control-selection');\n      if (styleInfo.image) {\n        var $image = $(styleInfo.image);\n        var pos = isAirMode ? $image.offset() : $image.position();\n\n        // include margin\n        var imageSize = {\n          w: $image.outerWidth(true),\n          h: $image.outerHeight(true)\n        };\n\n        $selection.css({\n          display: 'block',\n          left: pos.left,\n          top: pos.top,\n          width: imageSize.w,\n          height: imageSize.h\n        }).data('target', styleInfo.image); // save current image element.\n        var sizingText = imageSize.w + 'x' + imageSize.h;\n        $selection.find('.note-control-selection-info').text(sizingText);\n      } else {\n        $selection.hide();\n      }\n    };\n\n    /**\n     * hide\n     *\n     * @param {jQuery} $handle\n     */\n    this.hide = function ($handle) {\n      $handle.children().hide();\n    };\n  };\n\n  var Fullscreen = function (handler) {\n    var $window = $(window);\n    var $scrollbar = $('html, body');\n\n    /**\n     * toggle fullscreen\n     *\n     * @param {Object} layoutInfo\n     */\n    this.toggle = function (layoutInfo) {\n\n      var $editor = layoutInfo.editor(),\n          $toolbar = layoutInfo.toolbar(),\n          $editable = layoutInfo.editable(),\n          $codable = layoutInfo.codable();\n\n      var resize = function (size) {\n        $editable.css('height', size.h);\n        $codable.css('height', size.h);\n        if ($codable.data('cmeditor')) {\n          $codable.data('cmeditor').setsize(null, size.h);\n        }\n      };\n\n      $editor.toggleClass('fullscreen');\n      var isFullscreen = $editor.hasClass('fullscreen');\n      if (isFullscreen) {\n        $editable.data('orgheight', $editable.css('height'));\n\n        $window.on('resize.summernote', function () {\n          resize({\n            h: $window.height() - $toolbar.outerHeight()\n          });\n        }).trigger('resize');\n\n        $scrollbar.css('overflow', 'hidden');\n      } else {\n        $window.off('resize.summernote');\n        resize({\n          h: $editable.data('orgheight')\n        });\n        $scrollbar.css('overflow', 'visible');\n      }\n\n      handler.invoke('toolbar.updateFullscreen', $toolbar, isFullscreen);\n    };\n  };\n\n\n  var CodeMirror;\n  if (agent.hasCodeMirror) {\n    if (agent.isSupportAmd) {\n      Promise.resolve(/*! AMD require */).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(/*! CodeMirror */ \"CodeMirror\")]; (function (cm) {\n        CodeMirror = cm;\n      }).apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__);}).catch(__webpack_require__.oe);\n    } else {\n      CodeMirror = window.CodeMirror;\n    }\n  }\n\n  /**\n   * @class Codeview\n   */\n  var Codeview = function (handler) {\n\n    this.sync = function (layoutInfo) {\n      var isCodeview = handler.invoke('codeview.isActivated', layoutInfo);\n      if (isCodeview && agent.hasCodeMirror) {\n        layoutInfo.codable().data('cmEditor').save();\n      }\n    };\n\n    /**\n     * @param {Object} layoutInfo\n     * @return {Boolean}\n     */\n    this.isActivated = function (layoutInfo) {\n      var $editor = layoutInfo.editor();\n      return $editor.hasClass('codeview');\n    };\n\n    /**\n     * toggle codeview\n     *\n     * @param {Object} layoutInfo\n     */\n    this.toggle = function (layoutInfo) {\n      if (this.isActivated(layoutInfo)) {\n        this.deactivate(layoutInfo);\n      } else {\n        this.activate(layoutInfo);\n      }\n    };\n\n    /**\n     * activate code view\n     *\n     * @param {Object} layoutInfo\n     */\n    this.activate = function (layoutInfo) {\n      var $editor = layoutInfo.editor(),\n          $toolbar = layoutInfo.toolbar(),\n          $editable = layoutInfo.editable(),\n          $codable = layoutInfo.codable(),\n          $popover = layoutInfo.popover(),\n          $handle = layoutInfo.handle();\n\n      var options = $editor.data('options');\n\n      $codable.val(dom.html($editable, options.prettifyHtml));\n      $codable.height($editable.height());\n\n      handler.invoke('toolbar.updateCodeview', $toolbar, true);\n      handler.invoke('popover.hide', $popover);\n      handler.invoke('handle.hide', $handle);\n\n      $editor.addClass('codeview');\n\n      $codable.focus();\n\n      // activate CodeMirror as codable\n      if (agent.hasCodeMirror) {\n        var cmEditor = CodeMirror.fromTextArea($codable[0], options.codemirror);\n\n        // CodeMirror TernServer\n        if (options.codemirror.tern) {\n          var server = new CodeMirror.TernServer(options.codemirror.tern);\n          cmEditor.ternServer = server;\n          cmEditor.on('cursorActivity.summernote', function (cm) {\n            server.updateArgHints(cm);\n          });\n        }\n\n        // CodeMirror hasn't Padding.\n        cmEditor.setSize(null, $editable.outerHeight());\n        $codable.data('cmEditor', cmEditor);\n      }\n    };\n\n    /**\n     * deactivate code view\n     *\n     * @param {Object} layoutInfo\n     */\n    this.deactivate = function (layoutInfo) {\n      var $holder = layoutInfo.holder(),\n          $editor = layoutInfo.editor(),\n          $toolbar = layoutInfo.toolbar(),\n          $editable = layoutInfo.editable(),\n          $codable = layoutInfo.codable();\n\n      var options = $editor.data('options');\n\n      // deactivate CodeMirror as codable\n      if (agent.hasCodeMirror) {\n        var cmEditor = $codable.data('cmEditor');\n        $codable.val(cmEditor.getValue());\n        cmEditor.toTextArea();\n      }\n\n      var value = dom.value($codable, options.prettifyHtml) || dom.emptyPara;\n      var isChange = $editable.html() !== value;\n\n      $editable.html(value);\n      $editable.height(options.height ? $codable.height() : 'auto');\n      $editor.removeClass('codeview');\n\n      if (isChange) {\n        handler.bindCustomEvent(\n          $holder, $editable.data('callbacks'), 'change'\n        )($editable.html(), $editable);\n      }\n\n      $editable.focus();\n\n      handler.invoke('toolbar.updateCodeview', $toolbar, false);\n    };\n  };\n\n  var DragAndDrop = function (handler) {\n    var $document = $(document);\n\n    /**\n     * attach Drag and Drop Events\n     *\n     * @param {Object} layoutInfo - layout Informations\n     * @param {Object} options\n     */\n    this.attach = function (layoutInfo, options) {\n      if (options.airMode || options.disableDragAndDrop) {\n        // prevent default drop event\n        $document.on('drop.summernote', function (e) {\n          e.preventDefault();\n        });\n      } else {\n        this.attachDragAndDropEvent(layoutInfo, options);\n      }\n    };\n\n    /**\n     * attach Drag and Drop Events\n     *\n     * @param {Object} layoutInfo - layout Informations\n     * @param {Object} options\n     */\n    this.attachDragAndDropEvent = function (layoutInfo, options) {\n      var collection = $(),\n          $editor = layoutInfo.editor(),\n          $dropzone = layoutInfo.dropzone(),\n          $dropzoneMessage = $dropzone.find('.note-dropzone-message');\n\n      // show dropzone on dragenter when dragging a object to document\n      // -but only if the editor is visible, i.e. has a positive width and height\n      $document.on('dragenter.summernote', function (e) {\n        var isCodeview = handler.invoke('codeview.isActivated', layoutInfo);\n        var hasEditorSize = $editor.width() > 0 && $editor.height() > 0;\n        if (!isCodeview && !collection.length && hasEditorSize) {\n          $editor.addClass('dragover');\n          $dropzone.width($editor.width());\n          $dropzone.height($editor.height());\n          $dropzoneMessage.text(options.langInfo.image.dragImageHere);\n        }\n        collection = collection.add(e.target);\n      }).on('dragleave', function (e) {\n        collection = collection.not(e.target);\n        if (!collection.length) {\n          $editor.removeClass('dragover');\n        }\n      }).on('drop', function () {\n        collection = $();\n        $editor.removeClass('dragover');\n      });\n\n      // change dropzone's message on hover.\n      $dropzone.on('dragenter.summernote', function () {\n        $dropzone.addClass('hover');\n        $dropzoneMessage.text(options.langInfo.image.dropImage);\n      }).on('dragleave', function () {\n        $dropzone.removeClass('hover');\n        $dropzoneMessage.text(options.langInfo.image.dragImageHere);\n      });\n\n      // attach dropImage\n      $dropzone.on('drop.summernote', function (event) {\n\n        var dataTransfer = event.originalEvent.dataTransfer;\n        var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);\n\n        if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n          event.preventDefault();\n          layoutInfo.editable().focus();\n          handler.insertImages(layoutInfo, dataTransfer.files);\n        } else {\n          var insertNodefunc = function () {\n            layoutInfo.holder().summernote('insertNode', this);\n          };\n\n          for (var i = 0, len = dataTransfer.types.length; i < len; i++) {\n            var type = dataTransfer.types[i];\n            var content = dataTransfer.getData(type);\n\n            if (type.toLowerCase().indexOf('text') > -1) {\n              layoutInfo.holder().summernote('pasteHTML', content);\n            } else {\n              $(content).each(insertNodefunc);\n            }\n          }\n        }\n      }).on('dragover', false); // prevent default dragover event\n    };\n  };\n\n  var Clipboard = function (handler) {\n    var $paste;\n\n    this.attach = function (layoutInfo) {\n      // [workaround] getting image from clipboard\n      //  - IE11 and Firefox: CTRL+v hook\n      //  - Webkit: event.clipboardData\n      if ((agent.isMSIE && agent.browserVersion > 10) || agent.isFF) {\n        $paste = $('<div />').attr('contenteditable', true).css({\n          position : 'absolute',\n          left : -100000,\n          opacity : 0\n        });\n\n        layoutInfo.editable().on('keydown.summernote', function (e) {\n          if (e.ctrlKey && e.keyCode === key.code.V) {\n            handler.invoke('saveRange', layoutInfo.editable());\n            $paste.focus();\n\n            setTimeout(function () {\n              pasteByHook(layoutInfo);\n            }, 0);\n          }\n        });\n\n        layoutInfo.editable().before($paste);\n      } else {\n        layoutInfo.editable().on('paste.summernote', pasteByEvent);\n      }\n    };\n\n    var pasteByHook = function (layoutInfo) {\n      var $editable = layoutInfo.editable();\n      var node = $paste[0].firstChild;\n\n      if (dom.isImg(node)) {\n        var dataURI = node.src;\n        var decodedData = atob(dataURI.split(',')[1]);\n        var array = new Uint8Array(decodedData.length);\n        for (var i = 0; i < decodedData.length; i++) {\n          array[i] = decodedData.charCodeAt(i);\n        }\n\n        var blob = new Blob([array], { type : 'image/png' });\n        blob.name = 'clipboard.png';\n\n        handler.invoke('restoreRange', $editable);\n        handler.invoke('focus', $editable);\n        handler.insertImages(layoutInfo, [blob]);\n      } else {\n        var pasteContent = $('<div />').html($paste.html()).html();\n        handler.invoke('restoreRange', $editable);\n        handler.invoke('focus', $editable);\n\n        if (pasteContent) {\n          handler.invoke('pasteHTML', $editable, pasteContent);\n        }\n      }\n\n      $paste.empty();\n    };\n\n    /**\n     * paste by clipboard event\n     *\n     * @param {Event} event\n     */\n    var pasteByEvent = function (event) {\n      var clipboardData = event.originalEvent.clipboardData;\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);\n      var $editable = layoutInfo.editable();\n\n      if (clipboardData && clipboardData.items && clipboardData.items.length) {\n        var item = list.head(clipboardData.items);\n        if (item.kind === 'file' && item.type.indexOf('image/') !== -1) {\n          handler.insertImages(layoutInfo, [item.getAsFile()]);\n        }\n        handler.invoke('editor.afterCommand', $editable);\n      }\n    };\n  };\n\n  var LinkDialog = function (handler) {\n\n    /**\n     * toggle button status\n     *\n     * @private\n     * @param {jQuery} $btn\n     * @param {Boolean} isEnable\n     */\n    var toggleBtn = function ($btn, isEnable) {\n      $btn.toggleClass('disabled', !isEnable);\n      $btn.attr('disabled', !isEnable);\n    };\n\n    /**\n     * bind enter key\n     *\n     * @private\n     * @param {jQuery} $input\n     * @param {jQuery} $btn\n     */\n    var bindEnterKey = function ($input, $btn) {\n      $input.on('keypress.summernote', function (event) {\n        if (event.keyCode === key.code.ENTER) {\n          $btn.trigger('click');\n        }\n      });\n    };\n\n    /**\n     * Show link dialog and set event handlers on dialog controls.\n     *\n     * @param {jQuery} $editable\n     * @param {jQuery} $dialog\n     * @param {Object} linkInfo\n     * @return {Promise}\n     */\n    this.showLinkDialog = function ($editable, $dialog, linkInfo) {\n      return $.Deferred(function (deferred) {\n        var $linkDialog = $dialog.find('.note-link-dialog');\n\n        var $linkText = $linkDialog.find('.note-link-text'),\n        $linkUrl = $linkDialog.find('.note-link-url'),\n        $linkBtn = $linkDialog.find('.note-link-btn'),\n        $openInNewWindow = $linkDialog.find('input[type=checkbox]');\n\n        $linkDialog.one('shown.bs.modal', function () {\n          $linkText.val(linkInfo.text);\n\n          $linkText.on('input', function () {\n            toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());\n            // if linktext was modified by keyup,\n            // stop cloning text from linkUrl\n            linkInfo.text = $linkText.val();\n          });\n\n          // if no url was given, copy text to url\n          if (!linkInfo.url) {\n            linkInfo.url = linkInfo.text || 'http://';\n            toggleBtn($linkBtn, linkInfo.text);\n          }\n\n          $linkUrl.on('input', function () {\n            toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());\n            // display same link on `Text to display` input\n            // when create a new link\n            if (!linkInfo.text) {\n              $linkText.val($linkUrl.val());\n            }\n          }).val(linkInfo.url).trigger('focus').trigger('select');\n\n          bindEnterKey($linkUrl, $linkBtn);\n          bindEnterKey($linkText, $linkBtn);\n\n          $openInNewWindow.prop('checked', linkInfo.isNewWindow);\n\n          $linkBtn.one('click', function (event) {\n            event.preventDefault();\n\n            deferred.resolve({\n              range: linkInfo.range,\n              url: $linkUrl.val(),\n              text: $linkText.val(),\n              isNewWindow: $openInNewWindow.is(':checked')\n            });\n            $linkDialog.modal('hide');\n          });\n        }).one('hidden.bs.modal', function () {\n          // detach events\n          $linkText.off('input keypress');\n          $linkUrl.off('input keypress');\n          $linkBtn.off('click');\n\n          if (deferred.state() === 'pending') {\n            deferred.reject();\n          }\n        }).modal('show');\n      }).promise();\n    };\n\n    /**\n     * @param {Object} layoutInfo\n     */\n    this.show = function (layoutInfo) {\n      var $editor = layoutInfo.editor(),\n          $dialog = layoutInfo.dialog(),\n          $editable = layoutInfo.editable(),\n          $popover = layoutInfo.popover(),\n          linkInfo = handler.invoke('editor.getLinkInfo', $editable);\n\n      var options = $editor.data('options');\n\n      handler.invoke('editor.saveRange', $editable);\n      this.showLinkDialog($editable, $dialog, linkInfo).then(function (linkInfo) {\n        handler.invoke('editor.restoreRange', $editable);\n        handler.invoke('editor.createLink', $editable, linkInfo, options);\n        // hide popover after creating link\n        handler.invoke('popover.hide', $popover);\n      }).fail(function () {\n        handler.invoke('editor.restoreRange', $editable);\n      });\n    };\n  };\n\n  var ImageDialog = function (handler) {\n    /**\n     * toggle button status\n     *\n     * @private\n     * @param {jQuery} $btn\n     * @param {Boolean} isEnable\n     */\n    var toggleBtn = function ($btn, isEnable) {\n      $btn.toggleClass('disabled', !isEnable);\n      $btn.attr('disabled', !isEnable);\n    };\n\n    /**\n     * bind enter key\n     *\n     * @private\n     * @param {jQuery} $input\n     * @param {jQuery} $btn\n     */\n    var bindEnterKey = function ($input, $btn) {\n      $input.on('keypress.summernote', function (event) {\n        if (event.keyCode === key.code.ENTER) {\n          $btn.trigger('click');\n        }\n      });\n    };\n\n    this.show = function (layoutInfo) {\n      var $dialog = layoutInfo.dialog(),\n          $editable = layoutInfo.editable();\n\n      handler.invoke('editor.saveRange', $editable);\n      this.showImageDialog($editable, $dialog).then(function (data) {\n        handler.invoke('editor.restoreRange', $editable);\n\n        if (typeof data === 'string') {\n          // image url\n          handler.invoke('editor.insertImage', $editable, data);\n        } else {\n          // array of files\n          handler.insertImages(layoutInfo, data);\n        }\n      }).fail(function () {\n        handler.invoke('editor.restoreRange', $editable);\n      });\n    };\n\n    /**\n     * show image dialog\n     *\n     * @param {jQuery} $editable\n     * @param {jQuery} $dialog\n     * @return {Promise}\n     */\n    this.showImageDialog = function ($editable, $dialog) {\n      return $.Deferred(function (deferred) {\n        var $imageDialog = $dialog.find('.note-image-dialog');\n\n        var $imageInput = $dialog.find('.note-image-input'),\n            $imageUrl = $dialog.find('.note-image-url'),\n            $imageBtn = $dialog.find('.note-image-btn');\n\n        $imageDialog.one('shown.bs.modal', function () {\n          // Cloning imageInput to clear element.\n          $imageInput.replaceWith($imageInput.clone()\n            .on('change', function () {\n              deferred.resolve(this.files || this.value);\n              $imageDialog.modal('hide');\n            })\n            .val('')\n          );\n\n          $imageBtn.click(function (event) {\n            event.preventDefault();\n\n            deferred.resolve($imageUrl.val());\n            $imageDialog.modal('hide');\n          });\n\n          $imageUrl.on('keyup paste', function (event) {\n            var url;\n\n            if (event.type === 'paste') {\n              url = event.originalEvent.clipboardData.getData('text');\n            } else {\n              url = $imageUrl.val();\n            }\n\n            toggleBtn($imageBtn, url);\n          }).val('').trigger('focus');\n          bindEnterKey($imageUrl, $imageBtn);\n        }).one('hidden.bs.modal', function () {\n          $imageInput.off('change');\n          $imageUrl.off('keyup paste keypress');\n          $imageBtn.off('click');\n\n          if (deferred.state() === 'pending') {\n            deferred.reject();\n          }\n        }).modal('show');\n      });\n    };\n  };\n\n  var HelpDialog = function (handler) {\n    /**\n     * show help dialog\n     *\n     * @param {jQuery} $editable\n     * @param {jQuery} $dialog\n     * @return {Promise}\n     */\n    this.showHelpDialog = function ($editable, $dialog) {\n      return $.Deferred(function (deferred) {\n        var $helpDialog = $dialog.find('.note-help-dialog');\n\n        $helpDialog.one('hidden.bs.modal', function () {\n          deferred.resolve();\n        }).modal('show');\n      }).promise();\n    };\n\n    /**\n     * @param {Object} layoutInfo\n     */\n    this.show = function (layoutInfo) {\n      var $dialog = layoutInfo.dialog(),\n          $editable = layoutInfo.editable();\n\n      handler.invoke('editor.saveRange', $editable, true);\n      this.showHelpDialog($editable, $dialog).then(function () {\n        handler.invoke('editor.restoreRange', $editable);\n      });\n    };\n  };\n\n\n  /**\n   * @class EventHandler\n   *\n   * EventHandler\n   *  - TODO: new instance per a editor\n   */\n  var EventHandler = function () {\n    var self = this;\n\n    /**\n     * Modules\n     */\n    var modules = this.modules = {\n      editor: new Editor(this),\n      toolbar: new Toolbar(this),\n      statusbar: new Statusbar(this),\n      popover: new Popover(this),\n      handle: new Handle(this),\n      fullscreen: new Fullscreen(this),\n      codeview: new Codeview(this),\n      dragAndDrop: new DragAndDrop(this),\n      clipboard: new Clipboard(this),\n      linkDialog: new LinkDialog(this),\n      imageDialog: new ImageDialog(this),\n      helpDialog: new HelpDialog(this)\n    };\n\n    /**\n     * invoke module's method\n     *\n     * @param {String} moduleAndMethod - ex) 'editor.redo'\n     * @param {...*} arguments - arguments of method\n     * @return {*}\n     */\n    this.invoke = function () {\n      var moduleAndMethod = list.head(list.from(arguments));\n      var args = list.tail(list.from(arguments));\n\n      var splits = moduleAndMethod.split('.');\n      var hasSeparator = splits.length > 1;\n      var moduleName = hasSeparator && list.head(splits);\n      var methodName = hasSeparator ? list.last(splits) : list.head(splits);\n\n      var module = this.getModule(moduleName);\n      var method = module[methodName];\n\n      return method && method.apply(module, args);\n    };\n\n    /**\n     * returns module\n     *\n     * @param {String} moduleName - name of module\n     * @return {Module} - defaults is editor\n     */\n    this.getModule = function (moduleName) {\n      return this.modules[moduleName] || this.modules.editor;\n    };\n\n    /**\n     * @param {jQuery} $holder\n     * @param {Object} callbacks\n     * @param {String} eventNamespace\n     * @returns {Function}\n     */\n    var bindCustomEvent = this.bindCustomEvent = function ($holder, callbacks, eventNamespace) {\n      return function () {\n        var callback = callbacks[func.namespaceToCamel(eventNamespace, 'on')];\n        if (callback) {\n          callback.apply($holder[0], arguments);\n        }\n        return $holder.trigger('summernote.' + eventNamespace, arguments);\n      };\n    };\n\n    /**\n     * insert Images from file array.\n     *\n     * @private\n     * @param {Object} layoutInfo\n     * @param {File[]} files\n     */\n    this.insertImages = function (layoutInfo, files) {\n      var $editor = layoutInfo.editor(),\n          $editable = layoutInfo.editable(),\n          $holder = layoutInfo.holder();\n\n      var callbacks = $editable.data('callbacks');\n      var options = $editor.data('options');\n\n      // If onImageUpload options setted\n      if (callbacks.onImageUpload) {\n        bindCustomEvent($holder, callbacks, 'image.upload')(files);\n      // else insert Image as dataURL\n      } else {\n        $.each(files, function (idx, file) {\n          var filename = file.name;\n          if (options.maximumImageFileSize && options.maximumImageFileSize < file.size) {\n            bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError);\n          } else {\n            async.readFileAsDataURL(file).then(function (sDataURL) {\n              modules.editor.insertImage($editable, sDataURL, filename);\n            }).fail(function () {\n              bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError);\n            });\n          }\n        });\n      }\n    };\n\n    var commands = {\n      /**\n       * @param {Object} layoutInfo\n       */\n      showLinkDialog: function (layoutInfo) {\n        modules.linkDialog.show(layoutInfo);\n      },\n\n      /**\n       * @param {Object} layoutInfo\n       */\n      showImageDialog: function (layoutInfo) {\n        modules.imageDialog.show(layoutInfo);\n      },\n\n      /**\n       * @param {Object} layoutInfo\n       */\n      showHelpDialog: function (layoutInfo) {\n        modules.helpDialog.show(layoutInfo);\n      },\n\n      /**\n       * @param {Object} layoutInfo\n       */\n      fullscreen: function (layoutInfo) {\n        modules.fullscreen.toggle(layoutInfo);\n      },\n\n      /**\n       * @param {Object} layoutInfo\n       */\n      codeview: function (layoutInfo) {\n        modules.codeview.toggle(layoutInfo);\n      }\n    };\n\n    var hMousedown = function (event) {\n      //preventDefault Selection for FF, IE8+\n      if (dom.isImg(event.target)) {\n        event.preventDefault();\n      }\n    };\n\n    var hKeyupAndMouseup = function (event) {\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);\n      modules.editor.removeBogus(layoutInfo.editable());\n      hToolbarAndPopoverUpdate(event);\n    };\n\n    /**\n     * update sytle info\n     * @param {Object} styleInfo\n     * @param {Object} layoutInfo\n     */\n    this.updateStyleInfo = function (styleInfo, layoutInfo) {\n      if (!styleInfo || !layoutInfo.popover().length) { // ignore, if is not there already\n        return;\n      }\n      var isAirMode = layoutInfo.editor().data('options').airMode;\n      if (!isAirMode) {\n        modules.toolbar.update(layoutInfo.toolbar(), styleInfo);\n      }\n\n      modules.popover.update(layoutInfo.popover(), styleInfo, isAirMode);\n      modules.handle.update(layoutInfo.handle(), styleInfo, isAirMode);\n    };\n\n    var hToolbarAndPopoverUpdate = function (event) {\n      var target = event.target;\n\n      // delay for range after mouseup\n      setTimeout(function () {\n        var layoutInfo = dom.makeLayoutInfo(target);\n        var styleInfo = modules.editor.currentStyle(target);\n        self.updateStyleInfo(styleInfo, layoutInfo);\n      }, 0);\n    };\n\n    var hScroll = function (event) {\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);\n      //hide popover and handle when scrolled\n      modules.popover.hide(layoutInfo.popover());\n      modules.handle.hide(layoutInfo.handle());\n    };\n\n    var hToolbarAndPopoverMousedown = function (event) {\n      // prevent default event when insertTable (FF, Webkit)\n      var $btn = $(event.target).closest('[data-event]');\n      if ($btn.length) {\n        event.preventDefault();\n      }\n    };\n\n    var hToolbarAndPopoverClick = function (event) {\n      var $btn = $(event.target).closest('[data-event]');\n\n      if (!$btn.length) {\n        return;\n      }\n      var eventName = $btn.attr('data-event'),\n          value = $btn.attr('data-value'),\n          hide = $btn.attr('data-hide');\n\n      var layoutInfo = dom.makeLayoutInfo(event.target);\n\n      // before command: detect control selection element($target)\n      var $target;\n      if ($.inArray(eventName, ['resize', 'floatMe', 'removeMedia', 'imageShape']) !== -1) {\n        var $selection = layoutInfo.handle().find('.note-control-selection');\n        $target = $($selection.data('target'));\n      }\n\n      // If requested, hide the popover when the button is clicked.\n      // Useful for things like showHelpDialog.\n      if (hide) {\n        $btn.parents('.popover').hide();\n      }\n\n      if ($.isFunction($.summernote.pluginEvents[eventName])) {\n        $.summernote.pluginEvents[eventName](event, modules.editor, layoutInfo, value);\n      } else if (modules.editor[eventName]) { // on command\n        var $editable = layoutInfo.editable();\n        $editable.focus();\n        modules.editor[eventName]($editable, value, $target);\n        event.preventDefault();\n      } else if (commands[eventName]) {\n        commands[eventName].call(this, layoutInfo);\n        event.preventDefault();\n      }\n\n      // after command\n      if ($.inArray(eventName, ['backColor', 'foreColor']) !== -1) {\n        var options = layoutInfo.editor().data('options', options);\n        var module = options.airMode ? modules.popover : modules.toolbar;\n        module.updateRecentColor(list.head($btn), eventName, value);\n      }\n\n      // dirty hack for bootstrap 5 support\n      if ($btn.attr('data-bs-original-title')) {\n        var dropDown = $btn.siblings('ul.dropdown-menu');\n        $btn.toggleClass('show');\n        if (dropDown.length) {\n          dropDown.toggleClass('show');\n          dropDown.css('z-index', 1002);\n          dropDown.css('transform', 'translateY(40px)');\n        }\n      }\n\n      hToolbarAndPopoverUpdate(event);\n    };\n\n    var PX_PER_EM = 18;\n    var hDimensionPickerMove = function (event, options) {\n      var $picker = $(event.target.parentNode); // target is mousecatcher\n      var $dimensionDisplay = $picker.next();\n      var $catcher = $picker.find('.note-dimension-picker-mousecatcher');\n      var $highlighted = $picker.find('.note-dimension-picker-highlighted');\n      var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted');\n\n      var posOffset;\n      // HTML5 with jQuery - e.offsetX is undefined in Firefox\n      if (event.offsetX === undefined) {\n        var posCatcher = $(event.target).offset();\n        posOffset = {\n          x: event.pageX - posCatcher.left,\n          y: event.pageY - posCatcher.top\n        };\n      } else {\n        posOffset = {\n          x: event.offsetX,\n          y: event.offsetY\n        };\n      }\n\n      var dim = {\n        c: Math.ceil(posOffset.x / PX_PER_EM) || 1,\n        r: Math.ceil(posOffset.y / PX_PER_EM) || 1\n      };\n\n      $highlighted.css({ width: dim.c + 'em', height: dim.r + 'em' });\n      $catcher.attr('data-value', dim.c + 'x' + dim.r);\n\n      if (3 < dim.c && dim.c < options.insertTableMaxSize.col) {\n        $unhighlighted.css({ width: dim.c + 1 + 'em'});\n      }\n\n      if (3 < dim.r && dim.r < options.insertTableMaxSize.row) {\n        $unhighlighted.css({ height: dim.r + 1 + 'em'});\n      }\n\n      $dimensionDisplay.html(dim.c + ' x ' + dim.r);\n    };\n\n    /**\n     * bind KeyMap on keydown\n     *\n     * @param {Object} layoutInfo\n     * @param {Object} keyMap\n     */\n    this.bindKeyMap = function (layoutInfo, keyMap) {\n      var $editor = layoutInfo.editor();\n      var $editable = layoutInfo.editable();\n\n      $editable.on('keydown.summernote', function (event) {\n        var keys = [];\n\n        // modifier\n        if (event.metaKey) { keys.push('CMD'); }\n        if (event.ctrlKey && !event.altKey) { keys.push('CTRL'); }\n        if (event.shiftKey) { keys.push('SHIFT'); }\n\n        // keycode\n        var keyName = key.nameFromCode[event.keyCode];\n        if (keyName) {\n          keys.push(keyName);\n        }\n\n        var pluginEvent;\n        var keyString = keys.join('+');\n        var eventName = keyMap[keyString];\n        if (eventName) {\n          // FIXME Summernote doesn't support event pipeline yet.\n          //  - Plugin -> Base Code\n          pluginEvent = $.summernote.pluginEvents[keyString];\n          if ($.isFunction(pluginEvent)) {\n            if (pluginEvent(event, modules.editor, layoutInfo)) {\n              return false;\n            }\n          }\n\n          pluginEvent = $.summernote.pluginEvents[eventName];\n\n          if ($.isFunction(pluginEvent)) {\n            pluginEvent(event, modules.editor, layoutInfo);\n          } else if (modules.editor[eventName]) {\n            modules.editor[eventName]($editable, $editor.data('options'));\n            event.preventDefault();\n          } else if (commands[eventName]) {\n            commands[eventName].call(this, layoutInfo);\n            event.preventDefault();\n          }\n        } else if (key.isEdit(event.keyCode)) {\n          modules.editor.afterCommand($editable);\n        }\n      });\n    };\n\n    /**\n     * attach eventhandler\n     *\n     * @param {Object} layoutInfo - layout Informations\n     * @param {Object} options - user options include custom event handlers\n     */\n    this.attach = function (layoutInfo, options) {\n      // handlers for editable\n      if (options.shortcuts) {\n        this.bindKeyMap(layoutInfo, options.keyMap[agent.isMac ? 'mac' : 'pc']);\n      }\n      layoutInfo.editable().on('mousedown.summernote', hMousedown);\n      layoutInfo.editable().on('keyup.summernote', hKeyupAndMouseup);\n      layoutInfo.editable().on('mouseup.summernote', function (e) {\n        if (e.which === 1) {\n          hKeyupAndMouseup(e);\n        }\n      });\n      layoutInfo.editable().on('scroll.summernote', hScroll);\n\n      // handler for clipboard\n      modules.clipboard.attach(layoutInfo, options);\n\n      // handler for handle and popover\n      modules.handle.attach(layoutInfo, options);\n      layoutInfo.popover().on('click', hToolbarAndPopoverClick);\n      layoutInfo.popover().on('mousedown', hToolbarAndPopoverMousedown);\n\n      // hide popover on window resize\n      var wndResizeTimeout;\n        $(window).on('resize', function() {\n            clearTimeout(wndResizeTimeout);\n            wndResizeTimeout = setTimeout(function() {\n                modules.popover.hide(layoutInfo.popover());\n            }, 50);\n        });\n\n      // handler for drag and drop\n      modules.dragAndDrop.attach(layoutInfo, options);\n\n      // handlers for frame mode (toolbar, statusbar)\n      if (!options.airMode) {\n        // handler for toolbar\n        layoutInfo.toolbar().on('click', hToolbarAndPopoverClick);\n        layoutInfo.toolbar().on('mousedown', hToolbarAndPopoverMousedown);\n\n        // handler for statusbar\n        modules.statusbar.attach(layoutInfo, options);\n      }\n\n      // handler for table dimension\n      var $catcherContainer = options.airMode ? layoutInfo.popover() :\n                                                layoutInfo.toolbar();\n      var $catcher = $catcherContainer.find('.note-dimension-picker-mousecatcher');\n      $catcher.css({\n        width: options.insertTableMaxSize.col + 'em',\n        height: options.insertTableMaxSize.row + 'em'\n      }).on('mousemove', function (event) {\n        hDimensionPickerMove(event, options);\n      });\n\n      // save options on editor\n      layoutInfo.editor().data('options', options);\n\n      // ret styleWithCSS for backColor / foreColor clearing with 'inherit'.\n      if (!agent.isMSIE) {\n        // [workaround] for Firefox\n        //  - protect FF Error: NS_ERROR_FAILURE: Failure\n        setTimeout(function () {\n          document.execCommand('styleWithCSS', 0, options.styleWithSpan);\n        }, 0);\n      }\n\n      // History\n      var history = new History(layoutInfo.editable());\n      layoutInfo.editable().data('NoteHistory', history);\n\n      // All editor status will be saved on editable with jquery's data\n      // for support multiple editor with singleton object.\n      layoutInfo.editable().data('callbacks', {\n        onInit: options.onInit,\n        onFocus: options.onFocus,\n        onBlur: options.onBlur,\n        onKeydown: options.onKeydown,\n        onKeyup: options.onKeyup,\n        onMousedown: options.onMousedown,\n        onEnter: options.onEnter,\n        onPaste: options.onPaste,\n        onBeforeCommand: options.onBeforeCommand,\n        onChange: options.onChange,\n        onImageUpload: options.onImageUpload,\n        onImageUploadError: options.onImageUploadError,\n        onMediaDelete: options.onMediaDelete,\n        onToolbarClick: options.onToolbarClick\n      });\n\n      //var styleInfo = modules.editor.styleFromNode(layoutInfo.editable()); // original code\n      var styleInfo = modules.editor.currentStyle(layoutInfo.editable());\n      this.updateStyleInfo(styleInfo, layoutInfo);\n    };\n\n    /**\n     * attach jquery custom event\n     *\n     * @param {Object} layoutInfo - layout Informations\n     */\n    this.attachCustomEvent = function (layoutInfo, options) {\n      var $holder = layoutInfo.holder();\n      var $editable = layoutInfo.editable();\n      var callbacks = $editable.data('callbacks');\n\n      $editable.on('focus.summernote', bindCustomEvent($holder, callbacks, 'focus'));\n      $editable.on('blur.summernote', bindCustomEvent($holder, callbacks, 'blur'));\n\n      $editable.keydown(function (event) {\n        if (event.keyCode === key.code.ENTER) {\n          bindCustomEvent($holder, callbacks, 'enter').call(this, event);\n        }\n        bindCustomEvent($holder, callbacks, 'keydown').call(this, event);\n      });\n      $editable.keyup(bindCustomEvent($holder, callbacks, 'keyup'));\n\n      $editable.on('mousedown.summernote', bindCustomEvent($holder, callbacks, 'mousedown'));\n      $editable.on('mouseup.summernote', bindCustomEvent($holder, callbacks, 'mouseup'));\n      $editable.on('scroll.summernote', bindCustomEvent($holder, callbacks, 'scroll'));\n\n      $editable.on('paste.summernote', bindCustomEvent($holder, callbacks, 'paste'));\n\n      // [workaround] IE doesn't have input events for contentEditable\n      //  - see: https://goo.gl/4bfIvA\n      var changeEventName = agent.isMSIE ? 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted' : 'input';\n      $editable.on(changeEventName+\".summernote\", function () {\n        bindCustomEvent($holder, callbacks, 'change')($editable.html(), $editable);\n      });\n\n      if (!options.airMode) {\n        layoutInfo.toolbar().click(bindCustomEvent($holder, callbacks, 'toolbar.click'));\n        layoutInfo.popover().click(bindCustomEvent($holder, callbacks, 'popover.click'));\n      }\n\n      // Textarea: auto filling the code before form submit.\n      if (dom.isTextarea(list.head($holder))) {\n        $holder.closest('form').submit(function (e) {\n          layoutInfo.holder().val(layoutInfo.holder().code());\n          bindCustomEvent($holder, callbacks, 'submit').call(this, e, $holder.code());\n        });\n      }\n\n      // fire init event\n      bindCustomEvent($holder, callbacks, 'init')(layoutInfo);\n\n      // fire plugin init event\n      for (var i = 0, len = $.summernote.plugins.length; i < len; i++) {\n        if ($.isFunction($.summernote.plugins[i].init)) {\n          $.summernote.plugins[i].init(layoutInfo);\n        }\n      }\n    };\n\n    this.detach = function (layoutInfo, options) {\n      layoutInfo.holder().off(\".summernote\");\n      layoutInfo.editable().off(\".summernote\");\n\n      layoutInfo.popover().off(\".summernote\");\n      layoutInfo.handle().off(\".summernote\");\n      layoutInfo.dialog().off();\n\n      if (!options.airMode) {\n        layoutInfo.dropzone().off();\n        layoutInfo.toolbar().off();\n        layoutInfo.statusbar().off();\n      }\n    };\n  };\n\n  /**\n   * @class Renderer\n   *\n   * renderer\n   *\n   * rendering toolbar and editable\n   */\n  var Renderer = function () {\n\n    /**\n     * bootstrap button template\n     * @private\n     * @param {String} label button name\n     * @param {Object} [options] button options\n     * @param {String} [options.event] data-event\n     * @param {String} [options.className] button's class name\n     * @param {String} [options.value] data-value\n     * @param {String} [options.title] button's title for popup\n     * @param {String} [options.dropdown] dropdown html\n     * @param {String} [options.hide] data-hide\n     */\n    var tplButton = function (label, options) {\n      var event = options.event;\n      var value = options.value;\n      var title = options.title;\n      var name = options.name;\n      var className = options.className;\n      var dropdown = options.dropdown;\n      var nocaret = options.nocaret;\n      var hide = options.hide;\n\n      return (dropdown ? '<div class=\"btn-group dropup' +\n               (className ? ' ' + className : '') + '\"' +\n               (name ? ' data-name=\"' + name + '\"' : '') +\n              '>' : '') +\n               '<button type=\"button\"' +\n                 ' class=\"btn btn-default btn-sm' +\n                   ((!dropdown && className) ? ' ' + className : '') +\n                   (dropdown ? ' dropdown-toggle' : '') +\n                 '\"' +\n                 (dropdown ? ' data-toggle=\"dropdown\"' : '') +\n                 (title ? ' title=\"' + title + '\"' : '') +\n                 (event ? ' data-event=\"' + event + '\"' : '') +\n                 (name && !dropdown ? ' data-name=\"' + name + '\"' : '') +\n                 (value ? ' data-value=\\'' + value + '\\'' : '') +\n                 (hide ? ' data-hide=\\'' + hide + '\\'' : '') +\n                 (dropdown ? ' style=\"z-index: 1001;\"' : '') + // fix for old safari click on dropdown\n                 ' tabindex=\"-1\">' +\n                 label +\n                 (dropdown && !nocaret ? ' <span class=\"caret\"></span>' : '') +\n               '</button>' +\n               (dropdown || '') +\n             (dropdown ? '</div>' : '');\n    };\n\n    /**\n     * bootstrap icon button template\n     * @private\n     * @param {String} iconClassName\n     * @param {Object} [options]\n     * @param {String} [options.event]\n     * @param {String} [options.value]\n     * @param {String} [options.title]\n     * @param {String} [options.dropdown]\n     */\n    var tplIconButton = function (iconClassName, options) {\n      var label = '<i class=\"' + iconClassName + '\"></i>';\n      return tplButton(label, options);\n    };\n\n    /**\n     * bootstrap popover template\n     * @private\n     * @param {String} className\n     * @param {String} content\n     */\n    var tplPopover = function (className, content) {\n      var $popover = $('<div class=\"' + className + ' popover top in\" style=\"display: none;\">' +\n               '<div class=\"arrow\"></div>' +\n               '<div class=\"popover-content\">' +\n               '</div>' +\n             '</div>');\n\n      $popover.find('.popover-content').append(content);\n      return $popover;\n    };\n\n    /**\n     * bootstrap dialog template\n     *\n     * @param {String} className\n     * @param {String} [title='']\n     * @param {String} body\n     * @param {String} [footer='']\n     */\n    var tplDialog = function (className, title, body, footer) {\n      return '<div class=\"' + className + ' modal\" aria-hidden=\"false\">' +\n               '<div class=\"modal-dialog\">' +\n                 '<div class=\"modal-content\">' +\n                   (title ?\n                   '<div class=\"modal-header\">' +\n                     '<button type=\"button\" class=\"close\" aria-hidden=\"true\" tabindex=\"-1\">&times;</button>' +\n                     '<h4 class=\"modal-title\">' + title + '</h4>' +\n                   '</div>' : ''\n                   ) +\n                   '<div class=\"modal-body\">' + body + '</div>' +\n                   (footer ?\n                   '<div class=\"modal-footer\">' + footer + '</div>' : ''\n                   ) +\n                 '</div>' +\n               '</div>' +\n             '</div>';\n    };\n\n    /**\n     * bootstrap dropdown template\n     *\n     * @param {String|String[]} contents\n     * @param {String} [className='']\n     * @param {String} [nodeName='']\n     */\n    var tplDropdown = function (contents, className, nodeName) {\n      var classes = 'dropdown-menu' + (className ? ' ' + className : '');\n      nodeName = nodeName || 'ul';\n      if (contents instanceof Array) {\n        contents = contents.join('');\n      }\n\n      return '<' + nodeName + ' class=\"' + classes + '\">' + contents + '</' + nodeName + '>';\n    };\n\n    var tplButtonInfo = {\n      picture: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.image.image, {\n          event: 'showImageDialog',\n          title: lang.image.image,\n          hide: true\n        });\n      },\n      link: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.link.link, {\n          event: 'showLinkDialog',\n          title: lang.link.link,\n          hide: true\n        });\n      },\n      table: function (lang, options) {\n        var dropdown = [\n          '<div class=\"note-dimension-picker\">',\n          '<div class=\"note-dimension-picker-mousecatcher\" data-event=\"insertTable\" data-value=\"1x1\"></div>',\n          '<div class=\"note-dimension-picker-highlighted\"></div>',\n          '<div class=\"note-dimension-picker-unhighlighted\"></div>',\n          '</div>',\n          '<div class=\"note-dimension-display\"> 1 x 1 </div>'\n        ];\n        return tplIconButton(options.iconPrefix + options.icons.table.table, {\n          title: lang.table.table,\n          dropdown: tplDropdown(dropdown, 'note-table')\n        });\n      },\n      style: function (lang, options) {\n        var items = options.styleTags.reduce(function (memo, v) {\n          var label = lang.style[v === 'p' ? 'normal' : v];\n          return memo + '<li><a data-event=\"formatBlock\" href=\"#\" data-value=\"' + v + '\">' +\n                   label +\n                 '</a></li>';\n        }, '');\n\n        return tplIconButton(options.iconPrefix + options.icons.style.style, {\n          title: lang.style.style,\n          dropdown: tplDropdown(items)\n        });\n      },\n      fontname: function (lang, options) {\n        var realFontList = [];\n        var items = options.fontNames.reduce(function (memo, v) {\n          if (!agent.isFontInstalled(v) && !list.contains(options.fontNamesIgnoreCheck, v)) {\n            return memo;\n          }\n          realFontList.push(v);\n          console.log(v)\n          return memo + '<li><a data-event=\"fontName\" href=\"#\" data-value=\"' + v + '\">' +\n                          '<i class=\"' + options.iconPrefix + 'check\"></i> <span style=\"font-family:\\'' + v + '\\'\">' + v +\n                        '</span></a></li>';\n        }, '');\n\n        var hasDefaultFont = agent.isFontInstalled(options.defaultFontName);\n        var defaultFontName = (hasDefaultFont) ? options.defaultFontName : realFontList[0];\n\n        var label = '<span class=\"note-current-fontname\">' +\n                        defaultFontName +\n                     '</span>';\n        return tplButton(label, {\n          title: lang.font.name,\n          className: 'note-fontname',\n          dropdown: tplDropdown(items, 'note-check')\n        });\n      },\n      fontsize: function (lang, options) {\n        var items = options.fontSizes.reduce(function (memo, v) {\n          return memo + '<li><a data-event=\"fontSize\" href=\"#\" data-value=\"' + v + '\">' +\n                          '<i class=\"' + options.iconPrefix + options.icons.misc.check + '\"></i> ' + v +\n                        '</a></li>';\n        }, '');\n\n        var label = '<span class=\"note-current-fontsize\">11</span>';\n        return tplButton(label, {\n          title: lang.font.size,\n          className: 'note-fontsize',\n          dropdown: tplDropdown(items, 'note-check')\n        });\n      },\n      color: function (lang, options) {\n        var colorButtonLabel = '<i class=\"' +\n                                  options.iconPrefix + options.icons.color.recent +\n                                '\" style=\"color:black;background-color:yellow;\"></i>';\n\n        var colorButton = tplButton(colorButtonLabel, {\n          className: 'note-recent-color',\n          title: lang.color.recent,\n          event: 'color',\n          value: '{\"backColor\":\"yellow\"}'\n        });\n\n        var items = [\n          '<li><div class=\"btn-group\">',\n          '<div class=\"note-palette-title\">' + lang.color.background + '</div>',\n          '<div class=\"note-color-reset\" data-event=\"backColor\"',\n          ' data-value=\"inherit\" title=\"' + lang.color.transparent + '\">' + lang.color.setTransparent + '</div>',\n          '<div class=\"note-color-palette\" data-target-event=\"backColor\"></div>',\n          '</div><div class=\"btn-group\">',\n          '<div class=\"note-palette-title\">' + lang.color.foreground + '</div>',\n          '<div class=\"note-color-reset\" data-event=\"foreColor\" data-value=\"inherit\" title=\"' + lang.color.reset + '\">',\n          lang.color.resetToDefault,\n          '</div>',\n          '<div class=\"note-color-palette\" data-target-event=\"foreColor\"></div>',\n          '</div></li>'\n        ];\n\n        var moreButton = tplButton('', {\n          title: lang.color.more,\n          dropdown: tplDropdown(items)\n        });\n\n        return colorButton + moreButton;\n      },\n      bold: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.font.bold, {\n          event: 'bold',\n          title: lang.font.bold\n        });\n      },\n      italic: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.font.italic, {\n          event: 'italic',\n          title: lang.font.italic\n        });\n      },\n      underline: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.font.underline, {\n          event: 'underline',\n          title: lang.font.underline\n        });\n      },\n      strikethrough: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.font.strikethrough, {\n          event: 'strikethrough',\n          title: lang.font.strikethrough\n        });\n      },\n      superscript: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.font.superscript, {\n          event: 'superscript',\n          title: lang.font.superscript\n        });\n      },\n      subscript: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.font.subscript, {\n          event: 'subscript',\n          title: lang.font.subscript\n        });\n      },\n      clear: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.font.clear, {\n          event: 'removeFormat',\n          title: lang.font.clear\n        });\n      },\n      ul: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.lists.unordered, {\n          event: 'insertUnorderedList',\n          title: lang.lists.unordered\n        });\n      },\n      ol: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.lists.ordered, {\n          event: 'insertOrderedList',\n          title: lang.lists.ordered\n        });\n      },\n      paragraph: function (lang, options) {\n        var leftButton = tplIconButton(options.iconPrefix + options.icons.paragraph.left, {\n          title: lang.paragraph.left,\n          event: 'justifyLeft'\n        });\n        var centerButton = tplIconButton(options.iconPrefix + options.icons.paragraph.center, {\n          title: lang.paragraph.center,\n          event: 'justifyCenter'\n        });\n        var rightButton = tplIconButton(options.iconPrefix + options.icons.paragraph.right, {\n          title: lang.paragraph.right,\n          event: 'justifyRight'\n        });\n        var justifyButton = tplIconButton(options.iconPrefix + options.icons.paragraph.justify, {\n          title: lang.paragraph.justify,\n          event: 'justifyFull'\n        });\n\n        var outdentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.outdent, {\n          title: lang.paragraph.outdent,\n          event: 'outdent'\n        });\n        var indentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.indent, {\n          title: lang.paragraph.indent,\n          event: 'indent'\n        });\n\n        var dropdown = [\n          '<div class=\"note-align btn-group\">',\n          leftButton + centerButton + rightButton + justifyButton,\n          '</div><div class=\"note-list btn-group\">',\n          indentButton + outdentButton,\n          '</div>'\n        ];\n\n        return tplIconButton(options.iconPrefix + options.icons.paragraph.paragraph, {\n          title: lang.paragraph.paragraph,\n          dropdown: tplDropdown(dropdown, '', 'div')\n        });\n      },\n      height: function (lang, options) {\n        var items = options.lineHeights.reduce(function (memo, v) {\n          return memo + '<li><a data-event=\"lineHeight\" href=\"#\" data-value=\"' + parseFloat(v) + '\">' +\n                          '<i class=\"' + options.iconPrefix + options.icons.misc.check + '\"></i> ' + v +\n                        '</a></li>';\n        }, '');\n\n        return tplIconButton(options.iconPrefix + options.icons.font.height, {\n          title: lang.font.height,\n          dropdown: tplDropdown(items, 'note-check')\n        });\n\n      },\n      help: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.options.help, {\n          event: 'showHelpDialog',\n          title: lang.options.help,\n          hide: true\n        });\n      },\n      fullscreen: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.options.fullscreen, {\n          event: 'fullscreen',\n          title: lang.options.fullscreen\n        });\n      },\n      codeview: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.options.codeview, {\n          event: 'codeview',\n          title: lang.options.codeview\n        });\n      },\n      undo: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.history.undo, {\n          event: 'undo',\n          title: lang.history.undo\n        });\n      },\n      redo: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.history.redo, {\n          event: 'redo',\n          title: lang.history.redo\n        });\n      },\n      hr: function (lang, options) {\n        return tplIconButton(options.iconPrefix + options.icons.hr.insert, {\n          event: 'insertHorizontalRule',\n          title: lang.hr.insert\n        });\n      }\n    };\n\n    var tplPopovers = function (lang, options) {\n      // link popover\n      var tplLinkPopover = function () {\n        var linkButton = tplIconButton(options.iconPrefix + options.icons.link.link, {\n          title: lang.link.link,\n          event: 'showMbrLinkDialog',\n          hide: true\n        });\n        var mbrLinkColor = tplButtonInfo.mbrLinkColor(lang, options);\n        var content = '<a href=\"javascript:void(0)\" style=\"display:none !important\" target=\"_blank\">www.google.com</a>' +\n                      '<div class=\"note-insert btn-group\">' +\n                        linkButton + mbrLinkColor +\n                      '</div>';\n        return tplPopover('note-link-popover', content);\n      };\n\n      // buttons popover\n      var tplButtonPopover = function () {\n        var mbrLink = tplButtonInfo.mbrLink(lang, options);\n        var mbrFonts = tplButtonInfo.mbrFonts(lang, options);\n        var mbrLinkColor = tplButtonInfo.mbrLinkColor(lang, options);\n        var mbrFontSize = tplButtonInfo.mbrFontSize(lang, options);\n\n        // Check for custom toolbar options\n        var tb = options.customToolbar;\n        if (tb) {\n          if (tb.mbrLink === 'off') {\n            mbrLink = '';\n          }\n          if (tb.mbrFonts === 'off') {\n            mbrFonts = '';\n          }\n          if (tb.mbrLinkColor === 'off') {\n            mbrLinkColor = '';\n          }\n          if (tb.mbrFontSize === 'off') {\n            mbrFontSize = '';\n          }\n        }\n\n        var content = '<div class=\"note-insert btn-group\">' +\n                        mbrLink +\n                      '</div>' +\n                      '<div class=\"note-mbrFonts btn-group\">' +\n                        mbrFonts + mbrFontSize + mbrLinkColor +\n                      '</div>';\n\n        return tplPopover('note-button-popover', content);\n      };\n\n      // image popover\n      var tplImagePopover = function () {\n        var fullButton = tplButton('<span class=\"note-fontsize-10\">100%</span>', {\n          title: lang.image.resizeFull,\n          event: 'resize',\n          value: '1'\n        });\n        var halfButton = tplButton('<span class=\"note-fontsize-10\">50%</span>', {\n          title: lang.image.resizeHalf,\n          event: 'resize',\n          value: '0.5'\n        });\n        var quarterButton = tplButton('<span class=\"note-fontsize-10\">25%</span>', {\n          title: lang.image.resizeQuarter,\n          event: 'resize',\n          value: '0.25'\n        });\n\n        var leftButton = tplIconButton(options.iconPrefix + options.icons.image.floatLeft, {\n          title: lang.image.floatLeft,\n          event: 'floatMe',\n          value: 'left'\n        });\n        var rightButton = tplIconButton(options.iconPrefix + options.icons.image.floatRight, {\n          title: lang.image.floatRight,\n          event: 'floatMe',\n          value: 'right'\n        });\n        var justifyButton = tplIconButton(options.iconPrefix + options.icons.image.floatNone, {\n          title: lang.image.floatNone,\n          event: 'floatMe',\n          value: 'none'\n        });\n\n        var roundedButton = tplIconButton(options.iconPrefix + options.icons.image.shapeRounded, {\n          title: lang.image.shapeRounded,\n          event: 'imageShape',\n          value: 'img-rounded'\n        });\n        var circleButton = tplIconButton(options.iconPrefix + options.icons.image.shapeCircle, {\n          title: lang.image.shapeCircle,\n          event: 'imageShape',\n          value: 'img-circle'\n        });\n        var thumbnailButton = tplIconButton(options.iconPrefix + options.icons.image.shapeThumbnail, {\n          title: lang.image.shapeThumbnail,\n          event: 'imageShape',\n          value: 'img-thumbnail'\n        });\n        var noneButton = tplIconButton(options.iconPrefix + options.icons.image.shapeNone, {\n          title: lang.image.shapeNone,\n          event: 'imageShape',\n          value: ''\n        });\n\n        var removeButton = tplIconButton(options.iconPrefix + options.icons.image.remove, {\n          title: lang.image.remove,\n          event: 'removeMedia',\n          value: 'none'\n        });\n\n        var content = (options.disableResizeImage ? '' : '<div class=\"btn-group\">' + fullButton + halfButton + quarterButton + '</div>') +\n                      '<div class=\"btn-group\">' + leftButton + rightButton + justifyButton + '</div><br>' +\n                      '<div class=\"btn-group\">' + roundedButton + circleButton + thumbnailButton + noneButton + '</div>' +\n                      '<div class=\"btn-group\">' + removeButton + '</div>';\n        return tplPopover('note-image-popover', content);\n      };\n\n\n      // air popover\n      var tplAirPopover = function () {\n        var $content = $('<div />');\n        for (var idx = 0, len = options.airPopover.length; idx < len; idx ++) {\n          var group = options.airPopover[idx];\n          $content.append(newGroup(group, lang, options));\n        }\n\n        return tplPopover('note-air-popover', $content.children());\n      };\n\n\n      var $notePopover = $('<div class=\"note-popover\" />');\n\n      $notePopover.append(tplLinkPopover());\n      $notePopover.append(tplImagePopover());\n      $notePopover.append(tplButtonPopover());\n\n      if (options.airMode) {\n        $notePopover.append(tplAirPopover());\n      }\n\n      return $notePopover;\n    };\n\n\n\tvar newGroup = function(group, lang, options){\n\t\t  var $group = $('<div class=\"btn-group\">');\n\t\t  $group.addClass('note-' + group[0]);\n\n\t\t  for (var i = 0, lenGroup = group[1].length; i < lenGroup; i++) {\n\t\t\tvar $button = $(tplButtonInfo[group[1][i]](lang, options));\n\n\t\t\t$button.attr('data-name', group[1][i]);\n\n\t\t\t$group.append($button);\n\t\t  }\n\n\t\t  return $group;\n\t}\n\n\n    var tplHandles = function (options) {\n      return '<div class=\"note-handle\">' +\n               '<div class=\"note-control-selection\">' +\n                 '<div class=\"note-control-selection-bg\"></div>' +\n                 '<div class=\"note-control-holder note-control-nw\"></div>' +\n                 '<div class=\"note-control-holder note-control-ne\"></div>' +\n                 '<div class=\"note-control-holder note-control-sw\"></div>' +\n                 '<div class=\"' +\n                 (options.disableResizeImage ? 'note-control-holder' : 'note-control-sizing') +\n                 ' note-control-se\"></div>' +\n                 (options.disableResizeImage ? '' : '<div class=\"note-control-selection-info\"></div>') +\n               '</div>' +\n             '</div>';\n    };\n\n    /**\n     * shortcut table template\n     * @param {String} title\n     * @param {String} body\n     */\n    var tplShortcut = function (title, keys) {\n      var keyClass = 'note-shortcut-col col-xs-6 note-shortcut-';\n      var body = [];\n\n      for (var i in keys) {\n        if (keys.hasOwnProperty(i)) {\n          body.push(\n            '<div class=\"' + keyClass + 'key\">' + keys[i].kbd + '</div>' +\n            '<div class=\"' + keyClass + 'name\">' + keys[i].text + '</div>'\n            );\n        }\n      }\n\n      return '<div class=\"note-shortcut-row row\"><div class=\"' + keyClass + 'title col-xs-offset-6\">' + title + '</div></div>' +\n             '<div class=\"note-shortcut-row row\">' + body.join('</div><div class=\"note-shortcut-row row\">') + '</div>';\n    };\n\n    var tplShortcutText = function (lang) {\n      var keys = [\n        { kbd: '⌘ + B', text: lang.font.bold },\n        { kbd: '⌘ + I', text: lang.font.italic },\n        { kbd: '⌘ + U', text: lang.font.underline },\n        { kbd: '⌘ + \\\\', text: lang.font.clear }\n      ];\n\n      return tplShortcut(lang.shortcut.textFormatting, keys);\n    };\n\n    var tplShortcutAction = function (lang) {\n      var keys = [\n        { kbd: '⌘ + Z', text: lang.history.undo },\n        { kbd: '⌘ + ⇧ + Z', text: lang.history.redo },\n        { kbd: '⌘ + ]', text: lang.paragraph.indent },\n        { kbd: '⌘ + [', text: lang.paragraph.outdent },\n        { kbd: '⌘ + ENTER', text: lang.hr.insert }\n      ];\n\n      return tplShortcut(lang.shortcut.action, keys);\n    };\n\n    var tplShortcutPara = function (lang) {\n      var keys = [\n        { kbd: '⌘ + ⇧ + L', text: lang.paragraph.left },\n        { kbd: '⌘ + ⇧ + E', text: lang.paragraph.center },\n        { kbd: '⌘ + ⇧ + R', text: lang.paragraph.right },\n        { kbd: '⌘ + ⇧ + J', text: lang.paragraph.justify },\n        { kbd: '⌘ + ⇧ + NUM7', text: lang.lists.ordered },\n        { kbd: '⌘ + ⇧ + NUM8', text: lang.lists.unordered }\n      ];\n\n      return tplShortcut(lang.shortcut.paragraphFormatting, keys);\n    };\n\n    var tplShortcutStyle = function (lang) {\n      var keys = [\n        { kbd: '⌘ + NUM0', text: lang.style.normal },\n        { kbd: '⌘ + NUM1', text: lang.style.h1 },\n        { kbd: '⌘ + NUM2', text: lang.style.h2 },\n        { kbd: '⌘ + NUM3', text: lang.style.h3 },\n        { kbd: '⌘ + NUM4', text: lang.style.h4 },\n        { kbd: '⌘ + NUM5', text: lang.style.h5 },\n        { kbd: '⌘ + NUM6', text: lang.style.h6 }\n      ];\n\n      return tplShortcut(lang.shortcut.documentStyle, keys);\n    };\n\n    var tplExtraShortcuts = function (lang, options) {\n      var extraKeys = options.extraKeys;\n      var keys = [];\n\n      for (var key in extraKeys) {\n        if (extraKeys.hasOwnProperty(key)) {\n          keys.push({ kbd: key, text: extraKeys[key] });\n        }\n      }\n\n      return tplShortcut(lang.shortcut.extraKeys, keys);\n    };\n\n    var tplShortcutTable = function (lang, options) {\n      var colClass = 'class=\"note-shortcut note-shortcut-col col-sm-6 col-xs-12\"';\n      var template = [\n        '<div ' + colClass + '>' + tplShortcutAction(lang, options) + '</div>' +\n        '<div ' + colClass + '>' + tplShortcutText(lang, options) + '</div>',\n        '<div ' + colClass + '>' + tplShortcutStyle(lang, options) + '</div>' +\n        '<div ' + colClass + '>' + tplShortcutPara(lang, options) + '</div>'\n      ];\n\n      if (options.extraKeys) {\n        template.push('<div ' + colClass + '>' + tplExtraShortcuts(lang, options) + '</div>');\n      }\n\n      return '<div class=\"note-shortcut-row row\">' +\n               template.join('</div><div class=\"note-shortcut-row row\">') +\n             '</div>';\n    };\n\n    var replaceMacKeys = function (sHtml) {\n      return sHtml.replace(/⌘/g, 'Ctrl').replace(/⇧/g, 'Shift');\n    };\n\n    var tplDialogInfo = {\n      image: function (lang, options) {\n        var imageLimitation = '';\n        if (options.maximumImageFileSize) {\n          var unit = Math.floor(Math.log(options.maximumImageFileSize) / Math.log(1024));\n          var readableSize = (options.maximumImageFileSize / Math.pow(1024, unit)).toFixed(2) * 1 +\n                             ' ' + ' KMGTP'[unit] + 'B';\n          imageLimitation = '<small>' + lang.image.maximumFileSize + ' : ' + readableSize + '</small>';\n        }\n\n        var body = '<div class=\"form-group row note-group-select-from-files\">' +\n                     '<label>' + lang.image.selectFromFiles + '</label>' +\n                     '<input class=\"note-image-input\" type=\"file\" name=\"files\" accept=\"image/*\" multiple=\"multiple\" />' +\n                     imageLimitation +\n                   '</div>' +\n                   '<div class=\"form-group row\">' +\n                     '<label>' + lang.image.url + '</label>' +\n                     '<input class=\"note-image-url form-control col-md-12\" type=\"text\" />' +\n                   '</div>';\n        var footer = '<button href=\"#\" class=\"btn btn-primary note-image-btn disabled\" disabled>' + lang.image.insert + '</button>';\n        return tplDialog('note-image-dialog', lang.image.insert, body, footer);\n      },\n\n      link: function (lang, options) {\n        var body = '<div class=\"form-group row\">' +\n                     '<label>' + lang.link.textToDisplay + '</label>' +\n                     '<input class=\"note-link-text form-control col-md-12\" type=\"text\" />' +\n                   '</div>' +\n                   '<div class=\"form-group row\">' +\n                     '<label>' + lang.link.url + '</label>' +\n                     '<input class=\"note-link-url form-control col-md-12\" type=\"text\" value=\"http://\" />' +\n                   '</div>' +\n                   (!options.disableLinkTarget ?\n                     '<div class=\"checkbox\">' +\n                       '<label>' + '<input type=\"checkbox\" checked> ' +\n                         lang.link.openInNewWindow +\n                       '</label>' +\n                     '</div>' : ''\n                   );\n        var footer = '<button href=\"#\" class=\"btn btn-primary note-link-btn disabled\" disabled>' + lang.link.insert + '</button>';\n        return tplDialog('note-link-dialog', lang.link.insert, body, footer);\n      },\n\n      help: function (lang, options) {\n        var body = '<a class=\"modal-close pull-right\" aria-hidden=\"true\" tabindex=\"-1\">' + lang.shortcut.close + '</a>' +\n                   '<div class=\"title\">' + lang.shortcut.shortcuts + '</div>' +\n                   (agent.isMac ? tplShortcutTable(lang, options) : replaceMacKeys(tplShortcutTable(lang, options))) +\n                   '<p class=\"text-center\">' +\n                     '<a href=\"//summernote.org/\" target=\"_blank\">Summernote 0.6.17</a> · ' +\n                     '<a href=\"//github.com/summernote/summernote\" target=\"_blank\">Project</a> · ' +\n                     '<a href=\"//github.com/summernote/summernote/issues\" target=\"_blank\">Issues</a>' +\n                   '</p>';\n        return tplDialog('note-help-dialog', '', body, '');\n      }\n    };\n\n    var tplDialogs = function (lang, options) {\n      var dialogs = '';\n\n      $.each(tplDialogInfo, function (idx, tplDialog) {\n        dialogs += tplDialog(lang, options);\n      });\n\n      return '<div class=\"note-dialog\">' + dialogs + '</div>';\n    };\n\n    var tplStatusbar = function () {\n      return '<div class=\"note-resizebar\">' +\n               '<div class=\"note-icon-bar\"></div>' +\n               '<div class=\"note-icon-bar\"></div>' +\n               '<div class=\"note-icon-bar\"></div>' +\n             '</div>';\n    };\n\n    var representShortcut = function (str) {\n      if (agent.isMac) {\n        str = str.replace('CMD', '⌘').replace('SHIFT', '⇧');\n      }\n\n      return str.replace('BACKSLASH', '\\\\')\n                .replace('SLASH', '/')\n                .replace('LEFTBRACKET', '[')\n                .replace('RIGHTBRACKET', ']');\n    };\n\n    // decorator for $.fn.tooltip to disable animations\n    var disableAnimationForTooltips = function () {\n      if (!disableAnimationForTooltips.isExecuted) {\n        disableAnimationForTooltips.isExecuted = true;\n        var fun = $.fn.tooltip;\n        $.fn.tooltip = function(options) {\n          if (typeof options == 'object') {\n            options.animation = false;\n          }\n          return fun.apply(this, arguments);\n        };\n        $.fn.tooltip.__proto__ = fun;\n      }\n    };\n\n    /**\n     * createTooltip\n     *\n     * @param {jQuery} $container\n     * @param {Object} keyMap\n     * @param {String} [sPlacement]\n     */\n    var createTooltip = function ($container, keyMap, sPlacement) {\n      var invertedKeyMap = func.invertObject(keyMap);\n      var $buttons = $container.find('button');\n\n      disableAnimationForTooltips();\n\n      $buttons.each(function (i, elBtn) {\n        // uncomment to enable shortcuts in tooltips\n        /*\n        var $btn = $(elBtn);\n        var sShortcut = invertedKeyMap[$btn.data('event')];\n        if (sShortcut) {\n          $btn.attr('title', function (i, v) {\n            return v + ' (' + representShortcut(sShortcut) + ')';\n          });\n        }\n        */\n      // bootstrap tooltip on btn-group bug\n      // https://github.com/twbs/bootstrap/issues/5687\n      }).tooltip({\n        container: 'body',\n        trigger: 'hover',\n        placement: sPlacement || 'top'\n      }).on('click', function () {\n        $(this).tooltip('hide');\n      });\n    };\n\n    /**\n     * destroyTooltip\n     *\n     * @param {jQuery} $container\n     */\n    var destroyTooltip = function ($container) {\n      $container.find('[data-original-title]').tooltip(\n        parseInt($.fn.tooltip.Constructor.VERSION) > 3 ? 'dispose' : 'destroy'\n      );\n    };\n\n    // createPalette\n    var createPalette = function ($container, options) {\n      var colorInfo = options.colors;\n      $container.find('.note-color-palette').each(function () {\n        var $palette = $(this), eventName = $palette.attr('data-target-event');\n        var paletteContents = [];\n        for (var row = 0, lenRow = colorInfo.length; row < lenRow; row++) {\n          var colors = colorInfo[row];\n          var buttons = [];\n          for (var col = 0, lenCol = colors.length; col < lenCol; col++) {\n            var color = colors[col];\n            buttons.push(['<button type=\"button\" class=\"note-color-btn\" style=\"background-color:', color,\n                           ';\" data-event=\"', eventName,\n                           '\" data-value=\"', color,\n                           '\" title=\"', color,\n                           '\" data-toggle=\"button\" tabindex=\"-1\"></button>'].join(''));\n          }\n          paletteContents.push('<div class=\"note-color-row\">' + buttons.join('') + '</div>');\n        }\n        $palette.html(paletteContents.join(''));\n      });\n    };\n\n    /**\n     * create summernote layout (air mode)\n     *\n     * @param {jQuery} $holder\n     * @param {Object} options\n     */\n    this.createLayoutByAirMode = function ($holder, options) {\n      var langInfo = options.langInfo;\n      var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];\n      var id = func.uniqueId();\n\n      $holder.addClass('note-air-editor note-editable');\n      $holder.attr({\n        'id': 'note-editor-' + id,\n        'contentEditable': true\n      });\n\n      var body = document.body;\n\n      // create Popover\n      var $popover = $(tplPopovers(langInfo, options));\n      $popover.addClass('note-air-layout');\n      $popover.attr('id', 'note-popover-' + id);\n      $popover.appendTo(body);\n      createTooltip($popover, keyMap);\n      createPalette($popover, options);\n\n      // create Handle\n      var $handle = $(tplHandles(options));\n      $handle.addClass('note-air-layout');\n      $handle.attr('id', 'note-handle-' + id);\n      $handle.appendTo(body);\n\n      // create Dialog\n      var $dialog = $(tplDialogs(langInfo, options));\n      $dialog.addClass('note-air-layout');\n      $dialog.attr('id', 'note-dialog-' + id);\n      $dialog.find('button.close, a.modal-close').click(function () {\n        $(this).closest('.modal').modal('hide');\n      });\n      $dialog.appendTo(body);\n    };\n\n\n\t/**\n\t *  add AirPopover buttons\n\t *  @$holder #note-editor-... element\n\t *  @group - button group description [\"group-name\",[\"buttonType\"]]\n\t *  @types - object types = \"link,image,button,air\", all by default\n\t *  @index - index insert to\n\t *  see this.createLayoutByAirMode too\n\t */\n\tthis.addGroup = function($holder, group, types, index){\n\t\ttypes = types || \"link,image,button,air\";\n\n\t\t// create new bottons group\n\t\tvar options = $holder.data(\"options\");\n\t\tvar langInfo = options.langInfo;\n\t\tvar group = newGroup(group, langInfo, options);\n\n\t\t// calc type-button panels class\n\t\ttypes = types.split(\",\");\n\t\tvar classes = \"\";\n\t\tfor (var i=0; i<types.length; i++)\n\t\t\tclasses += (classes?\",\":\"\") + \".note-\" + types[i] + \"-popover\";\n\n\t\tvar id = $holder.attr(\"id\").replace(\"note-editor-\",\"\");\n\t\tvar popoverContent = $(\"#note-popover-\"+id)\n\t\t\t\t.find(classes)\n\t\t\t\t.find(\".popover-content\");\n\t\t// insert at index\n\t\tif (index === 0)\n            popoverContent.prepend(group);\n        else if (index>0)\n            popoverContent.children().eq(index - 1).after(group);\n        else\n\t\t\tgroup.appendTo(popoverContent);\n\t}\n\n\n    /**\n     * create summernote layout (normal mode)\n     *\n     * @param {jQuery} $holder\n     * @param {Object} options\n     */\n    this.createLayoutByFrame = function ($holder, options) {\n      var langInfo = options.langInfo;\n\n      //01. create Editor\n      var $editor = $('<div class=\"note-editor panel panel-default\" />');\n      if (options.width) {\n        $editor.width(options.width);\n      }\n\n      //02. statusbar (resizebar)\n      if (options.height > 0) {\n        $('<div class=\"note-statusbar\">' + (options.disableResizeEditor ? '' : tplStatusbar()) + '</div>').prependTo($editor);\n      }\n\n      //03 editing area\n      var $editingArea = $('<div class=\"note-editing-area\" />');\n      //03. create editable\n      var isContentEditable = !$holder.is(':disabled');\n      var $editable = $('<div class=\"note-editable panel-body\" contentEditable=\"' + isContentEditable + '\"></div>').prependTo($editingArea);\n      if (options.height) {\n        $editable.height(options.height);\n      }\n      if (options.direction) {\n        $editable.attr('dir', options.direction);\n      }\n      var placeholder = $holder.attr('placeholder') || options.placeholder;\n      if (placeholder) {\n        $editable.attr('data-placeholder', placeholder);\n      }\n\n      $editable.html(dom.html($holder) || dom.emptyPara);\n\n      //031. create codable\n      $('<textarea class=\"note-codable\"></textarea>').prependTo($editingArea);\n\n      //04. create Popover\n      var $popover = $(tplPopovers(langInfo, options)).prependTo($editingArea);\n      createPalette($popover, options);\n      createTooltip($popover, keyMap);\n\n      //05. handle(control selection, ...)\n      $(tplHandles(options)).prependTo($editingArea);\n\n      $editingArea.prependTo($editor);\n\n      //06. create Toolbar\n      var $toolbar = $('<div class=\"note-toolbar panel-heading\" />');\n      for (var idx = 0, len = options.toolbar.length; idx < len; idx ++) {\n        var groupName = options.toolbar[idx][0];\n        var groupButtons = options.toolbar[idx][1];\n\n        var $group = $('<div class=\"note-' + groupName + ' btn-group\" />');\n        for (var i = 0, btnLength = groupButtons.length; i < btnLength; i++) {\n          var buttonInfo = tplButtonInfo[groupButtons[i]];\n          // continue creating toolbar even if a button doesn't exist\n          if (!$.isFunction(buttonInfo)) { continue; }\n\n          var $button = $(buttonInfo(langInfo, options));\n          $button.attr('data-name', groupButtons[i]);  // set button's alias, becuase to get button element from $toolbar\n          $group.append($button);\n        }\n        $toolbar.append($group);\n      }\n\n      var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];\n      createPalette($toolbar, options);\n      createTooltip($toolbar, keyMap, 'bottom');\n      $toolbar.prependTo($editor);\n\n      //07. create Dropzone\n      $('<div class=\"note-dropzone\"><div class=\"note-dropzone-message\"></div></div>').prependTo($editor);\n\n      //08. create Dialog\n      var $dialogContainer = options.dialogsInBody ? $(document.body) : $editor;\n      var $dialog = $(tplDialogs(langInfo, options)).prependTo($dialogContainer);\n      $dialog.find('button.close, a.modal-close').click(function () {\n        $(this).closest('.modal').modal('hide');\n      });\n\n      //09. Editor/Holder switch\n      $editor.insertAfter($holder);\n      $holder.hide();\n    };\n\n    this.hasNoteEditor = function ($holder) {\n      return this.noteEditorFromHolder($holder).length > 0;\n    };\n\n    this.noteEditorFromHolder = function ($holder) {\n      if ($holder.hasClass('note-air-editor')) {\n        return $holder;\n      } else if ($holder.next().hasClass('note-editor')) {\n        return $holder.next();\n      } else {\n        return $();\n      }\n    };\n\n    /**\n     * create summernote layout\n     *\n     * @param {jQuery} $holder\n     * @param {Object} options\n     */\n    this.createLayout = function ($holder, options) {\n      if (options.airMode) {\n        this.createLayoutByAirMode($holder, options);\n      } else {\n        this.createLayoutByFrame($holder, options);\n      }\n    };\n\n    /**\n     * returns layoutInfo from holder\n     *\n     * @param {jQuery} $holder - placeholder\n     * @return {Object}\n     */\n    this.layoutInfoFromHolder = function ($holder) {\n      var $editor = this.noteEditorFromHolder($holder);\n      if (!$editor.length) {\n        return;\n      }\n\n      // connect $holder to $editor\n      $editor.data('holder', $holder);\n\n      return dom.buildLayoutInfo($editor);\n    };\n\n    /**\n     * removeLayout\n     *\n     * @param {jQuery} $holder - placeholder\n     * @param {Object} layoutInfo\n     * @param {Object} options\n     *\n     */\n    this.removeLayout = function ($holder, layoutInfo, options) {\n\n      destroyTooltip(layoutInfo.popover());\n\n      if (options.airMode) {\n        $holder.removeClass('note-air-editor note-editable')\n               .removeAttr('id contentEditable');\n\n        layoutInfo.popover().remove();\n        layoutInfo.handle().remove();\n        layoutInfo.dialog().remove();\n      } else {\n        $holder.html(layoutInfo.editable().html());\n\n        if (options.dialogsInBody) {\n          layoutInfo.dialog().remove();\n        }\n        layoutInfo.editor().remove();\n        $holder.show();\n      }\n    };\n\n    /**\n     *\n     * @return {Object}\n     * @return {function(label, options=):string} return.button {@link #tplButton function to make text button}\n     * @return {function(iconClass, options=):string} return.iconButton {@link #tplIconButton function to make icon button}\n     * @return {function(className, title=, body=, footer=):string} return.dialog {@link #tplDialog function to make dialog}\n     */\n    this.getTemplate = function () {\n      return {\n        button: tplButton,\n        iconButton: tplIconButton,\n        dialog: tplDialog\n      };\n    };\n\n    /**\n     * add button information\n     *\n     * @param {String} name button name\n     * @param {Function} buttonInfo function to make button, reference to {@link #tplButton},{@link #tplIconButton}\n     */\n    this.addButtonInfo = function (name, buttonInfo) {\n      tplButtonInfo[name] = buttonInfo;\n    };\n\n    /**\n     *\n     * @param {String} name\n     * @param {Function} dialogInfo function to make dialog, reference to {@link #tplDialog}\n     */\n    this.addDialogInfo = function (name, dialogInfo) {\n      tplDialogInfo[name] = dialogInfo;\n    };\n  };\n\n\n  // jQuery namespace for summernote\n  /**\n   * @class $.summernote\n   *\n   * summernote attribute\n   *\n   * @mixin defaults\n   * @singleton\n   *\n   */\n  $.summernote = $.summernote || {};\n\n  // extends default settings\n  //  - $.summernote.version\n  //  - $.summernote.options\n  //  - $.summernote.lang\n  $.extend($.summernote, defaults);\n\n  var renderer = new Renderer();\n  var eventHandler = new EventHandler();\n\n  $.extend($.summernote, {\n    /** @property {Renderer} */\n    renderer: renderer,\n    /** @property {EventHandler} */\n    eventHandler: eventHandler,\n    /**\n     * @property {Object} core\n     * @property {core.agent} core.agent\n     * @property {core.dom} core.dom\n     * @property {core.range} core.range\n     */\n    core: {\n      agent: agent,\n      list : list,\n      dom: dom,\n      range: range\n    },\n    /**\n     * @property {Object}\n     * pluginEvents event list for plugins\n     * event has name and callback function.\n     *\n     * ```\n     * $.summernote.addPlugin({\n     *     events : {\n     *          'hello' : function(layoutInfo, value, $target) {\n     *              console.log('event name is hello, value is ' + value );\n     *          }\n     *     }\n     * })\n     * ```\n     *\n     * * event name is data-event property.\n     * * layoutInfo is a summernote layout information.\n     * * value is data-value property.\n     */\n    pluginEvents: {},\n\n    plugins : []\n  });\n\n  /**\n   * @method addPlugin\n   *\n   * add Plugin in Summernote\n   *\n   * Summernote can make a own plugin.\n   *\n   * ### Define plugin\n   * ```\n   * // get template function\n   * var tmpl = $.summernote.renderer.getTemplate();\n   *\n   * // add a button\n   * $.summernote.addPlugin({\n   *     buttons : {\n   *        // \"hello\"  is button's namespace.\n   *        \"hello\" : function(lang, options) {\n   *            // make icon button by template function\n   *            return tmpl.iconButton('fa fa-header', {\n   *                // callback function name when button clicked\n   *                event : 'hello',\n   *                // set data-value property\n   *                value : 'hello',\n   *                hide : true\n   *            });\n   *        }\n   *\n   *     },\n   *\n   *     events : {\n   *        \"hello\" : function(layoutInfo, value) {\n   *            // here is event code\n   *        }\n   *     }\n   * });\n   * ```\n   * ### Use a plugin in toolbar\n   *\n   * ```\n   *    $(\"#editor\").summernote({\n   *    ...\n   *    toolbar : [\n   *        // display hello plugin in toolbar\n   *        ['group', [ 'hello' ]]\n   *    ]\n   *    ...\n   *    });\n   * ```\n   *\n   *\n   * @param {Object} plugin\n   * @param {Object} [plugin.buttons] define plugin button. for detail, see to Renderer.addButtonInfo\n   * @param {Object} [plugin.dialogs] define plugin dialog. for detail, see to Renderer.addDialogInfo\n   * @param {Object} [plugin.events] add event in $.summernote.pluginEvents\n   * @param {Object} [plugin.langs] update $.summernote.lang\n   * @param {Object} [plugin.options] update $.summernote.options\n   */\n  $.summernote.addPlugin = function (plugin) {\n\n    // save plugin list\n    $.summernote.plugins.push(plugin);\n\n    if (plugin.buttons) {\n      $.each(plugin.buttons, function (name, button) {\n        renderer.addButtonInfo(name, button);\n      });\n    }\n\n    if (plugin.dialogs) {\n      $.each(plugin.dialogs, function (name, dialog) {\n        renderer.addDialogInfo(name, dialog);\n      });\n    }\n\n    if (plugin.events) {\n      $.each(plugin.events, function (name, event) {\n        $.summernote.pluginEvents[name] = event;\n      });\n    }\n\n    if (plugin.langs) {\n      $.each(plugin.langs, function (locale, lang) {\n        if ($.summernote.lang[locale]) {\n          $.extend($.summernote.lang[locale], lang);\n        }\n      });\n    }\n\n    if (plugin.options) {\n      $.extend($.summernote.options, plugin.options);\n    }\n  };\n\n  /*\n   * Adaptation of color for background\n   */\n  $.summernote.adaptColorForBg = function(color) {\n    return tinycolor(color).toHex() == 'ffffff' ? '#efefef' : color;\n  };\n\n  /*\n   * extend $.fn\n   */\n  $.fn.extend({\n    /**\n     * @method\n     * Initialize summernote\n     *  - create editor layout and attach Mouse and keyboard events.\n     *\n     * ```\n     * $(\"#summernote\").summernote( { options ..} );\n     * ```\n     *\n     * @member $.fn\n     * @param {Object|String} options reference to $.summernote.options\n     * @return {this}\n     */\n    summernote: function () {\n      // check first argument's type\n      //  - {String}: External API call {{module}}.{{method}}\n      //  - {Object}: init options\n      var type = $.type(list.head(arguments));\n      var isExternalAPICalled = type === 'string';\n      var hasInitOptions = type === 'object';\n\n      // extend default options with custom user options\n      var options = hasInitOptions ? list.head(arguments) : {};\n\n      options = $.extend({}, $.summernote.options, options);\n      options.icons = $.extend({}, $.summernote.options.icons, options.icons);\n\n      // Include langInfo in options for later use, e.g. for image drag-n-drop\n      // Setup language info with en-US as default\n      options.langInfo = $.extend(true, {}, $.summernote.lang['en-US'], $.summernote.lang[options.lang]);\n\n      // override plugin options\n      if (!isExternalAPICalled && hasInitOptions) {\n        for (var i = 0, len = $.summernote.plugins.length; i < len; i++) {\n          var plugin = $.summernote.plugins[i];\n\n          if (options.plugin[plugin.name]) {\n            $.summernote.plugins[i] = $.extend(true, plugin, options.plugin[plugin.name]);\n          }\n        }\n      }\n\n      this.each(function (idx, holder) {\n        var $holder = $(holder);\n        var currentOptions = $.extend(true, {}, options);\n\n        // add or remove custom buttons to toolbar\n        var customToolbar = $holder.attr('data-toolbar');\n        if (customToolbar) {\n          if (!currentOptions.customToolbar) {\n            currentOptions.customToolbar = {};\n          }\n\n          // parse string\n          // example:\n          //    in : \"-mbrBtnAdd,mbrBtnRemove,-mbrBtnColor\"\n          //    out: {mbrBtnAdd: 'off', mbrBtnRemove: 'on', mbrBtnColor: 'off'}\n          var customBtns = customToolbar.split(/,\\s|,/g);\n          for (var k in customBtns) {\n            if (/^-/g.test(customBtns[k])) {\n              currentOptions.customToolbar[customBtns[k].replace(/^-/g, '')] = 'off';\n            } else {\n              currentOptions.customToolbar[customBtns[k]] = 'on';\n            }\n          }\n\n          // remove buttons from air popover\n          /* jshint ignore:start */\n          for (var x in currentOptions.airPopover) {\n            for (var y in currentOptions.airPopover[x]) {\n              if (y > 1) continue;\n              var listBtns = currentOptions.airPopover[x][y];\n              if (typeof listBtns === 'object') {\n                // each button check and remove if need\n                for (var z in listBtns) {\n                  var name = listBtns[z];\n                  if (currentOptions.customToolbar[name] === 'off') {\n                    currentOptions.airPopover[x][y].splice(z, 1);\n                  }\n                }\n\n                // check if empty array\n                if (!listBtns.length) {\n                  currentOptions.airPopover[x].splice(y, 1);\n                }\n              }\n            }\n            if (currentOptions.airPopover[x].length === 1) {\n              currentOptions.airPopover.splice(x, 1);\n            }\n          }\n          /* jshint ignore:end */\n        }\n\n        // if layout isn't created yet, createLayout and attach events\n        if (!renderer.hasNoteEditor($holder)) {\n          renderer.createLayout($holder, currentOptions);\n\n          var layoutInfo = renderer.layoutInfoFromHolder($holder);\n          $holder.data('layoutInfo', layoutInfo);\n\n          eventHandler.attach(layoutInfo, currentOptions);\n          eventHandler.attachCustomEvent(layoutInfo, currentOptions);\n        }\n      });\n\n      var $first = this.first();\n      if ($first.length) {\n        var layoutInfo = renderer.layoutInfoFromHolder($first);\n\n        // external API\n        if (isExternalAPICalled) {\n          var moduleAndMethod = list.head(list.from(arguments));\n          var args = list.tail(list.from(arguments));\n\n          // TODO now external API only works for editor\n          var params = [moduleAndMethod, layoutInfo.editable()].concat(args);\n          return eventHandler.invoke.apply(eventHandler, params);\n        } else if (options.focus) {\n          // focus on first editable element for initialize editor\n          layoutInfo.editable().focus();\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * @method\n     *\n     * get the HTML contents of note or set the HTML contents of note.\n     *\n     * * get contents\n     * ```\n     * var content = $(\"#summernote\").code();\n     * ```\n     * * set contents\n     *\n     * ```\n     * $(\"#summernote\").code(html);\n     * ```\n     *\n     * @member $.fn\n     * @param {String} [html] - HTML contents(optional, set)\n     * @return {this|String} - context(set) or HTML contents of note(get).\n     */\n    code: function (html) {\n      // get the HTML contents of note\n      if (html === undefined) {\n        var $holder = this.first();\n        if (!$holder.length) {\n          return;\n        }\n\n        var layoutInfo = renderer.layoutInfoFromHolder($holder);\n        var $editable = layoutInfo && layoutInfo.editable();\n\n        if ($editable && $editable.length) {\n          var isCodeview = eventHandler.invoke('codeview.isActivated', layoutInfo);\n          eventHandler.invoke('codeview.sync', layoutInfo);\n          return isCodeview ? layoutInfo.codable().val() :\n                              layoutInfo.editable().html();\n        }\n        return dom.value($holder);\n      }\n\n      // set the HTML contents of note\n      this.each(function (i, holder) {\n        var layoutInfo = renderer.layoutInfoFromHolder($(holder));\n        var $editable = layoutInfo && layoutInfo.editable();\n        if ($editable) {\n          $editable.html(html);\n        }\n      });\n\n      return this;\n    },\n\n    /**\n     * @method\n     *\n     * destroy Editor Layout and detach Key and Mouse Event\n     *\n     * @member $.fn\n     * @return {this}\n     */\n    destroy: function () {\n      this.each(function (idx, holder) {\n        var $holder = $(holder);\n\n        if (!renderer.hasNoteEditor($holder)) {\n          return;\n        }\n\n        var info = renderer.layoutInfoFromHolder($holder);\n        var options = info.editor().data('options');\n\n        eventHandler.detach(info, options);\n        renderer.removeLayout($holder, info, options);\n      });\n\n      return this;\n    }\n\n  });\n\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/app/builder/summernote/summernote.js\n")},"./web/assets/bootbox/bootbox.min.js":
/*!*******************************************!*\
  !*** ./web/assets/bootbox/bootbox.min.js ***!
  \*******************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * bootbox.js v4.4.0\n *\n * http://bootboxjs.com/license.txt\n */\n!function(a,b){"use strict"; true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined}(this,function a(b,c){"use strict";function d(a){var b=q[o.locale];return b?b[a]:q.en[a]}function e(a,c,d){a.stopPropagation(),a.preventDefault();var e=b.isFunction(d)&&d.call(c,a)===!1;e||c.modal("hide")}function f(a){var b,c=0;for(b in a)c++;return c}function g(a,c){var d=0;b.each(a,function(a,b){c(a,b,d++)})}function h(a){var c,d;if("object"!=typeof a)throw new Error("Please supply an object of options");if(!a.message)throw new Error("Please specify a message");return a=b.extend({},o,a),a.buttons||(a.buttons={}),c=a.buttons,d=f(c),g(c,function(a,e,f){if(b.isFunction(e)&&(e=c[a]={callback:e}),"object"!==b.type(e))throw new Error("button with key "+a+" must be an object");e.label||(e.label=a),e.className||(e.className=2>=d&&f===d-1?"btn-primary":"btn-default")}),a}function i(a,b){var c=a.length,d={};if(1>c||c>2)throw new Error("Invalid argument length");return 2===c||"string"==typeof a[0]?(d[b[0]]=a[0],d[b[1]]=a[1]):d=a[0],d}function j(a,c,d){return b.extend(!0,{},a,i(c,d))}function k(a,b,c,d){var e={className:"bootbox-"+a,buttons:l.apply(null,b)};return m(j(e,d,c),b)}function l(){for(var a={},b=0,c=arguments.length;c>b;b++){var e=arguments[b],f=e.toLowerCase(),g=e.toUpperCase();a[f]={label:d(g)}}return a}function m(a,b){var d={};return g(b,function(a,b){d[b]=!0}),g(a.buttons,function(a){if(d[a]===c)throw new Error("button key "+a+" is not allowed (options are "+b.join("\\n")+")")}),a}var n={dialog:"<div class=\'bootbox modal\' tabindex=\'-1\' role=\'dialog\'><div class=\'modal-dialog\'><div class=\'modal-content\'><div class=\'modal-body\'><div class=\'bootbox-body\'></div></div></div></div></div>",header:"<div class=\'modal-header\'><h4 class=\'modal-title\'></h4></div>",footer:"<div class=\'modal-footer\'></div>",closeButton:"<button type=\'button\' class=\'bootbox-close-button close\' data-dismiss=\'modal\' aria-hidden=\'true\'>&times;</button>",form:"<form class=\'bootbox-form\'></form>",inputs:{text:"<input class=\'bootbox-input bootbox-input-text form-control\' autocomplete=off type=text />",textarea:"<textarea class=\'bootbox-input bootbox-input-textarea form-control\'></textarea>",email:"<input class=\'bootbox-input bootbox-input-email form-control\' autocomplete=\'off\' type=\'email\' />",select:"<select class=\'bootbox-input bootbox-input-select form-control\'></select>",checkbox:"<div class=\'checkbox\'><label><input class=\'bootbox-input bootbox-input-checkbox\' type=\'checkbox\' /></label></div>",date:"<input class=\'bootbox-input bootbox-input-date form-control\' autocomplete=off type=\'date\' />",time:"<input class=\'bootbox-input bootbox-input-time form-control\' autocomplete=off type=\'time\' />",number:"<input class=\'bootbox-input bootbox-input-number form-control\' autocomplete=off type=\'number\' />",password:"<input class=\'bootbox-input bootbox-input-password form-control\' autocomplete=\'off\' type=\'password\' />"}},o={locale:"en",backdrop:"static",animate:!0,className:null,closeButton:!0,show:!0,container:"body"},p={};p.alert=function(){var a;if(a=k("alert",["ok"],["message","callback"],arguments),a.callback&&!b.isFunction(a.callback))throw new Error("alert requires callback property to be a function when provided");return a.buttons.ok.callback=a.onEscape=function(){return b.isFunction(a.callback)?a.callback.call(this):!0},p.dialog(a)},p.confirm=function(){var a;if(a=k("confirm",["cancel","confirm"],["message","callback"],arguments),a.buttons.cancel.callback=a.onEscape=function(){return a.callback.call(this,!1)},a.buttons.confirm.callback=function(){return a.callback.call(this,!0)},!b.isFunction(a.callback))throw new Error("confirm requires a callback");return p.dialog(a)},p.prompt=function(){var a,d,e,f,h,i,k;if(f=b(n.form),d={className:"bootbox-prompt",buttons:l("cancel","confirm"),value:"",inputType:"text"},a=m(j(d,arguments,["title","callback"]),["cancel","confirm"]),i=a.show===c?!0:a.show,a.message=f,a.buttons.cancel.callback=a.onEscape=function(){return a.callback.call(this,null)},a.buttons.confirm.callback=function(){var c;switch(a.inputType){case"text":case"textarea":case"email":case"select":case"date":case"time":case"number":case"password":c=h.val();break;case"checkbox":var d=h.find("input:checked");c=[],g(d,function(a,d){c.push(b(d).val())})}return a.callback.call(this,c)},a.show=!1,!a.title)throw new Error("prompt requires a title");if(!b.isFunction(a.callback))throw new Error("prompt requires a callback");if(!n.inputs[a.inputType])throw new Error("invalid prompt type");switch(h=b(n.inputs[a.inputType]),a.inputType){case"text":case"textarea":case"email":case"date":case"time":case"number":case"password":h.val(a.value);break;case"select":var o={};if(k=a.inputOptions||[],!b.isArray(k))throw new Error("Please pass an array of input options");if(!k.length)throw new Error("prompt with select requires options");g(k,function(a,d){var e=h;if(d.value===c||d.text===c)throw new Error("given options in wrong format");d.group&&(o[d.group]||(o[d.group]=b("<optgroup/>").attr("label",d.group)),e=o[d.group]),e.append("<option value=\'"+d.value+"\'>"+d.text+"</option>")}),g(o,function(a,b){h.append(b)}),h.val(a.value);break;case"checkbox":var q=b.isArray(a.value)?a.value:[a.value];if(k=a.inputOptions||[],!k.length)throw new Error("prompt with checkbox requires options");if(!k[0].value||!k[0].text)throw new Error("given options in wrong format");h=b("<div/>"),g(k,function(c,d){var e=b(n.inputs[a.inputType]);e.find("input").attr("value",d.value),e.find("label").append(d.text),g(q,function(a,b){b===d.value&&e.find("input").prop("checked",!0)}),h.append(e)})}return a.placeholder&&h.attr("placeholder",a.placeholder),a.pattern&&h.attr("pattern",a.pattern),a.maxlength&&h.attr("maxlength",a.maxlength),f.append(h),f.on("submit",function(a){a.preventDefault(),a.stopPropagation(),e.find(".btn-primary").click()}),e=p.dialog(a),e.off("shown.bs.modal"),e.on("shown.bs.modal",function(){h.focus()}),i===!0&&e.modal("show"),e},p.dialog=function(a){a=h(a);var d=b(n.dialog),f=d.find(".modal-dialog"),i=d.find(".modal-body"),j=a.buttons,k="",l={onEscape:a.onEscape};if(b.fn.modal===c)throw new Error("$.fn.modal is not defined; please double check you have included the Bootstrap JavaScript library. See http://getbootstrap.com/javascript/ for more details.");if(g(j,function(a,b){k+="<button data-bb-handler=\'"+a+"\' type=\'button\' class=\'btn "+b.className+"\'>"+b.label+"</button>",l[a]=b.callback}),i.find(".bootbox-body").html(a.message),a.animate===!0&&d.addClass("fade"),a.className&&d.addClass(a.className),"large"===a.size?f.addClass("modal-lg"):"small"===a.size&&f.addClass("modal-sm"),a.title&&i.before(n.header),a.closeButton){var m=b(n.closeButton);a.title?d.find(".modal-header").prepend(m):m.css("margin-top","-10px").prependTo(i)}return a.title&&d.find(".modal-title").html(a.title),k.length&&(i.after(n.footer),d.find(".modal-footer").html(k)),d.on("hidden.bs.modal",function(a){a.target===this&&d.remove()}),d.on("shown.bs.modal",function(){d.find(".btn-primary:first").focus()}),"static"!==a.backdrop&&d.on("click.dismiss.bs.modal",function(a){d.children(".modal-backdrop").length&&(a.currentTarget=d.children(".modal-backdrop").get(0)),a.target===a.currentTarget&&d.trigger("escape.close.bb")}),d.on("escape.close.bb",function(a){l.onEscape&&e(a,d,l.onEscape)}),d.on("click",".modal-footer button",function(a){var c=b(this).data("bb-handler");e(a,d,l[c])}),d.on("click",".bootbox-close-button",function(a){e(a,d,l.onEscape)}),d.on("keyup",function(a){27===a.which&&d.trigger("escape.close.bb")}),b(a.container).append(d),d.modal({backdrop:a.backdrop?"static":!1,keyboard:!1,show:!1}),a.show&&d.modal("show"),d},p.setDefaults=function(){var a={};2===arguments.length?a[arguments[0]]=arguments[1]:a=arguments[0],b.extend(o,a)},p.hideAll=function(){return b(".bootbox").modal("hide"),p};var q={bg_BG:{OK:"Ок",CANCEL:"Отказ",CONFIRM:"Потвърждавам"},br:{OK:"OK",CANCEL:"Cancelar",CONFIRM:"Sim"},cs:{OK:"OK",CANCEL:"Zrušit",CONFIRM:"Potvrdit"},da:{OK:"OK",CANCEL:"Annuller",CONFIRM:"Accepter"},de:{OK:"OK",CANCEL:"Abbrechen",CONFIRM:"Akzeptieren"},el:{OK:"Εντάξει",CANCEL:"Ακύρωση",CONFIRM:"Επιβεβαίωση"},en:{OK:"OK",CANCEL:"Cancel",CONFIRM:"OK"},es:{OK:"OK",CANCEL:"Cancelar",CONFIRM:"Aceptar"},et:{OK:"OK",CANCEL:"Katkesta",CONFIRM:"OK"},fa:{OK:"قبول",CANCEL:"لغو",CONFIRM:"تایید"},fi:{OK:"OK",CANCEL:"Peruuta",CONFIRM:"OK"},fr:{OK:"OK",CANCEL:"Annuler",CONFIRM:"D\'accord"},he:{OK:"אישור",CANCEL:"ביטול",CONFIRM:"אישור"},hu:{OK:"OK",CANCEL:"Mégsem",CONFIRM:"Megerősít"},hr:{OK:"OK",CANCEL:"Odustani",CONFIRM:"Potvrdi"},id:{OK:"OK",CANCEL:"Batal",CONFIRM:"OK"},it:{OK:"OK",CANCEL:"Annulla",CONFIRM:"Conferma"},ja:{OK:"OK",CANCEL:"キャンセル",CONFIRM:"確認"},lt:{OK:"Gerai",CANCEL:"Atšaukti",CONFIRM:"Patvirtinti"},lv:{OK:"Labi",CANCEL:"Atcelt",CONFIRM:"Apstiprināt"},nl:{OK:"OK",CANCEL:"Annuleren",CONFIRM:"Accepteren"},no:{OK:"OK",CANCEL:"Avbryt",CONFIRM:"OK"},pl:{OK:"OK",CANCEL:"Anuluj",CONFIRM:"Potwierdź"},pt:{OK:"OK",CANCEL:"Cancelar",CONFIRM:"Confirmar"},ru:{OK:"OK",CANCEL:"Отмена",CONFIRM:"Применить"},sq:{OK:"OK",CANCEL:"Anulo",CONFIRM:"Prano"},sv:{OK:"OK",CANCEL:"Avbryt",CONFIRM:"OK"},th:{OK:"ตกลง",CANCEL:"ยกเลิก",CONFIRM:"ยืนยัน"},tr:{OK:"Tamam",CANCEL:"İptal",CONFIRM:"Onayla"},zh_CN:{OK:"OK",CANCEL:"取消",CONFIRM:"确认"},zh_TW:{OK:"OK",CANCEL:"取消",CONFIRM:"確認"}};return p.addLocale=function(a,c){return b.each(["OK","CANCEL","CONFIRM"],function(a,b){if(!c[b])throw new Error("Please supply a translation for \'"+b+"\'")}),q[a]={OK:c.OK,CANCEL:c.CANCEL,CONFIRM:c.CONFIRM},p},p.removeLocale=function(a){return delete q[a],p},p.setLocale=function(a){return p.setDefaults("locale",a)},p.init=function(c){return a(c||b)},p});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/assets/bootbox/bootbox.min.js\n')},"./web/assets/less.js/less.min.js":
/*!****************************************!*\
  !*** ./web/assets/less.js/less.min.js ***!
  \****************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(setImmediate) {var require;var require;/*!\n * Less - Leaner CSS v2.5.1\n * http://lesscss.org\n *\n * Copyright (c) 2009-2015, Alexis Sellier <self@cloudhead.net>\n * Licensed under the Apache v2 License.\n *\n */\n\n /** * @license Apache v2\n */\n\n!function(a){if(true)module.exports=a();else { var b; }}(function(){return function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i="function"==typeof require&&require;if(!h&&i)return require(g,!0);if(f)return f(g,!0);var j=new Error("Cannot find module \'"+g+"\'");throw j.code="MODULE_NOT_FOUND",j}var k=c[g]={exports:{}};b[g][0].call(k.exports,function(a){var c=b[g][1][a];return e(c?c:a)},k,k.exports,a,b,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;d.length>g;g++)e(d[g]);return e}({1:[function(a,b){var c=a("./utils").addDataAttr,d=a("./browser");b.exports=function(a,b){c(b,d.currentScript(a)),void 0===b.isFileProtocol&&(b.isFileProtocol=/^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(a.location.protocol)),b.async=b.async||!1,b.fileAsync=b.fileAsync||!1,b.poll=b.poll||(b.isFileProtocol?1e3:1500),b.env=b.env||("127.0.0.1"==a.location.hostname||"0.0.0.0"==a.location.hostname||"localhost"==a.location.hostname||a.location.port&&a.location.port.length>0||b.isFileProtocol?"development":"production");var e=/!dumpLineNumbers:(comments|mediaquery|all)/.exec(a.location.hash);e&&(b.dumpLineNumbers=e[1]),void 0===b.useFileCache&&(b.useFileCache=!0),void 0===b.onReady&&(b.onReady=!0)}},{"./browser":3,"./utils":9}],2:[function(a,b){a("promise/polyfill.js");var c=window.less||{};a("./add-default-options")(window,c);var d=b.exports=a("./index")(window,c);window.less=d,c.onReady&&(/!watch/.test(window.location.hash)&&d.watch(),d.registerStylesheetsImmediately(),d.pageLoadFinished=d.refresh("development"===d.env))},{"./add-default-options":1,"./index":7,"promise/polyfill.js":94}],3:[function(a,b){var c=a("./utils");b.exports={createCSS:function(a,b,d){var e=d.href||"",f="less:"+(d.title||c.extractId(e)),g=a.getElementById(f),h=!1,i=a.createElement("style");i.setAttribute("type","text/css"),d.media&&i.setAttribute("media",d.media),i.id=f,i.styleSheet||(i.appendChild(a.createTextNode(b)),h=null!==g&&g.childNodes.length>0&&i.childNodes.length>0&&g.firstChild.nodeValue===i.firstChild.nodeValue);var j=a.getElementsByTagName("head")[0];if(null===g||h===!1){var k=d&&d.nextSibling||null;k?k.parentNode.insertBefore(i,k):j.appendChild(i)}if(g&&h===!1&&g.parentNode.removeChild(g),i.styleSheet)try{i.styleSheet.cssText=b}catch(l){throw new Error("Couldn\'t reassign styleSheet.cssText.")}},currentScript:function(a){var b=a.document;return b.currentScript||function(){var a=b.getElementsByTagName("script");return a[a.length-1]}()}}},{"./utils":9}],4:[function(a,b){b.exports=function(a,b,c){var d=null;if("development"!==b.env)try{d="undefined"==typeof a.localStorage?null:a.localStorage}catch(e){}return{setCSS:function(a,b,e){if(d){c.info("saving "+a+" to cache.");try{d.setItem(a,e),d.setItem(a+":timestamp",b)}catch(f){c.error(\'failed to save "\'+a+\'" to local storage for caching.\')}}},getCSS:function(a,b){var c=d&&d.getItem(a),e=d&&d.getItem(a+":timestamp");return e&&b.lastModified&&new Date(b.lastModified).valueOf()===new Date(e).valueOf()?c:void 0}}}},{}],5:[function(a,b){var c=a("./utils"),d=a("./browser");b.exports=function(a,b,e){function f(b,f){var g,h,i="less-error-message:"+c.extractId(f||""),j=\'<li><label>{line}</label><pre class="{class}">{content}</pre></li>\',k=a.document.createElement("div"),l=[],m=b.filename||f,n=m.match(/([^\\/]+(\\?.*)?)$/)[1];k.id=i,k.className="less-error-message",h="<h3>"+(b.type||"Syntax")+"Error: "+(b.message||"There is an error in your .less file")+\'</h3><p>in <a href="\'+m+\'">\'+n+"</a> ";var o=function(a,b,c){void 0!==a.extract[b]&&l.push(j.replace(/\\{line\\}/,(parseInt(a.line,10)||0)+(b-1)).replace(/\\{class\\}/,c).replace(/\\{content\\}/,a.extract[b]))};b.extract&&(o(b,0,""),o(b,1,"line"),o(b,2,""),h+="on line "+b.line+", column "+(b.column+1)+":</p><ul>"+l.join("")+"</ul>"),b.stack&&(b.extract||e.logLevel>=4)&&(h+="<br/>Stack Trace</br />"+b.stack.split("\\n").slice(1).join("<br/>")),k.innerHTML=h,d.createCSS(a.document,[".less-error-message ul, .less-error-message li {","list-style-type: none;","margin-right: 15px;","padding: 4px 0;","margin: 0;","}",".less-error-message label {","font-size: 12px;","margin-right: 15px;","padding: 4px 0;","color: #cc7777;","}",".less-error-message pre {","color: #dd6666;","padding: 4px 0;","margin: 0;","display: inline-block;","}",".less-error-message pre.line {","color: #ff0000;","}",".less-error-message h3 {","font-size: 20px;","font-weight: bold;","padding: 15px 0 5px 0;","margin: 0;","}",".less-error-message a {","color: #10a","}",".less-error-message .error {","color: red;","font-weight: bold;","padding-bottom: 2px;","border-bottom: 1px dashed red;","}"].join("\\n"),{title:"error-message"}),k.style.cssText=["font-family: Arial, sans-serif","border: 1px solid #e00","background-color: #eee","border-radius: 5px","-webkit-border-radius: 5px","-moz-border-radius: 5px","color: #e00","padding: 15px","margin-bottom: 15px"].join(";"),"development"===e.env&&(g=setInterval(function(){var b=a.document,c=b.body;c&&(b.getElementById(i)?c.replaceChild(k,b.getElementById(i)):c.insertBefore(k,c.firstChild),clearInterval(g))},10))}function g(a,b){e.errorReporting&&"html"!==e.errorReporting?"console"===e.errorReporting?k(a,b):"function"==typeof e.errorReporting&&e.errorReporting("add",a,b):f(a,b)}function h(b){var d=a.document.getElementById("less-error-message:"+c.extractId(b));d&&d.parentNode.removeChild(d)}function i(){}function j(a){e.errorReporting&&"html"!==e.errorReporting?"console"===e.errorReporting?i(a):"function"==typeof e.errorReporting&&e.errorReporting("remove",a):h(a)}function k(a,c){var d="{line} {content}",f=a.filename||c,g=[],h=(a.type||"Syntax")+"Error: "+(a.message||"There is an error in your .less file")+" in "+f+" ",i=function(a,b,c){void 0!==a.extract[b]&&g.push(d.replace(/\\{line\\}/,(parseInt(a.line,10)||0)+(b-1)).replace(/\\{class\\}/,c).replace(/\\{content\\}/,a.extract[b]))};a.extract&&(i(a,0,""),i(a,1,"line"),i(a,2,""),h+="on line "+a.line+", column "+(a.column+1)+":\\n"+g.join("\\n")),a.stack&&(a.extract||e.logLevel>=4)&&(h+="\\nStack Trace\\n"+a.stack),b.logger.error(h)}return{add:g,remove:j}}},{"./browser":3,"./utils":9}],6:[function(a,b){b.exports=function(b,c){function d(){if(window.XMLHttpRequest&&!("file:"===window.location.protocol&&"ActiveXObject"in window))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(a){return c.error("browser doesn\'t support AJAX."),null}}var e=a("../less/environment/abstract-file-manager.js"),f={},g=function(){};return g.prototype=new e,g.prototype.alwaysMakePathsAbsolute=function(){return!0},g.prototype.join=function(a,b){return a?this.extractUrlParts(b,a).path:b},g.prototype.doXHR=function(a,e,f,g){function h(b,c,d){b.status>=200&&300>b.status?c(b.responseText,b.getResponseHeader("Last-Modified")):"function"==typeof d&&d(b.status,a)}var i=d(),j=b.isFileProtocol?b.fileAsync:b.async;"function"==typeof i.overrideMimeType&&i.overrideMimeType("text/css"),c.debug("XHR: Getting \'"+a+"\'"),i.open("GET",a,j),i.setRequestHeader("Accept",e||"text/x-less, text/css; q=0.9, */*; q=0.5"),i.send(null),b.isFileProtocol&&!b.fileAsync?0===i.status||i.status>=200&&300>i.status?f(i.responseText):g(i.status,a):j?i.onreadystatechange=function(){4==i.readyState&&h(i,f,g)}:h(i,f,g)},g.prototype.supports=function(){return!0},g.prototype.clearFileCache=function(){f={}},g.prototype.loadFile=function(a,b,c,d,e){b&&!this.isPathAbsolute(a)&&(a=b+a),c=c||{};var g=this.extractUrlParts(a,window.location.href),h=g.url;if(c.useFileCache&&f[h])try{var i=f[h];e(null,{contents:i,filename:h,webInfo:{lastModified:new Date}})}catch(j){e({filename:h,message:"Error loading file "+h+" error was "+j.message})}else this.doXHR(h,c.mime,function(a,b){f[h]=a,e(null,{contents:a,filename:h,webInfo:{lastModified:b}})},function(a,b){e({type:"File",message:"\'"+b+"\' wasn\'t found ("+a+")",href:h})})},g}},{"../less/environment/abstract-file-manager.js":14}],7:[function(a,b){var c=a("./utils").addDataAttr,d=a("./browser");b.exports=function(b,e){function f(a){return e.postProcessor&&"function"==typeof e.postProcessor&&(a=e.postProcessor.call(a,a)||a),a}function g(a){var b={};for(var c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}function h(a,b){var c=Array.prototype.slice.call(arguments,2);return function(){var d=c.concat(Array.prototype.slice.call(arguments,0));return a.apply(b,d)}}function i(a){for(var b,c=m.getElementsByTagName("style"),d=0;c.length>d;d++)if(b=c[d],b.type.match(t)){var f=g(e);f.modifyVars=a;var i=b.innerHTML||"";f.filename=m.location.href.replace(/#.*$/,""),n.render(i,f,h(function(a,b,c){b?r.add(b,"inline"):(a.type="text/css",a.styleSheet?a.styleSheet.cssText=c.css:a.innerHTML=c.css)},null,b))}}function j(a,b,d,h,i){function j(c){var e=c.contents,g=c.filename,i=c.webInfo,j={currentDirectory:q.getPath(g),filename:g,rootFilename:g,relativeUrls:k.relativeUrls};if(j.entryPath=j.currentDirectory,j.rootpath=k.rootpath||j.currentDirectory,i&&(i.remaining=h,!k.modifyVars)){var l=s.getCSS(g,i);if(!d&&l)return i.local=!0,void b(null,l,e,a,i,g)}r.remove(g),k.rootFileInfo=j,n.render(e,k,function(c,d){c?(c.href=g,b(c)):(d.css=f(d.css),k.modifyVars||s.setCSS(a.href,i.lastModified,d.css),b(null,d.css,e,a,i,g))})}var k=g(e);c(k,a),k.mime=a.type,i&&(k.modifyVars=i),q.loadFile(a.href,null,k,o,function(a,c){return a?void b(a):void j(c)})}function k(a,b,c){for(var d=0;n.sheets.length>d;d++)j(n.sheets[d],a,b,n.sheets.length-(d+1),c)}function l(){"development"===n.env&&(n.watchTimer=setInterval(function(){n.watchMode&&(q.clearFileCache(),k(function(a,c,e,f){a?r.add(a,a.href||f.href):c&&d.createCSS(b.document,c,f)}))},e.poll))}var m=b.document,n=a("../less")();n.options=e;var o=n.environment,p=a("./file-manager")(e,n.logger),q=new p;o.addFileManager(q),n.FileManager=p,a("./log-listener")(n,e);var r=a("./error-reporting")(b,n,e),s=n.cache=e.cache||a("./cache")(b,e,n.logger);e.functions&&n.functions.functionRegistry.addMultiple(e.functions);var t=/^text\\/(x-)?less$/;return n.watch=function(){return n.watchMode||(n.env="development",l()),this.watchMode=!0,!0},n.unwatch=function(){return clearInterval(n.watchTimer),this.watchMode=!1,!1},n.registerStylesheetsImmediately=function(){var a=m.getElementsByTagName("link");n.sheets=[];for(var b=0;a.length>b;b++)("stylesheet/less"===a[b].rel||a[b].rel.match(/stylesheet/)&&a[b].type.match(t))&&n.sheets.push(a[b])},n.registerStylesheets=function(){return new Promise(function(a){n.registerStylesheetsImmediately(),a()})},n.modifyVars=function(a){return n.refresh(!0,a,!1)},n.refresh=function(a,c,e){return(a||e)&&e!==!1&&q.clearFileCache(),new Promise(function(e,f){var g,h,j;g=h=new Date,k(function(a,c,i,k,l){return a?(r.add(a,a.href||k.href),void f(a)):(n.logger.info(l.local?"loading "+k.href+" from cache.":"rendered "+k.href+" successfully."),d.createCSS(b.document,c,k),n.logger.info("css for "+k.href+" generated in "+(new Date-h)+"ms"),0===l.remaining&&(j=new Date-g,n.logger.info("less has finished. css generated in "+j+"ms"),e({startTime:g,endTime:h,totalMilliseconds:j,sheets:n.sheets.length})),void(h=new Date))},a,c),i(c)})},n.refreshStyles=i,n}},{"../less":29,"./browser":3,"./cache":4,"./error-reporting":5,"./file-manager":6,"./log-listener":8,"./utils":9}],8:[function(a,b){b.exports=function(a,b){var c=4,d=3,e=2,f=1;b.logLevel="undefined"!=typeof b.logLevel?b.logLevel:"development"===b.env?d:f,b.loggers||(b.loggers=[{debug:function(a){b.logLevel>=c&&console.log(a)},info:function(a){b.logLevel>=d&&console.log(a)},warn:function(a){b.logLevel>=e&&console.warn(a)},error:function(a){b.logLevel>=f&&console.error(a)}}]);for(var g=0;b.loggers.length>g;g++)a.logger.addListener(b.loggers[g])}},{}],9:[function(a,b){b.exports={extractId:function(a){return a.replace(/^[a-z-]+:\\/+?[^\\/]+/,"").replace(/[\\?\\&]livereload=\\w+/,"").replace(/^\\//,"").replace(/\\.[a-zA-Z]+$/,"").replace(/[^\\.\\w-]+/g,"-").replace(/\\./g,":")},addDataAttr:function(a,b){for(var c in b.dataset)if(b.dataset.hasOwnProperty(c))if("env"===c||"dumpLineNumbers"===c||"rootpath"===c||"errorReporting"===c)a[c]=b.dataset[c];else try{a[c]=JSON.parse(b.dataset[c])}catch(d){}}}},{}],10:[function(a,b){var c={};b.exports=c;var d=function(a,b,c){if(a)for(var d=0;c.length>d;d++)a.hasOwnProperty(c[d])&&(b[c[d]]=a[c[d]])},e=["paths","relativeUrls","rootpath","strictImports","insecure","dumpLineNumbers","compress","syncImport","chunkInput","mime","useFileCache","processImports","reference","pluginManager"];c.Parse=function(a){d(a,this,e),"string"==typeof this.paths&&(this.paths=[this.paths])};var f=["paths","compress","ieCompat","strictMath","strictUnits","sourceMap","importMultiple","urlArgs","javascriptEnabled","pluginManager","importantScope"];c.Eval=function(a,b){d(a,this,f),"string"==typeof this.paths&&(this.paths=[this.paths]),this.frames=b||[],this.importantScope=this.importantScope||[]},c.Eval.prototype.inParenthesis=function(){this.parensStack||(this.parensStack=[]),this.parensStack.push(!0)},c.Eval.prototype.outOfParenthesis=function(){this.parensStack.pop()},c.Eval.prototype.isMathOn=function(){return this.strictMath?this.parensStack&&this.parensStack.length:!0},c.Eval.prototype.isPathRelative=function(a){return!/^(?:[a-z-]+:|\\/|#)/i.test(a)},c.Eval.prototype.normalizePath=function(a){var b,c=a.split("/").reverse();for(a=[];0!==c.length;)switch(b=c.pop()){case".":break;case"..":0===a.length||".."===a[a.length-1]?a.push(b):a.pop();break;default:a.push(b)}return a.join("/")}},{}],11:[function(a,b){b.exports={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgrey:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"}},{}],12:[function(a,b){b.exports={colors:a("./colors"),unitConversions:a("./unit-conversions")}},{"./colors":11,"./unit-conversions":13}],13:[function(a,b){b.exports={length:{m:1,cm:.01,mm:.001,"in":.0254,px:.0254/96,pt:.0254/72,pc:.0254/72*12},duration:{s:1,ms:.001},angle:{rad:1/(2*Math.PI),deg:1/360,grad:.0025,turn:1}}},{}],14:[function(a,b){var c=function(){};c.prototype.getPath=function(a){var b=a.lastIndexOf("?");return b>0&&(a=a.slice(0,b)),b=a.lastIndexOf("/"),0>b&&(b=a.lastIndexOf("\\\\")),0>b?"":a.slice(0,b+1)},c.prototype.tryAppendExtension=function(a,b){return/(\\.[a-z]*$)|([\\?;].*)$/.test(a)?a:a+b},c.prototype.tryAppendLessExtension=function(a){return this.tryAppendExtension(a,".less")},c.prototype.supportsSync=function(){return!1},c.prototype.alwaysMakePathsAbsolute=function(){return!1},c.prototype.isPathAbsolute=function(a){return/^(?:[a-z-]+:|\\/|\\\\|#)/i.test(a)},c.prototype.join=function(a,b){return a?a+b:b},c.prototype.pathDiff=function(a,b){var c,d,e,f,g=this.extractUrlParts(a),h=this.extractUrlParts(b),i="";if(g.hostPart!==h.hostPart)return"";for(d=Math.max(h.directories.length,g.directories.length),c=0;d>c&&h.directories[c]===g.directories[c];c++);for(f=h.directories.slice(c),e=g.directories.slice(c),c=0;f.length-1>c;c++)i+="../";for(c=0;e.length-1>c;c++)i+=e[c]+"/";return i},c.prototype.extractUrlParts=function(a,b){var c,d,e=/^((?:[a-z-]+:)?\\/+?(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i,f=a.match(e),g={},h=[];if(!f)throw new Error("Could not parse sheet href - \'"+a+"\'");if(b&&(!f[1]||f[2])){if(d=b.match(e),!d)throw new Error("Could not parse page url - \'"+b+"\'");f[1]=f[1]||d[1]||"",f[2]||(f[3]=d[3]+f[3])}if(f[3]){for(h=f[3].replace(/\\\\/g,"/").split("/"),c=0;h.length>c;c++)"."===h[c]&&(h.splice(c,1),c-=1);for(c=0;h.length>c;c++)".."===h[c]&&c>0&&(h.splice(c-1,2),c-=2)}return g.hostPart=f[1],g.directories=h,g.path=(f[1]||"")+h.join("/"),g.fileUrl=g.path+(f[4]||""),g.url=g.fileUrl+(f[5]||""),g},b.exports=c},{}],15:[function(a,b){var c=a("../logger"),d=function(a,b){this.fileManagers=b||[],a=a||{};for(var c=["encodeBase64","mimeLookup","charsetLookup","getSourceMapGenerator"],d=[],e=d.concat(c),f=0;e.length>f;f++){var g=e[f],h=a[g];h?this[g]=h.bind(a):d.length>f&&this.warn("missing required function in environment - "+g)}};d.prototype.getFileManager=function(a,b,d,e,f){a||c.warn("getFileManager called with no filename.. Please report this issue. continuing."),null==b&&c.warn("getFileManager called with null directory.. Please report this issue. continuing.");var g=this.fileManagers;d.pluginManager&&(g=[].concat(g).concat(d.pluginManager.getFileManagers()));for(var h=g.length-1;h>=0;h--){var i=g[h];if(i[f?"supportsSync":"supports"](a,b,d,e))return i}return null},d.prototype.addFileManager=function(a){this.fileManagers.push(a)},d.prototype.clearFileManagers=function(){this.fileManagers=[]},b.exports=d},{"../logger":31}],16:[function(a){function b(a,b,d){var e,f,g,h,i=b.alpha,j=d.alpha,k=[];g=j+i*(1-j);for(var l=0;3>l;l++)e=b.rgb[l]/255,f=d.rgb[l]/255,h=a(e,f),g&&(h=(j*f+i*(e-j*(e+f-h)))/g),k[l]=255*h;return new c(k,g)}var c=a("../tree/color"),d=a("./function-registry"),e={multiply:function(a,b){return a*b},screen:function(a,b){return a+b-a*b},overlay:function(a,b){return a*=2,1>=a?e.multiply(a,b):e.screen(a-1,b)},softlight:function(a,b){var c=1,d=a;return b>.5&&(d=1,c=a>.25?Math.sqrt(a):((16*a-12)*a+4)*a),a-(1-2*b)*d*(c-a)},hardlight:function(a,b){return e.overlay(b,a)},difference:function(a,b){return Math.abs(a-b)},exclusion:function(a,b){return a+b-2*a*b},average:function(a,b){return(a+b)/2},negation:function(a,b){return 1-Math.abs(a+b-1)}};for(var f in e)e.hasOwnProperty(f)&&(b[f]=b.bind(null,e[f]));d.addMultiple(b)},{"../tree/color":48,"./function-registry":21}],17:[function(a){function b(a){return Math.min(1,Math.max(0,a))}function c(a){return f.hsla(a.h,a.s,a.l,a.a)}function d(a){if(a instanceof g)return parseFloat(a.unit.is("%")?a.value/100:a.value);if("number"==typeof a)return a;throw{type:"Argument",message:"color functions take numbers as parameters"}}function e(a,b){return a instanceof g&&a.unit.is("%")?parseFloat(a.value*b/100):d(a)}var f,g=a("../tree/dimension"),h=a("../tree/color"),i=a("../tree/quoted"),j=a("../tree/anonymous"),k=a("./function-registry");f={rgb:function(a,b,c){return f.rgba(a,b,c,1)},rgba:function(a,b,c,f){var g=[a,b,c].map(function(a){return e(a,255)});return f=d(f),new h(g,f)},hsl:function(a,b,c){return f.hsla(a,b,c,1)},hsla:function(a,c,e,g){function h(a){return a=0>a?a+1:a>1?a-1:a,1>6*a?j+(i-j)*a*6:1>2*a?i:2>3*a?j+(i-j)*(2/3-a)*6:j}a=d(a)%360/360,c=b(d(c)),e=b(d(e)),g=b(d(g));var i=.5>=e?e*(c+1):e+c-e*c,j=2*e-i;return f.rgba(255*h(a+1/3),255*h(a),255*h(a-1/3),g)},hsv:function(a,b,c){return f.hsva(a,b,c,1)},hsva:function(a,b,c,e){a=d(a)%360/360*360,b=d(b),c=d(c),e=d(e);var g,h;g=Math.floor(a/60%6),h=a/60-g;var i=[c,c*(1-b),c*(1-h*b),c*(1-(1-h)*b)],j=[[0,3,1],[2,0,1],[1,0,3],[1,2,0],[3,1,0],[0,1,2]];return f.rgba(255*i[j[g][0]],255*i[j[g][1]],255*i[j[g][2]],e)},hue:function(a){return new g(a.toHSL().h)},saturation:function(a){return new g(100*a.toHSL().s,"%")},lightness:function(a){return new g(100*a.toHSL().l,"%")},hsvhue:function(a){return new g(a.toHSV().h)},hsvsaturation:function(a){return new g(100*a.toHSV().s,"%")},hsvvalue:function(a){return new g(100*a.toHSV().v,"%")},red:function(a){return new g(a.rgb[0])},green:function(a){return new g(a.rgb[1])},blue:function(a){return new g(a.rgb[2])},alpha:function(a){return new g(a.toHSL().a)},luma:function(a){return new g(a.luma()*a.alpha*100,"%")},luminance:function(a){var b=.2126*a.rgb[0]/255+.7152*a.rgb[1]/255+.0722*a.rgb[2]/255;return new g(b*a.alpha*100,"%")},saturate:function(a,d,e){if(!a.rgb)return null;var f=a.toHSL();return f.s+="undefined"!=typeof e&&"relative"===e.value?f.s*d.value/100:d.value/100,f.s=b(f.s),c(f)},desaturate:function(a,d,e){var f=a.toHSL();return f.s-="undefined"!=typeof e&&"relative"===e.value?f.s*d.value/100:d.value/100,f.s=b(f.s),c(f)},lighten:function(a,d,e){var f=a.toHSL();return f.l+="undefined"!=typeof e&&"relative"===e.value?f.l*d.value/100:d.value/100,f.l=b(f.l),c(f)},darken:function(a,d,e){var f=a.toHSL();return f.l-="undefined"!=typeof e&&"relative"===e.value?f.l*d.value/100:d.value/100,f.l=b(f.l),c(f)},fadein:function(a,d,e){var f=a.toHSL();return f.a+="undefined"!=typeof e&&"relative"===e.value?f.a*d.value/100:d.value/100,f.a=b(f.a),c(f)},fadeout:function(a,d,e){var f=a.toHSL();return f.a-="undefined"!=typeof e&&"relative"===e.value?f.a*d.value/100:d.value/100,f.a=b(f.a),c(f)},fade:function(a,d){var e=a.toHSL();return e.a=d.value/100,e.a=b(e.a),c(e)},spin:function(a,b){var d=a.toHSL(),e=(d.h+b.value)%360;return d.h=0>e?360+e:e,c(d)},mix:function(a,b,c){a.toHSL&&b.toHSL||(console.log(b.type),console.dir(b)),c||(c=new g(50));var d=c.value/100,e=2*d-1,f=a.toHSL().a-b.toHSL().a,i=((e*f==-1?e:(e+f)/(1+e*f))+1)/2,j=1-i,k=[a.rgb[0]*i+b.rgb[0]*j,a.rgb[1]*i+b.rgb[1]*j,a.rgb[2]*i+b.rgb[2]*j],l=a.alpha*d+b.alpha*(1-d);return new h(k,l)},greyscale:function(a){return f.desaturate(a,new g(100))},contrast:function(a,b,c,e){if(!a.rgb)return null;if("undefined"==typeof c&&(c=f.rgba(255,255,255,1)),"undefined"==typeof b&&(b=f.rgba(0,0,0,1)),b.luma()>c.luma()){var g=c;c=b,b=g}return e="undefined"==typeof e?.43:d(e),a.luma()<e?c:b},argb:function(a){return new j(a.toARGB())},color:function(a){if(a instanceof i&&/^#([a-f0-9]{6}|[a-f0-9]{3})$/i.test(a.value))return new h(a.value.slice(1));if(a instanceof h||(a=h.fromKeyword(a.value)))return a.value=void 0,a;throw{type:"Argument",message:"argument must be a color keyword or 3/6 digit hex e.g. #FFF"}},tint:function(a,b){return f.mix(f.rgb(255,255,255),a,b)},shade:function(a,b){return f.mix(f.rgb(0,0,0),a,b)}},k.addMultiple(f)},{"../tree/anonymous":44,"../tree/color":48,"../tree/dimension":54,"../tree/quoted":71,"./function-registry":21}],18:[function(a,b){b.exports=function(b){var c=a("../tree/quoted"),d=a("../tree/url"),e=a("./function-registry"),f=function(a,b){return new d(b,a.index,a.currentFileInfo).eval(a.context)},g=a("../logger");e.add("data-uri",function(a,e){e||(e=a,a=null);var h=a&&a.value,i=e.value,j=this.currentFileInfo,k=j.relativeUrls?j.currentDirectory:j.entryPath,l=i.indexOf("#"),m="";-1!==l&&(m=i.slice(l),i=i.slice(0,l));var n=b.getFileManager(i,k,this.context,b,!0);if(!n)return f(this,e);var o=!1;if(a)o=/;base64$/.test(h);else{if(h=b.mimeLookup(i),"image/svg+xml"===h)o=!1;else{var p=b.charsetLookup(h);o=["US-ASCII","UTF-8"].indexOf(p)<0}o&&(h+=";base64")}var q=n.loadFileSync(i,k,this.context,b);if(!q.contents)return g.warn("Skipped data-uri embedding of "+i+" because file not found"),f(this,e||a);var r=q.contents;if(o&&!b.encodeBase64)return f(this,e);r=o?b.encodeBase64(r):encodeURIComponent(r);var s="data:"+h+","+r+m,t=32768;return s.length>=t&&this.context.ieCompat!==!1?(g.warn("Skipped data-uri embedding of "+i+" because its size ("+s.length+" characters) exceeds IE8-safe "+t+" characters!"),f(this,e||a)):new d(new c(\'"\'+s+\'"\',s,!1,this.index,this.currentFileInfo),this.index,this.currentFileInfo)})}},{"../logger":31,"../tree/quoted":71,"../tree/url":78,"./function-registry":21}],19:[function(a,b){var c=a("../tree/keyword"),d=a("./function-registry"),e={eval:function(){var a=this.value_,b=this.error_;if(b)throw b;return null!=a?a?c.True:c.False:void 0},value:function(a){this.value_=a},error:function(a){this.error_=a},reset:function(){this.value_=this.error_=null}};d.add("default",e.eval.bind(e)),b.exports=e},{"../tree/keyword":63,"./function-registry":21}],20:[function(a,b){var c=a("../tree/expression"),d=function(a,b,c,d){this.name=a.toLowerCase(),this.index=c,this.context=b,this.currentFileInfo=d,this.func=b.frames[0].functionRegistry.get(this.name)};d.prototype.isValid=function(){return Boolean(this.func)},d.prototype.call=function(a){return Array.isArray(a)&&(a=a.filter(function(a){return"Comment"===a.type?!1:!0}).map(function(a){if("Expression"===a.type){var b=a.value.filter(function(a){return"Comment"===a.type?!1:!0});return 1===b.length?b[0]:new c(b)}return a})),this.func.apply(this,a)},b.exports=d},{"../tree/expression":57}],21:[function(a,b){function c(a){return{_data:{},add:function(a,b){a=a.toLowerCase(),this._data.hasOwnProperty(a),this._data[a]=b},addMultiple:function(a){Object.keys(a).forEach(function(b){this.add(b,a[b])}.bind(this))},get:function(b){return this._data[b]||a&&a.get(b)},inherit:function(){return c(this)}}}b.exports=c(null)},{}],22:[function(a,b){b.exports=function(b){var c={functionRegistry:a("./function-registry"),functionCaller:a("./function-caller")};return a("./default"),a("./color"),a("./color-blending"),a("./data-uri")(b),a("./math"),a("./number"),a("./string"),a("./svg")(b),a("./types"),c}},{"./color":17,"./color-blending":16,"./data-uri":18,"./default":19,"./function-caller":20,"./function-registry":21,"./math":23,"./number":24,"./string":25,"./svg":26,"./types":27}],23:[function(a){function b(a,b,d){if(!(d instanceof c))throw{type:"Argument",message:"argument must be a number"};return null==b?b=d.unit:d=d.unify(),new c(a(parseFloat(d.value)),b)}var c=a("../tree/dimension"),d=a("./function-registry"),e={ceil:null,floor:null,sqrt:null,abs:null,tan:"",sin:"",cos:"",atan:"rad",asin:"rad",acos:"rad"};for(var f in e)e.hasOwnProperty(f)&&(e[f]=b.bind(null,Math[f],e[f]));e.round=function(a,c){var d="undefined"==typeof c?0:c.value;return b(function(a){return a.toFixed(d)},null,a)},d.addMultiple(e)},{"../tree/dimension":54,"./function-registry":21}],24:[function(a){var b=a("../tree/dimension"),c=a("../tree/anonymous"),d=a("./function-registry"),e=function(a,d){switch(d=Array.prototype.slice.call(d),d.length){case 0:throw{type:"Argument",message:"one or more arguments required"}}var e,f,g,h,i,j,k,l,m=[],n={};for(e=0;d.length>e;e++)if(g=d[e],g instanceof b)if(h=""===g.unit.toString()&&void 0!==l?new b(g.value,l).unify():g.unify(),j=""===h.unit.toString()&&void 0!==k?k:h.unit.toString(),k=""!==j&&void 0===k||""!==j&&""===m[0].unify().unit.toString()?j:k,l=""!==j&&void 0===l?g.unit.toString():l,f=void 0!==n[""]&&""!==j&&j===k?n[""]:n[j],void 0!==f)i=""===m[f].unit.toString()&&void 0!==l?new b(m[f].value,l).unify():m[f].unify(),(a&&i.value>h.value||!a&&h.value>i.value)&&(m[f]=g);else{if(void 0!==k&&j!==k)throw{type:"Argument",message:"incompatible types"};n[j]=m.length,m.push(g)}else Array.isArray(d[e].value)&&Array.prototype.push.apply(d,Array.prototype.slice.call(d[e].value));return 1==m.length?m[0]:(d=m.map(function(a){return a.toCSS(this.context)}).join(this.context.compress?",":", "),new c((a?"min":"max")+"("+d+")"))};d.addMultiple({min:function(){return e(!0,arguments)},max:function(){return e(!1,arguments)},convert:function(a,b){return a.convertTo(b.value)},pi:function(){return new b(Math.PI)},mod:function(a,c){return new b(a.value%c.value,a.unit)},pow:function(a,c){if("number"==typeof a&&"number"==typeof c)a=new b(a),c=new b(c);else if(!(a instanceof b&&c instanceof b))throw{type:"Argument",message:"arguments must be numbers"};return new b(Math.pow(a.value,c.value),a.unit)},percentage:function(a){return new b(100*a.value,"%")}})},{"../tree/anonymous":44,"../tree/dimension":54,"./function-registry":21}],25:[function(a){var b=a("../tree/quoted"),c=a("../tree/anonymous"),d=a("../tree/javascript"),e=a("./function-registry");e.addMultiple({e:function(a){return new c(a instanceof d?a.evaluated:a.value)},escape:function(a){return new c(encodeURI(a.value).replace(/=/g,"%3D").replace(/:/g,"%3A").replace(/#/g,"%23").replace(/;/g,"%3B").replace(/\\(/g,"%28").replace(/\\)/g,"%29"))},replace:function(a,c,d,e){var f=a.value;return d="Quoted"===d.type?d.value:d.toCSS(),f=f.replace(new RegExp(c.value,e?e.value:""),d),new b(a.quote||"",f,a.escaped)},"%":function(a){for(var c=Array.prototype.slice.call(arguments,1),d=a.value,e=0;c.length>e;e++)d=d.replace(/%[sda]/i,function(a){var b="Quoted"===c[e].type&&a.match(/s/i)?c[e].value:c[e].toCSS();return a.match(/[A-Z]$/)?encodeURIComponent(b):b});return d=d.replace(/%%/g,"%"),new b(a.quote||"",d,a.escaped)}})},{"../tree/anonymous":44,"../tree/javascript":61,"../tree/quoted":71,"./function-registry":21}],26:[function(a,b){b.exports=function(){var b=a("../tree/dimension"),c=a("../tree/color"),d=a("../tree/expression"),e=a("../tree/quoted"),f=a("../tree/url"),g=a("./function-registry");g.add("svg-gradient",function(a){function g(){throw{type:"Argument",message:"svg-gradient expects direction, start_color [start_position], [color position,]..., end_color [end_position] or direction, color list"}}var h,i,j,k,l,m,n,o,p="linear",q=\'x="0" y="0" width="1" height="1"\',r={compress:!1},s=a.toCSS(r);switch(2==arguments.length?(arguments[1].value.length<2&&g(),h=arguments[1].value):arguments.length<3?g():h=Array.prototype.slice.call(arguments,1),s){case"to bottom":i=\'x1="0%" y1="0%" x2="0%" y2="100%"\';break;case"to right":i=\'x1="0%" y1="0%" x2="100%" y2="0%"\';break;case"to bottom right":i=\'x1="0%" y1="0%" x2="100%" y2="100%"\';break;case"to top right":i=\'x1="0%" y1="100%" x2="100%" y2="0%"\';break;case"ellipse":case"ellipse at center":p="radial",i=\'cx="50%" cy="50%" r="75%"\',q=\'x="-50" y="-50" width="101" height="101"\';break;default:throw{type:"Argument",message:"svg-gradient direction must be \'to bottom\', \'to right\', \'to bottom right\', \'to top right\' or \'ellipse at center\'"}}for(j=\'<?xml version="1.0" ?><svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100%" height="100%" viewBox="0 0 1 1" preserveAspectRatio="none"><\'+p+\'Gradient id="gradient" gradientUnits="userSpaceOnUse" \'+i+">",\nk=0;h.length>k;k+=1)h[k]instanceof d?(l=h[k].value[0],m=h[k].value[1]):(l=h[k],m=void 0),l instanceof c&&((0===k||k+1===h.length)&&void 0===m||m instanceof b)||g(),n=m?m.toCSS(r):0===k?"0%":"100%",o=l.alpha,j+=\'<stop offset="\'+n+\'" stop-color="\'+l.toRGB()+\'"\'+(1>o?\' stop-opacity="\'+o+\'"\':"")+"/>";return j+="</"+p+"Gradient><rect "+q+\' fill="url(#gradient)" /></svg>\',j=encodeURIComponent(j),j="data:image/svg+xml,"+j,new f(new e("\'"+j+"\'",j,!1,this.index,this.currentFileInfo),this.index,this.currentFileInfo)})}},{"../tree/color":48,"../tree/dimension":54,"../tree/expression":57,"../tree/quoted":71,"../tree/url":78,"./function-registry":21}],27:[function(a){var b=a("../tree/keyword"),c=a("../tree/detached-ruleset"),d=a("../tree/dimension"),e=a("../tree/color"),f=a("../tree/quoted"),g=a("../tree/anonymous"),h=a("../tree/url"),i=a("../tree/operation"),j=a("./function-registry"),k=function(a,c){return a instanceof c?b.True:b.False},l=function(a,c){if(void 0===c)throw{type:"Argument",message:"missing the required second argument to isunit."};if(c="string"==typeof c.value?c.value:c,"string"!=typeof c)throw{type:"Argument",message:"Second argument to isunit should be a unit or a string."};return a instanceof d&&a.unit.is(c)?b.True:b.False},m=function(a){var b=Array.isArray(a.value)?a.value:Array(a);return b};j.addMultiple({isruleset:function(a){return k(a,c)},iscolor:function(a){return k(a,e)},isnumber:function(a){return k(a,d)},isstring:function(a){return k(a,f)},iskeyword:function(a){return k(a,b)},isurl:function(a){return k(a,h)},ispixel:function(a){return l(a,"px")},ispercentage:function(a){return l(a,"%")},isem:function(a){return l(a,"em")},isunit:l,unit:function(a,c){if(!(a instanceof d))throw{type:"Argument",message:"the first argument to unit must be a number"+(a instanceof i?". Have you forgotten parenthesis?":"")};return c=c?c instanceof b?c.value:c.toCSS():"",new d(a.value,c)},"get-unit":function(a){return new g(a.unit)},extract:function(a,b){return b=b.value-1,m(a)[b]},length:function(a){return new d(m(a).length)}})},{"../tree/anonymous":44,"../tree/color":48,"../tree/detached-ruleset":53,"../tree/dimension":54,"../tree/keyword":63,"../tree/operation":69,"../tree/quoted":71,"../tree/url":78,"./function-registry":21}],28:[function(a,b){var c=a("./contexts"),d=a("./parser/parser"),e=a("./plugins/function-importer");b.exports=function(a){var b=function(a,b){this.rootFilename=b.filename,this.paths=a.paths||[],this.contents={},this.contentsIgnoredChars={},this.mime=a.mime,this.error=null,this.context=a,this.queue=[],this.files={}};return b.prototype.push=function(b,f,g,h,i){var j=this;this.queue.push(b);var k=function(a,c,d){j.queue.splice(j.queue.indexOf(b),1);var e=d===j.rootFilename;h.optional&&a?i(null,{rules:[]},!1,null):(j.files[d]=c,a&&!j.error&&(j.error=a),i(a,c,e,d))},l={relativeUrls:this.context.relativeUrls,entryPath:g.entryPath,rootpath:g.rootpath,rootFilename:g.rootFilename},m=a.getFileManager(b,g.currentDirectory,this.context,a);if(!m)return void k({message:"Could not find a file-manager for "+b});f&&(b=m.tryAppendExtension(b,h.plugin?".js":".less"));var n=function(a){var b=a.filename,f=a.contents.replace(/^\\uFEFF/,"");l.currentDirectory=m.getPath(b),l.relativeUrls&&(l.rootpath=m.join(j.context.rootpath||"",m.pathDiff(l.currentDirectory,l.entryPath)),!m.isPathAbsolute(l.rootpath)&&m.alwaysMakePathsAbsolute()&&(l.rootpath=m.join(l.entryPath,l.rootpath))),l.filename=b;var i=new c.Parse(j.context);i.processImports=!1,j.contents[b]=f,(g.reference||h.reference)&&(l.reference=!0),h.plugin?new e(i,l).eval(f,function(a,c){k(a,c,b)}):h.inline?k(null,f,b):new d(i,j,l).parse(f,function(a,c){k(a,c,b)})},o=m.loadFile(b,g.currentDirectory,this.context,a,function(a,b){a?k(a):n(b)});o&&o.then(n,k)},b}},{"./contexts":10,"./parser/parser":36,"./plugins/function-importer":38}],29:[function(a,b){b.exports=function(b,c){var d,e,f,g,h,i={version:[2,5,1],data:a("./data"),tree:a("./tree"),Environment:h=a("./environment/environment"),AbstractFileManager:a("./environment/abstract-file-manager"),environment:b=new h(b,c),visitors:a("./visitors"),Parser:a("./parser/parser"),functions:a("./functions")(b),contexts:a("./contexts"),SourceMapOutput:d=a("./source-map-output")(b),SourceMapBuilder:e=a("./source-map-builder")(d,b),ParseTree:f=a("./parse-tree")(e),ImportManager:g=a("./import-manager")(b),render:a("./render")(b,f,g),parse:a("./parse")(b,f,g),LessError:a("./less-error"),transformTree:a("./transform-tree"),utils:a("./utils"),PluginManager:a("./plugin-manager"),logger:a("./logger")};return i}},{"./contexts":10,"./data":12,"./environment/abstract-file-manager":14,"./environment/environment":15,"./functions":22,"./import-manager":28,"./less-error":30,"./logger":31,"./parse":33,"./parse-tree":32,"./parser/parser":36,"./plugin-manager":37,"./render":39,"./source-map-builder":40,"./source-map-output":41,"./transform-tree":42,"./tree":60,"./utils":81,"./visitors":85}],30:[function(a,b){var c=a("./utils"),d=b.exports=function(a,b,d){Error.call(this);var e=a.filename||d;if(b&&e){var f=b.contents[e],g=c.getLocation(a.index,f),h=g.line,i=g.column,j=a.call&&c.getLocation(a.call,f).line,k=f.split("\\n");this.type=a.type||"Syntax",this.filename=e,this.index=a.index,this.line="number"==typeof h?h+1:null,this.callLine=j+1,this.callExtract=k[j],this.column=i,this.extract=[k[h-1],k[h],k[h+1]]}this.message=a.message,this.stack=a.stack};if("undefined"==typeof Object.create){var e=function(){};e.prototype=Error.prototype,d.prototype=new e}else d.prototype=Object.create(Error.prototype);d.prototype.constructor=d},{"./utils":81}],31:[function(a,b){b.exports={error:function(a){this._fireEvent("error",a)},warn:function(a){this._fireEvent("warn",a)},info:function(a){this._fireEvent("info",a)},debug:function(a){this._fireEvent("debug",a)},addListener:function(a){this._listeners.push(a)},removeListener:function(a){for(var b=0;this._listeners.length>b;b++)if(this._listeners[b]===a)return void this._listeners.splice(b,1)},_fireEvent:function(a,b){for(var c=0;this._listeners.length>c;c++){var d=this._listeners[c][a];d&&d(b)}},_listeners:[]}},{}],32:[function(a,b){var c=a("./less-error"),d=a("./transform-tree"),e=a("./logger");b.exports=function(a){var b=function(a,b){this.root=a,this.imports=b};return b.prototype.toCSS=function(b){var f,g,h={};try{f=d(this.root,b)}catch(i){throw new c(i,this.imports)}try{var j=Boolean(b.compress);j&&e.warn("The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.");var k={compress:j,dumpLineNumbers:b.dumpLineNumbers,strictUnits:Boolean(b.strictUnits),numPrecision:8};b.sourceMap?(g=new a(b.sourceMap),h.css=g.toCSS(f,k,this.imports)):h.css=f.toCSS(k)}catch(i){throw new c(i,this.imports)}if(b.pluginManager)for(var l=b.pluginManager.getPostProcessors(),m=0;l.length>m;m++)h.css=l[m].process(h.css,{sourceMap:g,options:b,imports:this.imports});b.sourceMap&&(h.map=g.getExternalSourceMap()),h.imports=[];for(var n in this.imports.files)this.imports.files.hasOwnProperty(n)&&n!==this.imports.rootFilename&&h.imports.push(n);return h},b}},{"./less-error":30,"./logger":31,"./transform-tree":42}],33:[function(a,b){var c,d=a("./contexts"),e=a("./parser/parser"),f=a("./plugin-manager");b.exports=function(b,g,h){var i=function(b,g,j){if(g=g||{},"function"==typeof g&&(j=g,g={}),!j){c||(c="undefined"==typeof Promise?a("promise"):Promise);var k=this;return new c(function(a,c){i.call(k,b,g,function(b,d){b?c(b):a(d)})})}var l,m,n=new f(this);if(n.addPlugins(g.plugins),g.pluginManager=n,l=new d.Parse(g),g.rootFileInfo)m=g.rootFileInfo;else{var o=g.filename||"input",p=o.replace(/[^\\/\\\\]*$/,"");m={filename:o,relativeUrls:l.relativeUrls,rootpath:l.rootpath||"",currentDirectory:p,entryPath:p,rootFilename:o},m.rootpath&&"/"!==m.rootpath.slice(-1)&&(m.rootpath+="/")}var q=new h(l,m);new e(l,q,m).parse(b,function(a,b){return a?j(a):void j(null,b,q,g)},g)};return i}},{"./contexts":10,"./parser/parser":36,"./plugin-manager":37,promise:void 0}],34:[function(a,b){b.exports=function(a,b){function c(b){var c=h-q;512>c&&!b||!c||(p.push(a.slice(q,h+1)),q=h+1)}var d,e,f,g,h,i,j,k,l,m=a.length,n=0,o=0,p=[],q=0;for(h=0;m>h;h++)if(j=a.charCodeAt(h),!(j>=97&&122>=j||34>j))switch(j){case 40:o++,e=h;continue;case 41:if(--o<0)return b("missing opening `(`",h);continue;case 59:o||c();continue;case 123:n++,d=h;continue;case 125:if(--n<0)return b("missing opening `{`",h);n||o||c();continue;case 92:if(m-1>h){h++;continue}return b("unescaped `\\\\`",h);case 34:case 39:case 96:for(l=0,i=h,h+=1;m>h;h++)if(k=a.charCodeAt(h),!(k>96)){if(k==j){l=1;break}if(92==k){if(h==m-1)return b("unescaped `\\\\`",h);h++}}if(l)continue;return b("unmatched `"+String.fromCharCode(j)+"`",i);case 47:if(o||h==m-1)continue;if(k=a.charCodeAt(h+1),47==k)for(h+=2;m>h&&(k=a.charCodeAt(h),!(13>=k)||10!=k&&13!=k);h++);else if(42==k){for(f=i=h,h+=2;m-1>h&&(k=a.charCodeAt(h),125==k&&(g=h),42!=k||47!=a.charCodeAt(h+1));h++);if(h==m-1)return b("missing closing `*/`",i);h++}continue;case 42:if(m-1>h&&47==a.charCodeAt(h+1))return b("unmatched `/*`",h);continue}return 0!==n?f>d&&g>f?b("missing closing `}` or `*/`",d):b("missing closing `}`",d):0!==o?b("missing closing `)`",e):(c(!0),p)}},{}],35:[function(a,b){var c=a("./chunker");b.exports=function(){var a,b,d,e,f,g,h,i=[],j={};j.save=function(){h=j.i,i.push({current:g,i:j.i,j:b})},j.restore=function(a){(j.i>d||j.i===d&&a&&!e)&&(d=j.i,e=a);var c=i.pop();g=c.current,h=j.i=c.i,b=c.j},j.forget=function(){i.pop()},j.isWhitespace=function(b){var c=j.i+(b||0),d=a.charCodeAt(c);return d===k||d===n||d===l||d===m},j.$re=function(a){j.i>h&&(g=g.slice(j.i-h),h=j.i);var b=a.exec(g);return b?(s(b[0].length),"string"==typeof b?b:1===b.length?b[0]:b):null},j.$char=function(b){return a.charAt(j.i)!==b?null:(s(1),b)},j.$str=function(b){for(var c=b.length,d=0;c>d;d++)if(a.charAt(j.i+d)!==b.charAt(d))return null;return s(c),b},j.$quoted=function(){var b=a.charAt(j.i);if("\'"===b||\'"\'===b){for(var c=a.length,d=j.i,e=1;c>e+d;e++){var f=a.charAt(e+d);switch(f){case"\\\\":e++;continue;case"\\r":case"\\n":break;case b:var g=a.substr(d,e+1);return s(e+1),g}}return null}};var k=32,l=9,m=10,n=13,o=43,p=44,q=47,r=57;j.autoCommentAbsorb=!0,j.commentStore=[],j.finished=!1;var s=function(c){for(var d,e,i,o=j.i,p=b,r=j.i-h,t=j.i+g.length-r,u=j.i+=c,v=a;t>j.i;j.i++){if(d=v.charCodeAt(j.i),j.autoCommentAbsorb&&d===q){if(e=v.charAt(j.i+1),"/"===e){i={index:j.i,isLineComment:!0};var w=v.indexOf("\\n",j.i+2);0>w&&(w=t),j.i=w,i.text=v.substr(i.i,j.i-i.i),j.commentStore.push(i);continue}if("*"===e){var x=v.indexOf("*/",j.i+2);if(x>=0){i={index:j.i,text:v.substr(j.i,x+2-j.i),isLineComment:!1},j.i+=i.text.length-1,j.commentStore.push(i);continue}}break}if(d!==k&&d!==m&&d!==l&&d!==n)break}if(g=g.slice(c+j.i-u+r),h=j.i,!g.length){if(f.length-1>b)return g=f[++b],s(0),!0;j.finished=!0}return o!==j.i||p!==b};return j.peek=function(b){if("string"==typeof b){for(var c=0;b.length>c;c++)if(a.charAt(j.i+c)!==b.charAt(c))return!1;return!0}return b.test(g)},j.peekChar=function(b){return a.charAt(j.i)===b},j.currentChar=function(){return a.charAt(j.i)},j.getInput=function(){return a},j.peekNotNumeric=function(){var b=a.charCodeAt(j.i);return b>r||o>b||b===q||b===p},j.start=function(e,i,k){a=e,j.i=b=h=d=0,f=i?c(e,k):[e],g=f[0],s(0)},j.end=function(){var b,c=j.i>=a.length;return d>j.i&&(b=e,j.i=d),{isFinished:c,furthest:j.i,furthestPossibleErrorMessage:b,furthestReachedEnd:j.i>=a.length-1,furthestChar:a[j.i]}},j}},{"./chunker":34}],36:[function(a,b){var c=a("../less-error"),d=a("../tree"),e=a("../visitors"),f=a("./parser-input"),g=a("../utils"),h=function i(a,b,h){function j(a,b){var c="[object Function]"===Object.prototype.toString.call(a)?a.call(n):o.$re(a);return c?c:void l(b||("string"==typeof a?"expected \'"+a+"\' got \'"+o.currentChar()+"\'":"unexpected token"))}function k(a,b){return o.$char(a)?a:void l(b||"expected \'"+a+"\' got \'"+o.currentChar()+"\'")}function l(a,d){throw new c({index:o.i,filename:h.filename,type:d||"Syntax",message:a},b)}function m(a){var b=h.filename;return{lineNumber:g.getLocation(a,o.getInput()).line+1,fileName:b}}var n,o=f();return{parse:function(f,g,j){var k,l,m,n,p=null,q="";if(l=j&&j.globalVars?i.serializeVars(j.globalVars)+"\\n":"",m=j&&j.modifyVars?"\\n"+i.serializeVars(j.modifyVars):"",a.pluginManager)for(var r=a.pluginManager.getPreProcessors(),s=0;r.length>s;s++)f=r[s].process(f,{context:a,imports:b,fileInfo:h});(l||j&&j.banner)&&(q=(j&&j.banner?j.banner:"")+l,n=b.contentsIgnoredChars,n[h.filename]=n[h.filename]||0,n[h.filename]+=q.length),f=f.replace(/\\r\\n?/g,"\\n"),f=q+f.replace(/^\\uFEFF/,"")+m,b.contents[h.filename]=f;try{o.start(f,a.chunkInput,function(a,d){throw new c({index:d,type:"Parse",message:a,filename:h.filename},b)}),k=new d.Ruleset(null,this.parsers.primary()),k.root=!0,k.firstRoot=!0}catch(t){return g(new c(t,b,h.filename))}var u=o.end();if(!u.isFinished){var v=u.furthestPossibleErrorMessage;v||(v="Unrecognised input","}"===u.furthestChar?v+=". Possibly missing opening \'{\'":")"===u.furthestChar?v+=". Possibly missing opening \'(\'":u.furthestReachedEnd&&(v+=". Possibly missing something")),p=new c({type:"Parse",message:v,index:u.furthest,filename:h.filename},b)}var w=function(a){return a=p||a||b.error,a?(a instanceof c||(a=new c(a,b,h.filename)),g(a)):g(null,k)};return a.processImports===!1?w():void new e.ImportVisitor(b,w).run(k)},parsers:n={primary:function(){for(var a,b=this.mixin,c=[];;){for(;;){if(a=this.comment(),!a)break;c.push(a)}if(o.finished)break;if(o.peek("}"))break;if(a=this.extendRule())c=c.concat(a);else if(a=b.definition()||this.rule()||this.ruleset()||b.call()||this.rulesetCall()||this.directive())c.push(a);else{for(var d=!1;o.$char(";");)d=!0;if(!d)break}}return c},comment:function(){if(o.commentStore.length){var a=o.commentStore.shift();return new d.Comment(a.text,a.isLineComment,a.index,h)}},entities:{quoted:function(){var a,b=o.i,c=!1;return o.save(),o.$char("~")&&(c=!0),(a=o.$quoted())?(o.forget(),new d.Quoted(a.charAt(0),a.substr(1,a.length-2),c,b,h)):void o.restore()},keyword:function(){var a=o.$char("%")||o.$re(/^[_A-Za-z-][_A-Za-z0-9-]*/);return a?d.Color.fromKeyword(a)||new d.Keyword(a):void 0},call:function(){var a,b,c,e,f=o.i;if(!o.peek(/^url\\(/i))return o.save(),(a=o.$re(/^([\\w-]+|%|progid:[\\w\\.]+)\\(/))?(a=a[1],b=a.toLowerCase(),"alpha"===b&&(e=n.alpha())?(o.forget(),e):(c=this.arguments(),o.$char(")")?(o.forget(),new d.Call(a,c,f,h)):void o.restore("Could not parse call arguments or missing \')\'"))):void o.forget()},arguments:function(){for(var a,b=[];;){if(a=this.assignment()||n.expression(),!a)break;if(b.push(a),!o.$char(","))break}return b},literal:function(){return this.dimension()||this.color()||this.quoted()||this.unicodeDescriptor()},assignment:function(){var a,b;return o.save(),(a=o.$re(/^\\w+(?=\\s?=)/i))&&o.$char("=")&&(b=n.entity())?(o.forget(),new d.Assignment(a,b)):void o.restore()},url:function(){var a,b=o.i;return o.autoCommentAbsorb=!1,o.$str("url(")?(a=this.quoted()||this.variable()||o.$re(/^(?:(?:\\\\[\\(\\)\'"])|[^\\(\\)\'"])+/)||"",o.autoCommentAbsorb=!0,k(")"),new d.URL(null!=a.value||a instanceof d.Variable?a:new d.Anonymous(a),b,h)):void(o.autoCommentAbsorb=!0)},variable:function(){var a,b=o.i;return"@"===o.currentChar()&&(a=o.$re(/^@@?[\\w-]+/))?new d.Variable(a,b,h):void 0},variableCurly:function(){var a,b=o.i;return"@"===o.currentChar()&&(a=o.$re(/^@\\{([\\w-]+)\\}/))?new d.Variable("@"+a[1],b,h):void 0},color:function(){var a;if("#"===o.currentChar()&&(a=o.$re(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/))){var b=a.input.match(/^#([\\w]+).*/);return b=b[1],b.match(/^[A-Fa-f0-9]+$/)||l("Invalid HEX color code"),new d.Color(a[1])}},dimension:function(){if(!o.peekNotNumeric()){var a=o.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z]+)?/i);return a?new d.Dimension(a[1],a[2]):void 0}},unicodeDescriptor:function(){var a;return a=o.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/),a?new d.UnicodeDescriptor(a[0]):void 0},javascript:function(){var a,b=o.i;o.save();var c=o.$char("~"),e=o.$char("`");return e?(a=o.$re(/^[^`]*`/))?(o.forget(),new d.JavaScript(a.substr(0,a.length-1),Boolean(c),b,h)):void o.restore("invalid javascript definition"):void o.restore()}},variable:function(){var a;return"@"===o.currentChar()&&(a=o.$re(/^(@[\\w-]+)\\s*:/))?a[1]:void 0},rulesetCall:function(){var a;return"@"===o.currentChar()&&(a=o.$re(/^(@[\\w-]+)\\s*\\(\\s*\\)\\s*;/))?new d.RulesetCall(a[1]):void 0},extend:function(a){var b,c,e,f,g,h=o.i;if(o.$str(a?"&:extend(":":extend(")){do{for(e=null,b=null;!(e=o.$re(/^(all)(?=\\s*(\\)|,))/))&&(c=this.element());)b?b.push(c):b=[c];e=e&&e[1],b||l("Missing target selector for :extend()."),g=new d.Extend(new d.Selector(b),e,h),f?f.push(g):f=[g]}while(o.$char(","));return j(/^\\)/),a&&j(/^;/),f}},extendRule:function(){return this.extend(!0)},mixin:{call:function(){var a,b,c,e,f,g,i=o.currentChar(),j=!1,l=o.i;if("."===i||"#"===i){for(o.save();;){if(a=o.i,e=o.$re(/^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/),!e)break;c=new d.Element(f,e,a,h),b?b.push(c):b=[c],f=o.$char(">")}return b&&(o.$char("(")&&(g=this.args(!0).args,k(")")),n.important()&&(j=!0),n.end())?(o.forget(),new d.mixin.Call(b,g,l,h,j)):void o.restore()}},args:function(a){var b,c,e,f,g,h,i=n.entities,j={args:null,variadic:!1},k=[],m=[],p=[];for(o.save();;){if(a)h=n.detachedRuleset()||n.expression();else{if(o.commentStore.length=0,o.$str("...")){j.variadic=!0,o.$char(";")&&!b&&(b=!0),(b?m:p).push({variadic:!0});break}h=i.variable()||i.literal()||i.keyword()}if(!h)break;f=null,h.throwAwayComments&&h.throwAwayComments(),g=h;var q=null;if(a?h.value&&1==h.value.length&&(q=h.value[0]):q=h,q&&q instanceof d.Variable)if(o.$char(":")){if(k.length>0&&(b&&l("Cannot mix ; and , as delimiter types"),c=!0),g=n.detachedRuleset()||n.expression(),!g){if(!a)return o.restore(),j.args=[],j;l("could not understand value for named argument")}f=e=q.name}else{if(!a&&o.$str("...")){j.variadic=!0,o.$char(";")&&!b&&(b=!0),(b?m:p).push({name:h.name,variadic:!0});break}a||(e=f=q.name,g=null)}g&&k.push(g),p.push({name:f,value:g}),o.$char(",")||(o.$char(";")||b)&&(c&&l("Cannot mix ; and , as delimiter types"),b=!0,k.length>1&&(g=new d.Value(k)),m.push({name:e,value:g}),e=null,k=[],c=!1)}return o.forget(),j.args=b?m:p,j},definition:function(){var a,b,c,e,f=[],g=!1;if(!("."!==o.currentChar()&&"#"!==o.currentChar()||o.peek(/^[^{]*\\}/)))if(o.save(),b=o.$re(/^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/)){a=b[1];var h=this.args(!1);if(f=h.args,g=h.variadic,!o.$char(")"))return void o.restore("Missing closing \')\'");if(o.commentStore.length=0,o.$str("when")&&(e=j(n.conditions,"expected condition")),c=n.block())return o.forget(),new d.mixin.Definition(a,f,c,e,g);o.restore()}else o.forget()}},entity:function(){var a=this.entities;return this.comment()||a.literal()||a.variable()||a.url()||a.call()||a.keyword()||a.javascript()},end:function(){return o.$char(";")||o.peek("}")},alpha:function(){var a;if(o.$re(/^opacity=/i))return a=o.$re(/^\\d+/),a||(a=j(this.entities.variable,"Could not parse alpha")),k(")"),new d.Alpha(a)},element:function(){var a,b,c,e=o.i;return b=this.combinator(),a=o.$re(/^(?:\\d+\\.\\d+|\\d+)%/)||o.$re(/^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/)||o.$char("*")||o.$char("&")||this.attribute()||o.$re(/^\\([^&()@]+\\)/)||o.$re(/^[\\.#:](?=@)/)||this.entities.variableCurly(),a||(o.save(),o.$char("(")?(c=this.selector())&&o.$char(")")?(a=new d.Paren(c),o.forget()):o.restore("Missing closing \')\'"):o.forget()),a?new d.Element(b,a,e,h):void 0},combinator:function(){var a=o.currentChar();if("/"===a){o.save();var b=o.$re(/^\\/[a-z]+\\//i);if(b)return o.forget(),new d.Combinator(b);o.restore()}if(">"===a||"+"===a||"~"===a||"|"===a||"^"===a){for(o.i++,"^"===a&&"^"===o.currentChar()&&(a="^^",o.i++);o.isWhitespace();)o.i++;return new d.Combinator(a)}return new d.Combinator(o.isWhitespace(-1)?" ":null)},lessSelector:function(){return this.selector(!0)},selector:function(a){for(var b,c,e,f,g,i,k,m=o.i;(a&&(c=this.extend())||a&&(i=o.$str("when"))||(f=this.element()))&&(i?k=j(this.conditions,"expected condition"):k?l("CSS guard can only be used at the end of selector"):c?g=g?g.concat(c):c:(g&&l("Extend can only be used at the end of selector"),e=o.currentChar(),b?b.push(f):b=[f],f=null),"{"!==e&&"}"!==e&&";"!==e&&","!==e&&")"!==e););return b?new d.Selector(b,g,k,m,h):void(g&&l("Extend must be used to extend a selector, it cannot be used on its own"))},attribute:function(){if(o.$char("[")){var a,b,c,e=this.entities;return(a=e.variableCurly())||(a=j(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/)),c=o.$re(/^[|~*$^]?=/),c&&(b=e.quoted()||o.$re(/^[0-9]+%/)||o.$re(/^[\\w-]+/)||e.variableCurly()),k("]"),new d.Attribute(a,c,b)}},block:function(){var a;return o.$char("{")&&(a=this.primary())&&o.$char("}")?a:void 0},blockRuleset:function(){var a=this.block();return a&&(a=new d.Ruleset(null,a)),a},detachedRuleset:function(){var a=this.blockRuleset();return a?new d.DetachedRuleset(a):void 0},ruleset:function(){var b,c,e,f;for(o.save(),a.dumpLineNumbers&&(f=m(o.i));;){if(c=this.lessSelector(),!c)break;if(b?b.push(c):b=[c],o.commentStore.length=0,c.condition&&b.length>1&&l("Guards are only currently allowed on a single selector."),!o.$char(","))break;c.condition&&l("Guards are only currently allowed on a single selector."),o.commentStore.length=0}if(b&&(e=this.block())){o.forget();var g=new d.Ruleset(b,e,a.strictImports);return a.dumpLineNumbers&&(g.debugInfo=f),g}o.restore()},rule:function(b){var c,e,f,g,i,j=o.i,k=o.currentChar();if("."!==k&&"#"!==k&&"&"!==k&&":"!==k)if(o.save(),c=this.variable()||this.ruleProperty()){if(i="string"==typeof c,i&&(e=this.detachedRuleset()),o.commentStore.length=0,!e){g=!i&&c.length>1&&c.pop().value;var l=!b&&(a.compress||i);if(l&&(e=this.value()),!e&&(e=this.anonymousValue()))return o.forget(),new d.Rule(c,e,!1,g,j,h);l||e||(e=this.value()),f=this.important()}if(e&&this.end())return o.forget(),new d.Rule(c,e,f,g,j,h);if(o.restore(),e&&!b)return this.rule(!0)}else o.forget()},anonymousValue:function(){var a=o.$re(/^([^@+\\/\'"*`(;{}-]*);/);return a?new d.Anonymous(a[1]):void 0},"import":function(){var a,b,c=o.i,e=o.$re(/^@import?\\s+/);if(e){var f=(e?this.importOptions():null)||{};if(a=this.entities.quoted()||this.entities.url())return b=this.mediaFeatures(),o.$char(";")||(o.i=c,l("missing semi-colon or unrecognised media features on import")),b=b&&new d.Value(b),new d.Import(a,b,f,c,h);o.i=c,l("malformed import statement")}},importOptions:function(){var a,b,c,d={};if(!o.$char("("))return null;do if(a=this.importOption()){switch(b=a,c=!0,b){case"css":b="less",c=!1;break;case"once":b="multiple",c=!1}if(d[b]=c,!o.$char(","))break}while(a);return k(")"),d},importOption:function(){var a=o.$re(/^(less|css|multiple|once|inline|reference|optional)/);return a?a[1]:void 0},mediaFeature:function(){var a,b,c=this.entities,e=[];o.save();do if(a=c.keyword()||c.variable())e.push(a);else if(o.$char("(")){if(b=this.property(),a=this.value(),!o.$char(")"))return o.restore("Missing closing \')\'"),null;if(b&&a)e.push(new d.Paren(new d.Rule(b,a,null,null,o.i,h,!0)));else{if(!a)return o.restore("badly formed media feature definition"),null;e.push(new d.Paren(a))}}while(a);return o.forget(),e.length>0?new d.Expression(e):void 0},mediaFeatures:function(){var a,b=this.entities,c=[];do if(a=this.mediaFeature()){if(c.push(a),!o.$char(","))break}else if(a=b.variable(),a&&(c.push(a),!o.$char(",")))break;while(a);return c.length>0?c:null},media:function(){var b,c,e,f;return a.dumpLineNumbers&&(f=m(o.i)),o.save(),o.$str("@media")?(b=this.mediaFeatures(),(c=this.block())?(o.forget(),e=new d.Media(c,b,o.i,h),a.dumpLineNumbers&&(e.debugInfo=f),e):void o.restore("media definitions require block statements after any features")):void o.restore()},plugin:function(){var a,b=o.i,c=o.$re(/^@plugin?\\s+/);if(c){var e={plugin:!0};if(a=this.entities.quoted()||this.entities.url())return o.$char(";")||(o.i=b,l("missing semi-colon on plugin")),new d.Import(a,null,e,b,h);o.i=b,l("malformed plugin statement")}},directive:function(){var b,c,e,f,g,i,j,k=o.i,n=!0,p=!0;if("@"===o.currentChar()){if(c=this["import"]()||this.plugin()||this.media())return c;if(o.save(),b=o.$re(/^@[a-z-]+/)){switch(f=b,"-"==b.charAt(1)&&b.indexOf("-",2)>0&&(f="@"+b.slice(b.indexOf("-",2)+1)),f){case"@counter-style":g=!0,n=!0;break;case"@charset":g=!0,n=!1;break;case"@namespace":i=!0,n=!1;break;case"@keyframes":g=!0;break;case"@host":case"@page":j=!0;break;case"@document":case"@supports":j=!0,p=!1}return o.commentStore.length=0,g?(c=this.entity(),c||l("expected "+b+" identifier")):i?(c=this.expression(),c||l("expected "+b+" expression")):j&&(c=(o.$re(/^[^{;]+/)||"").trim(),c&&(c=new d.Anonymous(c))),n&&(e=this.blockRuleset()),e||!n&&c&&o.$char(";")?(o.forget(),new d.Directive(b,c,e,k,h,a.dumpLineNumbers?m(k):null,!1,p)):void o.restore("directive options not recognised")}}},value:function(){var a,b=[];do if(a=this.expression(),a&&(b.push(a),!o.$char(",")))break;while(a);return b.length>0?new d.Value(b):void 0},important:function(){return"!"===o.currentChar()?o.$re(/^! *important/):void 0},sub:function(){var a,b;return o.save(),o.$char("(")?(a=this.addition(),a&&o.$char(")")?(o.forget(),b=new d.Expression([a]),b.parens=!0,b):void o.restore("Expected \')\'")):void o.restore()},multiplication:function(){var a,b,c,e,f;if(a=this.operand()){for(f=o.isWhitespace(-1);;){if(o.peek(/^\\/[*\\/]/))break;if(o.save(),c=o.$char("/")||o.$char("*"),!c){o.forget();break}if(b=this.operand(),!b){o.restore();break}o.forget(),a.parensInOp=!0,b.parensInOp=!0,e=new d.Operation(c,[e||a,b],f),f=o.isWhitespace(-1)}return e||a}},addition:function(){var a,b,c,e,f;if(a=this.multiplication()){for(f=o.isWhitespace(-1);;){if(c=o.$re(/^[-+]\\s+/)||!f&&(o.$char("+")||o.$char("-")),!c)break;if(b=this.multiplication(),!b)break;a.parensInOp=!0,b.parensInOp=!0,e=new d.Operation(c,[e||a,b],f),f=o.isWhitespace(-1)}return e||a}},conditions:function(){var a,b,c,e=o.i;if(a=this.condition()){for(;;){if(!o.peek(/^,\\s*(not\\s*)?\\(/)||!o.$char(","))break;if(b=this.condition(),!b)break;c=new d.Condition("or",c||a,b,e)}return c||a}},condition:function(){var a,b,c,e,f=this.entities,g=o.i,h=!1;return o.$str("not")&&(h=!0),k("("),a=this.addition()||f.keyword()||f.quoted(),a?(o.$char(">")?e=o.$char("=")?">=":">":o.$char("<")?e=o.$char("=")?"<=":"<":o.$char("=")&&(e=o.$char(">")?"=>":o.$char("<")?"=<":"="),e?(b=this.addition()||f.keyword()||f.quoted(),b?c=new d.Condition(e,a,b,g,h):l("expected expression")):c=new d.Condition("=",a,new d.Keyword("true"),g,h),k(")"),o.$str("and")?new d.Condition("and",c,this.condition()):c):void 0},operand:function(){var a,b=this.entities;o.peek(/^-[@\\(]/)&&(a=o.$char("-"));var c=this.sub()||b.dimension()||b.color()||b.variable()||b.call();return a&&(c.parensInOp=!0,c=new d.Negative(c)),c},expression:function(){var a,b,c=[];do a=this.comment(),a?c.push(a):(a=this.addition()||this.entity(),a&&(c.push(a),o.peek(/^\\/[\\/*]/)||(b=o.$char("/"),b&&c.push(new d.Anonymous(b)))));while(a);return c.length>0?new d.Expression(c):void 0},property:function(){var a=o.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/);return a?a[1]:void 0},ruleProperty:function(){function a(a){var b=o.i,c=o.$re(a);return c?(f.push(b),e.push(c[1])):void 0}var b,c,e=[],f=[];o.save();var g=o.$re(/^([_a-zA-Z0-9-]+)\\s*:/);if(g)return e=[new d.Keyword(g[1])],o.forget(),e;for(a(/^(\\*?)/);;)if(!a(/^((?:[\\w-]+)|(?:@\\{[\\w-]+\\}))/))break;if(e.length>1&&a(/^((?:\\+_|\\+)?)\\s*:/)){for(o.forget(),""===e[0]&&(e.shift(),f.shift()),c=0;e.length>c;c++)b=e[c],e[c]="@"!==b.charAt(0)?new d.Keyword(b):new d.Variable("@"+b.slice(2,-1),f[c],h);return e}o.restore()}}}};h.serializeVars=function(a){var b="";for(var c in a)if(Object.hasOwnProperty.call(a,c)){var d=a[c];b+=("@"===c[0]?"":"@")+c+": "+d+(";"===String(d).slice(-1)?"":";")}return b},b.exports=h},{"../less-error":30,"../tree":60,"../utils":81,"../visitors":85,"./parser-input":35}],37:[function(a,b){var c=function(a){this.less=a,this.visitors=[],this.preProcessors=[],this.postProcessors=[],this.installedPlugins=[],this.fileManagers=[]};c.prototype.addPlugins=function(a){if(a)for(var b=0;a.length>b;b++)this.addPlugin(a[b])},c.prototype.addPlugin=function(a){this.installedPlugins.push(a),a.install(this.less,this)},c.prototype.addVisitor=function(a){this.visitors.push(a)},c.prototype.addPreProcessor=function(a,b){var c;for(c=0;this.preProcessors.length>c&&!(this.preProcessors[c].priority>=b);c++);this.preProcessors.splice(c,0,{preProcessor:a,priority:b})},c.prototype.addPostProcessor=function(a,b){var c;for(c=0;this.postProcessors.length>c&&!(this.postProcessors[c].priority>=b);c++);this.postProcessors.splice(c,0,{postProcessor:a,priority:b})},c.prototype.addFileManager=function(a){this.fileManagers.push(a)},c.prototype.getPreProcessors=function(){for(var a=[],b=0;this.preProcessors.length>b;b++)a.push(this.preProcessors[b].preProcessor);return a},c.prototype.getPostProcessors=function(){for(var a=[],b=0;this.postProcessors.length>b;b++)a.push(this.postProcessors[b].postProcessor);return a},c.prototype.getVisitors=function(){return this.visitors},c.prototype.getFileManagers=function(){return this.fileManagers},b.exports=c},{}],38:[function(a,b){var c=a("../less-error"),d=a("../tree"),e=b.exports=function(a,b){this.fileInfo=b};e.prototype.eval=function(a,b){var e,f,g={};f={add:function(a,b){g[a]=b},addMultiple:function(a){Object.keys(a).forEach(function(b){g[b]=a[b]})}};try{e=new Function("functions","tree","fileInfo",a),e(f,d,this.fileInfo)}catch(h){b(new c({message:"Plugin evaluation error: \'"+h.name+": "+h.message.replace(/["]/g,"\'")+"\'",filename:this.fileInfo.filename}),null)}b(null,{functions:g})}},{"../less-error":30,"../tree":60}],39:[function(a,b){var c;b.exports=function(b,d){var e=function(b,f,g){if("function"==typeof f&&(g=f,f={}),!g){c||(c="undefined"==typeof Promise?a("promise"):Promise);var h=this;return new c(function(a,c){e.call(h,b,f,function(b,d){b?c(b):a(d)})})}this.parse(b,f,function(a,b,c,e){if(a)return g(a);var f;try{var h=new d(b,c);f=h.toCSS(e)}catch(a){return g(a)}g(null,f)})};return e}},{promise:void 0}],40:[function(a,b){b.exports=function(a,b){var c=function(a){this.options=a};return c.prototype.toCSS=function(b,c,d){var e=new a({contentsIgnoredCharsMap:d.contentsIgnoredChars,rootNode:b,contentsMap:d.contents,sourceMapFilename:this.options.sourceMapFilename,sourceMapURL:this.options.sourceMapURL,outputFilename:this.options.sourceMapOutputFilename,sourceMapBasepath:this.options.sourceMapBasepath,sourceMapRootpath:this.options.sourceMapRootpath,outputSourceFiles:this.options.outputSourceFiles,sourceMapGenerator:this.options.sourceMapGenerator,sourceMapFileInline:this.options.sourceMapFileInline}),f=e.toCSS(c);return this.sourceMap=e.sourceMap,this.sourceMapURL=e.sourceMapURL,this.options.sourceMapInputFilename&&(this.sourceMapInputFilename=e.normalizeFilename(this.options.sourceMapInputFilename)),f+this.getCSSAppendage()},c.prototype.getCSSAppendage=function(){var a=this.sourceMapURL;if(this.options.sourceMapFileInline){if(void 0===this.sourceMap)return"";a="data:application/json;base64,"+b.encodeBase64(this.sourceMap)}return a?"/*# sourceMappingURL="+a+" */":""},c.prototype.getExternalSourceMap=function(){return this.sourceMap},c.prototype.setExternalSourceMap=function(a){this.sourceMap=a},c.prototype.isInline=function(){return this.options.sourceMapFileInline},c.prototype.getSourceMapURL=function(){return this.sourceMapURL},c.prototype.getOutputFilename=function(){return this.options.sourceMapOutputFilename},c.prototype.getInputFilename=function(){return this.sourceMapInputFilename},c}},{}],41:[function(a,b){b.exports=function(a){var b=function(b){this._css=[],this._rootNode=b.rootNode,this._contentsMap=b.contentsMap,this._contentsIgnoredCharsMap=b.contentsIgnoredCharsMap,b.sourceMapFilename&&(this._sourceMapFilename=b.sourceMapFilename.replace(/\\\\/g,"/")),this._outputFilename=b.outputFilename,this.sourceMapURL=b.sourceMapURL,b.sourceMapBasepath&&(this._sourceMapBasepath=b.sourceMapBasepath.replace(/\\\\/g,"/")),\nb.sourceMapRootpath?(this._sourceMapRootpath=b.sourceMapRootpath.replace(/\\\\/g,"/"),"/"!==this._sourceMapRootpath.charAt(this._sourceMapRootpath.length-1)&&(this._sourceMapRootpath+="/")):this._sourceMapRootpath="",this._outputSourceFiles=b.outputSourceFiles,this._sourceMapGeneratorConstructor=a.getSourceMapGenerator(),this._lineNumber=0,this._column=0};return b.prototype.normalizeFilename=function(a){return a=a.replace(/\\\\/g,"/"),this._sourceMapBasepath&&0===a.indexOf(this._sourceMapBasepath)&&(a=a.substring(this._sourceMapBasepath.length),("\\\\"===a.charAt(0)||"/"===a.charAt(0))&&(a=a.substring(1))),(this._sourceMapRootpath||"")+a},b.prototype.add=function(a,b,c,d){if(a){var e,f,g,h,i;if(b){var j=this._contentsMap[b.filename];this._contentsIgnoredCharsMap[b.filename]&&(c-=this._contentsIgnoredCharsMap[b.filename],0>c&&(c=0),j=j.slice(this._contentsIgnoredCharsMap[b.filename])),j=j.substring(0,c),f=j.split("\\n"),h=f[f.length-1]}if(e=a.split("\\n"),g=e[e.length-1],b)if(d)for(i=0;e.length>i;i++)this._sourceMapGenerator.addMapping({generated:{line:this._lineNumber+i+1,column:0===i?this._column:0},original:{line:f.length+i,column:0===i?h.length:0},source:this.normalizeFilename(b.filename)});else this._sourceMapGenerator.addMapping({generated:{line:this._lineNumber+1,column:this._column},original:{line:f.length,column:h.length},source:this.normalizeFilename(b.filename)});1===e.length?this._column+=g.length:(this._lineNumber+=e.length-1,this._column=g.length),this._css.push(a)}},b.prototype.isEmpty=function(){return 0===this._css.length},b.prototype.toCSS=function(a){if(this._sourceMapGenerator=new this._sourceMapGeneratorConstructor({file:this._outputFilename,sourceRoot:null}),this._outputSourceFiles)for(var b in this._contentsMap)if(this._contentsMap.hasOwnProperty(b)){var c=this._contentsMap[b];this._contentsIgnoredCharsMap[b]&&(c=c.slice(this._contentsIgnoredCharsMap[b])),this._sourceMapGenerator.setSourceContent(this.normalizeFilename(b),c)}if(this._rootNode.genCSS(a,this),this._css.length>0){var d,e=JSON.stringify(this._sourceMapGenerator.toJSON());this.sourceMapURL?d=this.sourceMapURL:this._sourceMapFilename&&(d=this._sourceMapFilename),this.sourceMapURL=d,this.sourceMap=e}return this._css.join("")},b}},{}],42:[function(a,b){var c=a("./contexts"),d=a("./visitors"),e=a("./tree");b.exports=function(a,b){b=b||{};var f,g=b.variables,h=new c.Eval(b);"object"!=typeof g||Array.isArray(g)||(g=Object.keys(g).map(function(a){var b=g[a];return b instanceof e.Value||(b instanceof e.Expression||(b=new e.Expression([b])),b=new e.Value([b])),new e.Rule("@"+a,b,!1,null,0)}),h.frames=[new e.Ruleset(null,g)]);var i,j=[],k=[new d.JoinSelectorVisitor,new d.ExtendVisitor,new d.ToCSSVisitor({compress:Boolean(b.compress)})];if(b.pluginManager){var l=b.pluginManager.getVisitors();for(i=0;l.length>i;i++){var m=l[i];m.isPreEvalVisitor?j.push(m):m.isPreVisitor?k.splice(0,0,m):k.push(m)}}for(i=0;j.length>i;i++)j[i].run(a);for(f=a.eval(h),i=0;k.length>i;i++)k[i].run(f);return f}},{"./contexts":10,"./tree":60,"./visitors":85}],43:[function(a,b){var c=a("./node"),d=function(a){this.value=a};d.prototype=new c,d.prototype.type="Alpha",d.prototype.accept=function(a){this.value=a.visit(this.value)},d.prototype.eval=function(a){return this.value.eval?new d(this.value.eval(a)):this},d.prototype.genCSS=function(a,b){b.add("alpha(opacity="),this.value.genCSS?this.value.genCSS(a,b):b.add(this.value),b.add(")")},b.exports=d},{"./node":68}],44:[function(a,b){var c=a("./node"),d=function(a,b,c,d,e){this.value=a,this.index=b,this.mapLines=d,this.currentFileInfo=c,this.rulesetLike="undefined"==typeof e?!1:e};d.prototype=new c,d.prototype.type="Anonymous",d.prototype.eval=function(){return new d(this.value,this.index,this.currentFileInfo,this.mapLines,this.rulesetLike)},d.prototype.compare=function(a){return a.toCSS&&this.toCSS()===a.toCSS()?0:void 0},d.prototype.isRulesetLike=function(){return this.rulesetLike},d.prototype.genCSS=function(a,b){b.add(this.value,this.currentFileInfo,this.index,this.mapLines)},b.exports=d},{"./node":68}],45:[function(a,b){var c=a("./node"),d=function(a,b){this.key=a,this.value=b};d.prototype=new c,d.prototype.type="Assignment",d.prototype.accept=function(a){this.value=a.visit(this.value)},d.prototype.eval=function(a){return this.value.eval?new d(this.key,this.value.eval(a)):this},d.prototype.genCSS=function(a,b){b.add(this.key+"="),this.value.genCSS?this.value.genCSS(a,b):b.add(this.value)},b.exports=d},{"./node":68}],46:[function(a,b){var c=a("./node"),d=function(a,b,c){this.key=a,this.op=b,this.value=c};d.prototype=new c,d.prototype.type="Attribute",d.prototype.eval=function(a){return new d(this.key.eval?this.key.eval(a):this.key,this.op,this.value&&this.value.eval?this.value.eval(a):this.value)},d.prototype.genCSS=function(a,b){b.add(this.toCSS(a))},d.prototype.toCSS=function(a){var b=this.key.toCSS?this.key.toCSS(a):this.key;return this.op&&(b+=this.op,b+=this.value.toCSS?this.value.toCSS(a):this.value),"["+b+"]"},b.exports=d},{"./node":68}],47:[function(a,b){var c=a("./node"),d=a("../functions/function-caller"),e=function(a,b,c,d){this.name=a,this.args=b,this.index=c,this.currentFileInfo=d};e.prototype=new c,e.prototype.type="Call",e.prototype.accept=function(a){this.args&&(this.args=a.visitArray(this.args))},e.prototype.eval=function(a){var b,c=this.args.map(function(b){return b.eval(a)}),f=new d(this.name,a,this.index,this.currentFileInfo);if(f.isValid())try{if(b=f.call(c),null!=b)return b}catch(g){throw{type:g.type||"Runtime",message:"error evaluating function `"+this.name+"`"+(g.message?": "+g.message:""),index:this.index,filename:this.currentFileInfo.filename}}return new e(this.name,c,this.index,this.currentFileInfo)},e.prototype.genCSS=function(a,b){b.add(this.name+"(",this.currentFileInfo,this.index);for(var c=0;this.args.length>c;c++)this.args[c].genCSS(a,b),this.args.length>c+1&&b.add(", ");b.add(")")},b.exports=e},{"../functions/function-caller":20,"./node":68}],48:[function(a,b){function c(a,b){return Math.min(Math.max(a,0),b)}function d(a){return"#"+a.map(function(a){return a=c(Math.round(a),255),(16>a?"0":"")+a.toString(16)}).join("")}var e=a("./node"),f=a("../data/colors"),g=function(a,b){this.rgb=Array.isArray(a)?a:6==a.length?a.match(/.{2}/g).map(function(a){return parseInt(a,16)}):a.split("").map(function(a){return parseInt(a+a,16)}),this.alpha="number"==typeof b?b:1};g.prototype=new e,g.prototype.type="Color",g.prototype.luma=function(){var a=this.rgb[0]/255,b=this.rgb[1]/255,c=this.rgb[2]/255;return a=.03928>=a?a/12.92:Math.pow((a+.055)/1.055,2.4),b=.03928>=b?b/12.92:Math.pow((b+.055)/1.055,2.4),c=.03928>=c?c/12.92:Math.pow((c+.055)/1.055,2.4),.2126*a+.7152*b+.0722*c},g.prototype.genCSS=function(a,b){b.add(this.toCSS(a))},g.prototype.toCSS=function(a,b){var d,e,f=a&&a.compress&&!b;if(this.value)return this.value;if(e=this.fround(a,this.alpha),1>e)return"rgba("+this.rgb.map(function(a){return c(Math.round(a),255)}).concat(c(e,1)).join(","+(f?"":" "))+")";if(d=this.toRGB(),f){var g=d.split("");g[1]===g[2]&&g[3]===g[4]&&g[5]===g[6]&&(d="#"+g[1]+g[3]+g[5])}return d},g.prototype.operate=function(a,b,c){for(var d=[],e=this.alpha*(1-c.alpha)+c.alpha,f=0;3>f;f++)d[f]=this._operate(a,b,this.rgb[f],c.rgb[f]);return new g(d,e)},g.prototype.toRGB=function(){return d(this.rgb)},g.prototype.toHSL=function(){var a,b,c=this.rgb[0]/255,d=this.rgb[1]/255,e=this.rgb[2]/255,f=this.alpha,g=Math.max(c,d,e),h=Math.min(c,d,e),i=(g+h)/2,j=g-h;if(g===h)a=b=0;else{switch(b=i>.5?j/(2-g-h):j/(g+h),g){case c:a=(d-e)/j+(e>d?6:0);break;case d:a=(e-c)/j+2;break;case e:a=(c-d)/j+4}a/=6}return{h:360*a,s:b,l:i,a:f}},g.prototype.toHSV=function(){var a,b,c=this.rgb[0]/255,d=this.rgb[1]/255,e=this.rgb[2]/255,f=this.alpha,g=Math.max(c,d,e),h=Math.min(c,d,e),i=g,j=g-h;if(b=0===g?0:j/g,g===h)a=0;else{switch(g){case c:a=(d-e)/j+(e>d?6:0);break;case d:a=(e-c)/j+2;break;case e:a=(c-d)/j+4}a/=6}return{h:360*a,s:b,v:i,a:f}},g.prototype.toARGB=function(){return d([255*this.alpha].concat(this.rgb))},g.prototype.compare=function(a){return a.rgb&&a.rgb[0]===this.rgb[0]&&a.rgb[1]===this.rgb[1]&&a.rgb[2]===this.rgb[2]&&a.alpha===this.alpha?0:void 0},g.fromKeyword=function(a){var b,c=a.toLowerCase();return f.hasOwnProperty(c)?b=new g(f[c].slice(1)):"transparent"===c&&(b=new g([0,0,0],0)),b?(b.value=a,b):void 0},b.exports=g},{"../data/colors":11,"./node":68}],49:[function(a,b){var c=a("./node"),d=function(a){" "===a?(this.value=" ",this.emptyOrWhitespace=!0):(this.value=a?a.trim():"",this.emptyOrWhitespace=""===this.value)};d.prototype=new c,d.prototype.type="Combinator";var e={"":!0," ":!0,"|":!0};d.prototype.genCSS=function(a,b){var c=a.compress||e[this.value]?"":" ";b.add(c+this.value+c)},b.exports=d},{"./node":68}],50:[function(a,b){var c=a("./node"),d=a("./debug-info"),e=function(a,b,c,d){this.value=a,this.isLineComment=b,this.currentFileInfo=d};e.prototype=new c,e.prototype.type="Comment",e.prototype.genCSS=function(a,b){this.debugInfo&&b.add(d(a,this),this.currentFileInfo,this.index),b.add(this.value)},e.prototype.isSilent=function(a){var b=this.currentFileInfo&&this.currentFileInfo.reference&&!this.isReferenced,c=a.compress&&"!"!==this.value[2];return this.isLineComment||b||c},e.prototype.markReferenced=function(){this.isReferenced=!0},b.exports=e},{"./debug-info":52,"./node":68}],51:[function(a,b){var c=a("./node"),d=function(a,b,c,d,e){this.op=a.trim(),this.lvalue=b,this.rvalue=c,this.index=d,this.negate=e};d.prototype=new c,d.prototype.type="Condition",d.prototype.accept=function(a){this.lvalue=a.visit(this.lvalue),this.rvalue=a.visit(this.rvalue)},d.prototype.eval=function(a){var b=function(a,b,d){switch(a){case"and":return b&&d;case"or":return b||d;default:switch(c.compare(b,d)){case-1:return"<"===a||"=<"===a||"<="===a;case 0:return"="===a||">="===a||"=<"===a||"<="===a;case 1:return">"===a||">="===a;default:return!1}}}(this.op,this.lvalue.eval(a),this.rvalue.eval(a));return this.negate?!b:b},b.exports=d},{"./node":68}],52:[function(a,b){var c=function(a,b,d){var e="";if(a.dumpLineNumbers&&!a.compress)switch(a.dumpLineNumbers){case"comments":e=c.asComment(b);break;case"mediaquery":e=c.asMediaQuery(b);break;case"all":e=c.asComment(b)+(d||"")+c.asMediaQuery(b)}return e};c.asComment=function(a){return"/* line "+a.debugInfo.lineNumber+", "+a.debugInfo.fileName+" */\\n"},c.asMediaQuery=function(a){var b=a.debugInfo.fileName;return/^[a-z]+:\\/\\//i.test(b)||(b="file://"+b),"@media -sass-debug-info{filename{font-family:"+b.replace(/([.:\\/\\\\])/g,function(a){return"\\\\"==a&&(a="/"),"\\\\"+a})+"}line{font-family:\\\\00003"+a.debugInfo.lineNumber+"}}\\n"},b.exports=c},{}],53:[function(a,b){var c=a("./node"),d=a("../contexts"),e=function(a,b){this.ruleset=a,this.frames=b};e.prototype=new c,e.prototype.type="DetachedRuleset",e.prototype.evalFirst=!0,e.prototype.accept=function(a){this.ruleset=a.visit(this.ruleset)},e.prototype.eval=function(a){var b=this.frames||a.frames.slice(0);return new e(this.ruleset,b)},e.prototype.callEval=function(a){return this.ruleset.eval(this.frames?new d.Eval(a,this.frames.concat(a.frames)):a)},b.exports=e},{"../contexts":10,"./node":68}],54:[function(a,b){var c=a("./node"),d=a("../data/unit-conversions"),e=a("./unit"),f=a("./color"),g=function(a,b){this.value=parseFloat(a),this.unit=b&&b instanceof e?b:new e(b?[b]:void 0)};g.prototype=new c,g.prototype.type="Dimension",g.prototype.accept=function(a){this.unit=a.visit(this.unit)},g.prototype.eval=function(){return this},g.prototype.toColor=function(){return new f([this.value,this.value,this.value])},g.prototype.genCSS=function(a,b){if(a&&a.strictUnits&&!this.unit.isSingular())throw new Error("Multiple units in dimension. Correct the units or use the unit function. Bad unit: "+this.unit.toString());var c=this.fround(a,this.value),d=String(c);if(0!==c&&1e-6>c&&c>-1e-6&&(d=c.toFixed(20).replace(/0+$/,"")),a&&a.compress){if(0===c&&this.unit.isLength())return void b.add(d);c>0&&1>c&&(d=d.substr(1))}b.add(d),this.unit.genCSS(a,b)},g.prototype.operate=function(a,b,c){var d=this._operate(a,b,this.value,c.value),e=this.unit.clone();if("+"===b||"-"===b)if(0===e.numerator.length&&0===e.denominator.length)e=c.unit.clone(),this.unit.backupUnit&&(e.backupUnit=this.unit.backupUnit);else if(0===c.unit.numerator.length&&0===e.denominator.length);else{if(c=c.convertTo(this.unit.usedUnits()),a.strictUnits&&c.unit.toString()!==e.toString())throw new Error("Incompatible units. Change the units or use the unit function. Bad units: \'"+e.toString()+"\' and \'"+c.unit.toString()+"\'.");d=this._operate(a,b,this.value,c.value)}else"*"===b?(e.numerator=e.numerator.concat(c.unit.numerator).sort(),e.denominator=e.denominator.concat(c.unit.denominator).sort(),e.cancel()):"/"===b&&(e.numerator=e.numerator.concat(c.unit.denominator).sort(),e.denominator=e.denominator.concat(c.unit.numerator).sort(),e.cancel());return new g(d,e)},g.prototype.compare=function(a){var b,d;if(!(a instanceof g))return void 0;if(this.unit.isEmpty()||a.unit.isEmpty())b=this,d=a;else if(b=this.unify(),d=a.unify(),0!==b.unit.compare(d.unit))return void 0;return c.numericCompare(b.value,d.value)},g.prototype.unify=function(){return this.convertTo({length:"px",duration:"s",angle:"rad"})},g.prototype.convertTo=function(a){var b,c,e,f,h,i=this.value,j=this.unit.clone(),k={};if("string"==typeof a){for(b in d)d[b].hasOwnProperty(a)&&(k={},k[b]=a);a=k}h=function(a,b){return e.hasOwnProperty(a)?(b?i/=e[a]/e[f]:i*=e[a]/e[f],f):a};for(c in a)a.hasOwnProperty(c)&&(f=a[c],e=d[c],j.map(h));return j.cancel(),new g(i,j)},b.exports=g},{"../data/unit-conversions":13,"./color":48,"./node":68,"./unit":77}],55:[function(a,b){var c=a("./node"),d=a("./selector"),e=a("./ruleset"),f=function(a,b,c,e,f,g,h,i){var j;if(this.name=a,this.value=b,c)for(Array.isArray(c)?this.rules=c:(this.rules=[c],this.rules[0].selectors=new d([],null,null,this.index,f).createEmptySelectors()),j=0;this.rules.length>j;j++)this.rules[j].allowImports=!0;this.index=e,this.currentFileInfo=f,this.debugInfo=g,this.isReferenced=h,this.isRooted=i||!1};f.prototype=new c,f.prototype.type="Directive",f.prototype.accept=function(a){var b=this.value,c=this.rules;c&&(this.rules=a.visitArray(c)),b&&(this.value=a.visit(b))},f.prototype.isRulesetLike=function(){return this.rules||!this.isCharset()},f.prototype.isCharset=function(){return"@charset"===this.name},f.prototype.genCSS=function(a,b){var c=this.value,d=this.rules;b.add(this.name,this.currentFileInfo,this.index),c&&(b.add(" "),c.genCSS(a,b)),d?this.outputRuleset(a,b,d):b.add(";")},f.prototype.eval=function(a){var b,c,d=this.value,e=this.rules;return b=a.mediaPath,c=a.mediaBlocks,a.mediaPath=[],a.mediaBlocks=[],d&&(d=d.eval(a)),e&&(e=[e[0].eval(a)],e[0].root=!0),a.mediaPath=b,a.mediaBlocks=c,new f(this.name,d,e,this.index,this.currentFileInfo,this.debugInfo,this.isReferenced,this.isRooted)},f.prototype.variable=function(a){return this.rules?e.prototype.variable.call(this.rules[0],a):void 0},f.prototype.find=function(){return this.rules?e.prototype.find.apply(this.rules[0],arguments):void 0},f.prototype.rulesets=function(){return this.rules?e.prototype.rulesets.apply(this.rules[0]):void 0},f.prototype.markReferenced=function(){var a,b;if(this.isReferenced=!0,this.rules)for(b=this.rules,a=0;b.length>a;a++)b[a].markReferenced&&b[a].markReferenced()},f.prototype.getIsReferenced=function(){return!this.currentFileInfo||!this.currentFileInfo.reference||this.isReferenced},f.prototype.outputRuleset=function(a,b,c){var d,e=c.length;if(a.tabLevel=(0|a.tabLevel)+1,a.compress){for(b.add("{"),d=0;e>d;d++)c[d].genCSS(a,b);return b.add("}"),void a.tabLevel--}var f="\\n"+Array(a.tabLevel).join("  "),g=f+"  ";if(e){for(b.add(" {"+g),c[0].genCSS(a,b),d=1;e>d;d++)b.add(g),c[d].genCSS(a,b);b.add(f+"}")}else b.add(" {"+f+"}");a.tabLevel--},b.exports=f},{"./node":68,"./ruleset":74,"./selector":75}],56:[function(a,b){var c=a("./node"),d=a("./paren"),e=a("./combinator"),f=function(a,b,c,d){this.combinator=a instanceof e?a:new e(a),this.value="string"==typeof b?b.trim():b?b:"",this.index=c,this.currentFileInfo=d};f.prototype=new c,f.prototype.type="Element",f.prototype.accept=function(a){var b=this.value;this.combinator=a.visit(this.combinator),"object"==typeof b&&(this.value=a.visit(b))},f.prototype.eval=function(a){return new f(this.combinator,this.value.eval?this.value.eval(a):this.value,this.index,this.currentFileInfo)},f.prototype.genCSS=function(a,b){b.add(this.toCSS(a),this.currentFileInfo,this.index)},f.prototype.toCSS=function(a){a=a||{};var b=this.value,c=a.firstSelector;return b instanceof d&&(a.firstSelector=!0),b=b.toCSS?b.toCSS(a):b,a.firstSelector=c,""===b&&"&"===this.combinator.value.charAt(0)?"":this.combinator.toCSS(a)+b},b.exports=f},{"./combinator":49,"./node":68,"./paren":70}],57:[function(a,b){var c=a("./node"),d=a("./paren"),e=a("./comment"),f=function(a){if(this.value=a,!a)throw new Error("Expression requires an array parameter")};f.prototype=new c,f.prototype.type="Expression",f.prototype.accept=function(a){this.value=a.visitArray(this.value)},f.prototype.eval=function(a){var b,c=this.parens&&!this.parensInOp,e=!1;return c&&a.inParenthesis(),this.value.length>1?b=new f(this.value.map(function(b){return b.eval(a)})):1===this.value.length?(this.value[0].parens&&!this.value[0].parensInOp&&(e=!0),b=this.value[0].eval(a)):b=this,c&&a.outOfParenthesis(),this.parens&&this.parensInOp&&!a.isMathOn()&&!e&&(b=new d(b)),b},f.prototype.genCSS=function(a,b){for(var c=0;this.value.length>c;c++)this.value[c].genCSS(a,b),this.value.length>c+1&&b.add(" ")},f.prototype.throwAwayComments=function(){this.value=this.value.filter(function(a){return!(a instanceof e)})},b.exports=f},{"./comment":50,"./node":68,"./paren":70}],58:[function(a,b){var c=a("./node"),d=function e(a,b,c){switch(this.selector=a,this.option=b,this.index=c,this.object_id=e.next_id++,this.parent_ids=[this.object_id],b){case"all":this.allowBefore=!0,this.allowAfter=!0;break;default:this.allowBefore=!1,this.allowAfter=!1}};d.next_id=0,d.prototype=new c,d.prototype.type="Extend",d.prototype.accept=function(a){this.selector=a.visit(this.selector)},d.prototype.eval=function(a){return new d(this.selector.eval(a),this.option,this.index)},d.prototype.clone=function(){return new d(this.selector,this.option,this.index)},d.prototype.findSelfSelectors=function(a){var b,c,d=[];for(b=0;a.length>b;b++)c=a[b].elements,b>0&&c.length&&""===c[0].combinator.value&&(c[0].combinator.value=" "),d=d.concat(a[b].elements);this.selfSelectors=[{elements:d}]},b.exports=d},{"./node":68}],59:[function(a,b){var c=a("./node"),d=a("./media"),e=a("./url"),f=a("./quoted"),g=a("./ruleset"),h=a("./anonymous"),i=function(a,b,c,d,e){if(this.options=c,this.index=d,this.path=a,this.features=b,this.currentFileInfo=e,void 0!==this.options.less||this.options.inline)this.css=!this.options.less||this.options.inline;else{var f=this.getPath();f&&/[#\\.\\&\\?\\/]css([\\?;].*)?$/.test(f)&&(this.css=!0)}};i.prototype=new c,i.prototype.type="Import",i.prototype.accept=function(a){this.features&&(this.features=a.visit(this.features)),this.path=a.visit(this.path),this.options.plugin||this.options.inline||!this.root||(this.root=a.visit(this.root))},i.prototype.genCSS=function(a,b){this.css&&void 0===this.path.currentFileInfo.reference&&(b.add("@import ",this.currentFileInfo,this.index),this.path.genCSS(a,b),this.features&&(b.add(" "),this.features.genCSS(a,b)),b.add(";"))},i.prototype.getPath=function(){return this.path instanceof e?this.path.value.value:this.path.value},i.prototype.isVariableImport=function(){var a=this.path;return a instanceof e&&(a=a.value),a instanceof f?a.containsVariables():!0},i.prototype.evalForImport=function(a){var b=this.path;return b instanceof e&&(b=b.value),new i(b.eval(a),this.features,this.options,this.index,this.currentFileInfo)},i.prototype.evalPath=function(a){var b=this.path.eval(a),c=this.currentFileInfo&&this.currentFileInfo.rootpath;if(!(b instanceof e)){if(c){var d=b.value;d&&a.isPathRelative(d)&&(b.value=c+d)}b.value=a.normalizePath(b.value)}return b},i.prototype.eval=function(a){var b,c,e=this.features&&this.features.eval(a);if(this.options.plugin)return c=a.frames[0]&&a.frames[0].functionRegistry,c&&this.root&&this.root.functions&&c.addMultiple(this.root.functions),[];if(this.skip&&("function"==typeof this.skip&&(this.skip=this.skip()),this.skip))return[];if(this.options.inline){var f=new h(this.root,0,{filename:this.importedFilename},!0,!0);return this.features?new d([f],this.features.value):[f]}if(this.css){var j=new i(this.evalPath(a),e,this.options,this.index);if(!j.css&&this.error)throw this.error;return j}return b=new g(null,this.root.rules.slice(0)),b.evalImports(a),this.features?new d(b.rules,this.features.value):b.rules},b.exports=i},{"./anonymous":44,"./media":64,"./node":68,"./quoted":71,"./ruleset":74,"./url":78}],60:[function(a,b){var c={};c.Node=a("./node"),c.Alpha=a("./alpha"),c.Color=a("./color"),c.Directive=a("./directive"),c.DetachedRuleset=a("./detached-ruleset"),c.Operation=a("./operation"),c.Dimension=a("./dimension"),c.Unit=a("./unit"),c.Keyword=a("./keyword"),c.Variable=a("./variable"),c.Ruleset=a("./ruleset"),c.Element=a("./element"),c.Attribute=a("./attribute"),c.Combinator=a("./combinator"),c.Selector=a("./selector"),c.Quoted=a("./quoted"),c.Expression=a("./expression"),c.Rule=a("./rule"),c.Call=a("./call"),c.URL=a("./url"),c.Import=a("./import"),c.mixin={Call:a("./mixin-call"),Definition:a("./mixin-definition")},c.Comment=a("./comment"),c.Anonymous=a("./anonymous"),c.Value=a("./value"),c.JavaScript=a("./javascript"),c.Assignment=a("./assignment"),c.Condition=a("./condition"),c.Paren=a("./paren"),c.Media=a("./media"),c.UnicodeDescriptor=a("./unicode-descriptor"),c.Negative=a("./negative"),c.Extend=a("./extend"),c.RulesetCall=a("./ruleset-call"),b.exports=c},{"./alpha":43,"./anonymous":44,"./assignment":45,"./attribute":46,"./call":47,"./color":48,"./combinator":49,"./comment":50,"./condition":51,"./detached-ruleset":53,"./dimension":54,"./directive":55,"./element":56,"./expression":57,"./extend":58,"./import":59,"./javascript":61,"./keyword":63,"./media":64,"./mixin-call":65,"./mixin-definition":66,"./negative":67,"./node":68,"./operation":69,"./paren":70,"./quoted":71,"./rule":72,"./ruleset":74,"./ruleset-call":73,"./selector":75,"./unicode-descriptor":76,"./unit":77,"./url":78,"./value":79,"./variable":80}],61:[function(a,b){var c=a("./js-eval-node"),d=a("./dimension"),e=a("./quoted"),f=a("./anonymous"),g=function(a,b,c,d){this.escaped=b,this.expression=a,this.index=c,this.currentFileInfo=d};g.prototype=new c,g.prototype.type="JavaScript",g.prototype.eval=function(a){var b=this.evaluateJavaScript(this.expression,a);return"number"==typeof b?new d(b):"string"==typeof b?new e(\'"\'+b+\'"\',b,this.escaped,this.index):new f(Array.isArray(b)?b.join(", "):b)},b.exports=g},{"./anonymous":44,"./dimension":54,"./js-eval-node":62,"./quoted":71}],62:[function(a,b){var c=a("./node"),d=a("./variable"),e=function(){};e.prototype=new c,e.prototype.evaluateJavaScript=function(a,b){var c,e=this,f={};if(void 0!==b.javascriptEnabled&&!b.javascriptEnabled)throw{message:"You are using JavaScript, which has been disabled.",filename:this.currentFileInfo.filename,index:this.index};a=a.replace(/@\\{([\\w-]+)\\}/g,function(a,c){return e.jsify(new d("@"+c,e.index,e.currentFileInfo).eval(b))});try{a=new Function("return ("+a+")")}catch(g){throw{message:"JavaScript evaluation error: "+g.message+" from `"+a+"`",filename:this.currentFileInfo.filename,index:this.index}}var h=b.frames[0].variables();for(var i in h)h.hasOwnProperty(i)&&(f[i.slice(1)]={value:h[i].value,toJS:function(){return this.value.eval(b).toCSS()}});try{c=a.call(f)}catch(g){throw{message:"JavaScript evaluation error: \'"+g.name+": "+g.message.replace(/["]/g,"\'")+"\'",filename:this.currentFileInfo.filename,index:this.index}}return c},e.prototype.jsify=function(a){return Array.isArray(a.value)&&a.value.length>1?"["+a.value.map(function(a){return a.toCSS()}).join(", ")+"]":a.toCSS()},b.exports=e},{"./node":68,"./variable":80}],63:[function(a,b){var c=a("./node"),d=function(a){this.value=a};d.prototype=new c,d.prototype.type="Keyword",d.prototype.genCSS=function(a,b){if("%"===this.value)throw{type:"Syntax",message:"Invalid % without number"};b.add(this.value)},d.True=new d("true"),d.False=new d("false"),b.exports=d},{"./node":68}],64:[function(a,b){var c=a("./ruleset"),d=a("./value"),e=a("./selector"),f=a("./anonymous"),g=a("./expression"),h=a("./directive"),i=function(a,b,f,g){this.index=f,this.currentFileInfo=g;var h=new e([],null,null,this.index,this.currentFileInfo).createEmptySelectors();this.features=new d(b),this.rules=[new c(h,a)],this.rules[0].allowImports=!0};i.prototype=new h,i.prototype.type="Media",i.prototype.isRulesetLike=!0,i.prototype.accept=function(a){this.features&&(this.features=a.visit(this.features)),this.rules&&(this.rules=a.visitArray(this.rules))},i.prototype.genCSS=function(a,b){b.add("@media ",this.currentFileInfo,this.index),this.features.genCSS(a,b),this.outputRuleset(a,b,this.rules)},i.prototype.eval=function(a){a.mediaBlocks||(a.mediaBlocks=[],a.mediaPath=[]);var b=new i(null,[],this.index,this.currentFileInfo);this.debugInfo&&(this.rules[0].debugInfo=this.debugInfo,b.debugInfo=this.debugInfo);var c=!1;a.strictMath||(c=!0,a.strictMath=!0);try{b.features=this.features.eval(a)}finally{c&&(a.strictMath=!1)}return a.mediaPath.push(b),a.mediaBlocks.push(b),this.rules[0].functionRegistry=a.frames[0].functionRegistry.inherit(),a.frames.unshift(this.rules[0]),b.rules=[this.rules[0].eval(a)],a.frames.shift(),a.mediaPath.pop(),0===a.mediaPath.length?b.evalTop(a):b.evalNested(a)},i.prototype.evalTop=function(a){var b=this;if(a.mediaBlocks.length>1){var d=new e([],null,null,this.index,this.currentFileInfo).createEmptySelectors();b=new c(d,a.mediaBlocks),b.multiMedia=!0}return delete a.mediaBlocks,delete a.mediaPath,b},i.prototype.evalNested=function(a){var b,e,h=a.mediaPath.concat([this]);for(b=0;h.length>b;b++)e=h[b].features instanceof d?h[b].features.value:h[b].features,h[b]=Array.isArray(e)?e:[e];return this.features=new d(this.permute(h).map(function(a){for(a=a.map(function(a){return a.toCSS?a:new f(a)}),b=a.length-1;b>0;b--)a.splice(b,0,new f("and"));return new g(a)})),new c([],[])},i.prototype.permute=function(a){if(0===a.length)return[];if(1===a.length)return a[0];for(var b=[],c=this.permute(a.slice(1)),d=0;c.length>d;d++)for(var e=0;a[0].length>e;e++)b.push([a[0][e]].concat(c[d]));return b},i.prototype.bubbleSelectors=function(a){a&&(this.rules=[new c(a.slice(0),[this.rules[0]])])},b.exports=i},{"./anonymous":44,"./directive":55,"./expression":57,"./ruleset":74,"./selector":75,"./value":79}],65:[function(a,b){var c=a("./node"),d=a("./selector"),e=a("./mixin-definition"),f=a("../functions/default"),g=function(a,b,c,e,f){this.selector=new d(a),this.arguments=b&&b.length?b:null,this.index=c,this.currentFileInfo=e,this.important=f};g.prototype=new c,g.prototype.type="MixinCall",g.prototype.accept=function(a){this.selector&&(this.selector=a.visit(this.selector)),this.arguments&&(this.arguments=a.visitArray(this.arguments))},g.prototype.eval=function(a){function b(b,c){var d,e;for(k=0;2>k;k++){for(w[k]=!0,f.value(k),d=0;c.length>d&&w[k];d++)e=c[d],e.matchCondition&&(w[k]=w[k]&&e.matchCondition(null,a));b.matchCondition&&(w[k]=w[k]&&b.matchCondition(h,a))}return w[0]||w[1]?w[0]!=w[1]?w[1]?z:A:y:x}var c,d,g,h,i,j,k,l,m,n,o,p,q,r,s,t=[],u=!1,v=[],w=[],x=-1,y=0,z=1,A=2;for(h=this.arguments&&this.arguments.map(function(b){return{name:b.name,value:b.value.eval(a)}}),s=function(b){return b.matchArgs(null,a)},i=0;a.frames.length>i;i++)if((c=a.frames[i].find(this.selector,null,s)).length>0){for(m=!0,j=0;c.length>j;j++){for(d=c[j].rule,g=c[j].path,l=!1,k=0;a.frames.length>k;k++)if(!(d instanceof e)&&d===(a.frames[k].originalRuleset||a.frames[k])){l=!0;break}l||d.matchArgs(h,a)&&(o={mixin:d,group:b(d,g)},o.group!==x&&v.push(o),u=!0)}for(f.reset(),q=[0,0,0],j=0;v.length>j;j++)q[v[j].group]++;if(q[y]>0)p=A;else if(p=z,q[z]+q[A]>1)throw{type:"Runtime",message:"Ambiguous use of `default()` found when matching for `"+this.format(h)+"`",index:this.index,filename:this.currentFileInfo.filename};for(j=0;v.length>j;j++)if(o=v[j].group,o===y||o===p)try{d=v[j].mixin,d instanceof e||(r=d.originalRuleset||d,d=new e("",[],d.rules,null,!1),d.originalRuleset=r),Array.prototype.push.apply(t,d.evalCall(a,h,this.important).rules)}catch(B){throw{message:B.message,index:this.index,filename:this.currentFileInfo.filename,stack:B.stack}}if(u){if(!this.currentFileInfo||!this.currentFileInfo.reference)for(i=0;t.length>i;i++)n=t[i],n.markReferenced&&n.markReferenced();return t}}throw m?{type:"Runtime",message:"No matching definition was found for `"+this.format(h)+"`",index:this.index,filename:this.currentFileInfo.filename}:{type:"Name",message:this.selector.toCSS().trim()+" is undefined",index:this.index,filename:this.currentFileInfo.filename}},g.prototype.format=function(a){return this.selector.toCSS().trim()+"("+(a?a.map(function(a){var b="";return a.name&&(b+=a.name+":"),b+=a.value.toCSS?a.value.toCSS():"???"}).join(", "):"")+")"},b.exports=g},{"../functions/default":19,"./mixin-definition":66,"./node":68,"./selector":75}],66:[function(a,b){var c=a("./selector"),d=a("./element"),e=a("./ruleset"),f=a("./rule"),g=a("./expression"),h=a("../contexts"),i=function(a,b,e,f,g,h){this.name=a,this.selectors=[new c([new d(null,a,this.index,this.currentFileInfo)])],this.params=b,this.condition=f,this.variadic=g,this.arity=b.length,this.rules=e,this._lookups={},this.required=b.reduce(function(a,b){return!b.name||b.name&&!b.value?a+1:a},0),this.frames=h};i.prototype=new e,i.prototype.type="MixinDefinition",i.prototype.evalFirst=!0,i.prototype.accept=function(a){this.params&&this.params.length&&(this.params=a.visitArray(this.params)),this.rules=a.visitArray(this.rules),this.condition&&(this.condition=a.visit(this.condition))},i.prototype.evalParams=function(a,b,c,d){var i,j,k,l,m,n,o,p,q=new e(null,null),r=this.params.slice(0),s=0;if(b.frames&&b.frames[0]&&b.frames[0].functionRegistry&&(q.functionRegistry=b.frames[0].functionRegistry.inherit()),b=new h.Eval(b,[q].concat(b.frames)),c)for(c=c.slice(0),s=c.length,k=0;s>k;k++)if(j=c[k],n=j&&j.name){for(o=!1,l=0;r.length>l;l++)if(!d[l]&&n===r[l].name){d[l]=j.value.eval(a),q.prependRule(new f(n,j.value.eval(a))),o=!0;break}if(o){c.splice(k,1),k--;continue}throw{type:"Runtime",message:"Named argument for "+this.name+" "+c[k].name+" not found"}}for(p=0,k=0;r.length>k;k++)if(!d[k]){if(j=c&&c[p],n=r[k].name)if(r[k].variadic){for(i=[],l=p;s>l;l++)i.push(c[l].value.eval(a));q.prependRule(new f(n,new g(i).eval(a)))}else{if(m=j&&j.value)m=m.eval(a);else{if(!r[k].value)throw{type:"Runtime",message:"wrong number of arguments for "+this.name+" ("+s+" for "+this.arity+")"};m=r[k].value.eval(b),q.resetCache()}q.prependRule(new f(n,m)),d[k]=m}if(r[k].variadic&&c)for(l=p;s>l;l++)d[l]=c[l].value.eval(a);p++}return q},i.prototype.makeImportant=function(){var a=this.rules?this.rules.map(function(a){return a.makeImportant?a.makeImportant(!0):a}):this.rules,b=new i(this.name,this.params,a,this.condition,this.variadic,this.frames);return b},i.prototype.eval=function(a){return new i(this.name,this.params,this.rules,this.condition,this.variadic,this.frames||a.frames.slice(0))},i.prototype.evalCall=function(a,b,c){var d,i,j=[],k=this.frames?this.frames.concat(a.frames):a.frames,l=this.evalParams(a,new h.Eval(a,k),b,j);return l.prependRule(new f("@arguments",new g(j).eval(a))),d=this.rules.slice(0),i=new e(null,d),i.originalRuleset=this,i=i.eval(new h.Eval(a,[this,l].concat(k))),c&&(i=i.makeImportant()),i},i.prototype.matchCondition=function(a,b){return this.condition&&!this.condition.eval(new h.Eval(b,[this.evalParams(b,new h.Eval(b,this.frames?this.frames.concat(b.frames):b.frames),a,[])].concat(this.frames||[]).concat(b.frames)))?!1:!0},i.prototype.matchArgs=function(a,b){var c,d=a&&a.length||0;if(this.variadic){if(this.required-1>d)return!1}else{\nif(this.required>d)return!1;if(d>this.params.length)return!1}c=Math.min(d,this.arity);for(var e=0;c>e;e++)if(!this.params[e].name&&!this.params[e].variadic&&a[e].value.eval(b).toCSS()!=this.params[e].value.eval(b).toCSS())return!1;return!0},b.exports=i},{"../contexts":10,"./element":56,"./expression":57,"./rule":72,"./ruleset":74,"./selector":75}],67:[function(a,b){var c=a("./node"),d=a("./operation"),e=a("./dimension"),f=function(a){this.value=a};f.prototype=new c,f.prototype.type="Negative",f.prototype.genCSS=function(a,b){b.add("-"),this.value.genCSS(a,b)},f.prototype.eval=function(a){return a.isMathOn()?new d("*",[new e(-1),this.value]).eval(a):new f(this.value.eval(a))},b.exports=f},{"./dimension":54,"./node":68,"./operation":69}],68:[function(a,b){var c=function(){};c.prototype.toCSS=function(a){var b=[];return this.genCSS(a,{add:function(a){b.push(a)},isEmpty:function(){return 0===b.length}}),b.join("")},c.prototype.genCSS=function(a,b){b.add(this.value)},c.prototype.accept=function(a){this.value=a.visit(this.value)},c.prototype.eval=function(){return this},c.prototype._operate=function(a,b,c,d){switch(b){case"+":return c+d;case"-":return c-d;case"*":return c*d;case"/":return c/d}},c.prototype.fround=function(a,b){var c=a&&a.numPrecision;return null==c?b:Number((b+2e-16).toFixed(c))},c.compare=function(a,b){if(a.compare&&"Quoted"!==b.type&&"Anonymous"!==b.type)return a.compare(b);if(b.compare)return-b.compare(a);if(a.type!==b.type)return void 0;if(a=a.value,b=b.value,!Array.isArray(a))return a===b?0:void 0;if(a.length!==b.length)return void 0;for(var d=0;a.length>d;d++)if(0!==c.compare(a[d],b[d]))return void 0;return 0},c.numericCompare=function(a,b){return b>a?-1:a===b?0:a>b?1:void 0},b.exports=c},{}],69:[function(a,b){var c=a("./node"),d=a("./color"),e=a("./dimension"),f=function(a,b,c){this.op=a.trim(),this.operands=b,this.isSpaced=c};f.prototype=new c,f.prototype.type="Operation",f.prototype.accept=function(a){this.operands=a.visit(this.operands)},f.prototype.eval=function(a){var b=this.operands[0].eval(a),c=this.operands[1].eval(a);if(a.isMathOn()){if(b instanceof e&&c instanceof d&&(b=b.toColor()),c instanceof e&&b instanceof d&&(c=c.toColor()),!b.operate)throw{type:"Operation",message:"Operation on an invalid type"};return b.operate(a,this.op,c)}return new f(this.op,[b,c],this.isSpaced)},f.prototype.genCSS=function(a,b){this.operands[0].genCSS(a,b),this.isSpaced&&b.add(" "),b.add(this.op),this.isSpaced&&b.add(" "),this.operands[1].genCSS(a,b)},b.exports=f},{"./color":48,"./dimension":54,"./node":68}],70:[function(a,b){var c=a("./node"),d=function(a){this.value=a};d.prototype=new c,d.prototype.type="Paren",d.prototype.genCSS=function(a,b){b.add("("),this.value.genCSS(a,b),b.add(")")},d.prototype.eval=function(a){return new d(this.value.eval(a))},b.exports=d},{"./node":68}],71:[function(a,b){var c=a("./node"),d=a("./js-eval-node"),e=a("./variable"),f=function(a,b,c,d,e){this.escaped=null==c?!0:c,this.value=b||"",this.quote=a.charAt(0),this.index=d,this.currentFileInfo=e};f.prototype=new d,f.prototype.type="Quoted",f.prototype.genCSS=function(a,b){this.escaped||b.add(this.quote,this.currentFileInfo,this.index),b.add(this.value),this.escaped||b.add(this.quote)},f.prototype.containsVariables=function(){return this.value.match(/(`([^`]+)`)|@\\{([\\w-]+)\\}/)},f.prototype.eval=function(a){function b(a,b,c){var d=a;do a=d,d=a.replace(b,c);while(a!==d);return d}var c=this,d=this.value,g=function(b,d){return String(c.evaluateJavaScript(d,a))},h=function(b,d){var g=new e("@"+d,c.index,c.currentFileInfo).eval(a,!0);return g instanceof f?g.value:g.toCSS()};return d=b(d,/`([^`]+)`/g,g),d=b(d,/@\\{([\\w-]+)\\}/g,h),new f(this.quote+d+this.quote,d,this.escaped,this.index,this.currentFileInfo)},f.prototype.compare=function(a){return"Quoted"!==a.type||this.escaped||a.escaped?a.toCSS&&this.toCSS()===a.toCSS()?0:void 0:c.numericCompare(this.value,a.value)},b.exports=f},{"./js-eval-node":62,"./node":68,"./variable":80}],72:[function(a,b){function c(a,b){var c,d="",e=b.length,f={add:function(a){d+=a}};for(c=0;e>c;c++)b[c].eval(a).genCSS(a,f);return d}var d=a("./node"),e=a("./value"),f=a("./keyword"),g=function(a,b,c,f,g,h,i,j){this.name=a,this.value=b instanceof d?b:new e([b]),this.important=c?" "+c.trim():"",this.merge=f,this.index=g,this.currentFileInfo=h,this.inline=i||!1,this.variable=void 0!==j?j:a.charAt&&"@"===a.charAt(0)};g.prototype=new d,g.prototype.type="Rule",g.prototype.genCSS=function(a,b){b.add(this.name+(a.compress?":":": "),this.currentFileInfo,this.index);try{this.value.genCSS(a,b)}catch(c){throw c.index=this.index,c.filename=this.currentFileInfo.filename,c}b.add(this.important+(this.inline||a.lastRule&&a.compress?"":";"),this.currentFileInfo,this.index)},g.prototype.eval=function(a){var b,d=!1,e=this.name,h=this.variable;"string"!=typeof e&&(e=1===e.length&&e[0]instanceof f?e[0].value:c(a,e),h=!1),"font"!==e||a.strictMath||(d=!0,a.strictMath=!0);try{if(a.importantScope.push({}),b=this.value.eval(a),!this.variable&&"DetachedRuleset"===b.type)throw{message:"Rulesets cannot be evaluated on a property.",index:this.index,filename:this.currentFileInfo.filename};var i=this.important,j=a.importantScope.pop();return!i&&j.important&&(i=j.important),new g(e,b,i,this.merge,this.index,this.currentFileInfo,this.inline,h)}catch(k){throw"number"!=typeof k.index&&(k.index=this.index,k.filename=this.currentFileInfo.filename),k}finally{d&&(a.strictMath=!1)}},g.prototype.makeImportant=function(){return new g(this.name,this.value,"!important",this.merge,this.index,this.currentFileInfo,this.inline)},b.exports=g},{"./keyword":63,"./node":68,"./value":79}],73:[function(a,b){var c=a("./node"),d=a("./variable"),e=function(a){this.variable=a};e.prototype=new c,e.prototype.type="RulesetCall",e.prototype.eval=function(a){var b=new d(this.variable).eval(a);return b.callEval(a)},b.exports=e},{"./node":68,"./variable":80}],74:[function(a,b){var c=a("./node"),d=a("./rule"),e=a("./selector"),f=a("./element"),g=a("./paren"),h=a("../contexts"),i=a("../functions/function-registry"),j=a("../functions/default"),k=a("./debug-info"),l=function(a,b,c){this.selectors=a,this.rules=b,this._lookups={},this.strictImports=c};l.prototype=new c,l.prototype.type="Ruleset",l.prototype.isRuleset=!0,l.prototype.isRulesetLike=!0,l.prototype.accept=function(a){this.paths?a.visitArray(this.paths,!0):this.selectors&&(this.selectors=a.visitArray(this.selectors)),this.rules&&this.rules.length&&(this.rules=a.visitArray(this.rules))},l.prototype.eval=function(a){var b,c,e,f,g=this.selectors,h=!1;if(g&&(c=g.length)){for(b=[],j.error({type:"Syntax",message:"it is currently only allowed in parametric mixin guards,"}),f=0;c>f;f++)e=g[f].eval(a),b.push(e),e.evaldCondition&&(h=!0);j.reset()}else h=!0;var k,m,n=this.rules?this.rules.slice(0):null,o=new l(b,n,this.strictImports);o.originalRuleset=this,o.root=this.root,o.firstRoot=this.firstRoot,o.allowImports=this.allowImports,this.debugInfo&&(o.debugInfo=this.debugInfo),h||(n.length=0),o.functionRegistry=function(a){for(var b,c=0,d=a.length;c!==d;++c)if(b=a[c].functionRegistry)return b;return i}(a.frames).inherit();var p=a.frames;p.unshift(o);var q=a.selectors;q||(a.selectors=q=[]),q.unshift(this.selectors),(o.root||o.allowImports||!o.strictImports)&&o.evalImports(a);var r=o.rules,s=r?r.length:0;for(f=0;s>f;f++)r[f].evalFirst&&(r[f]=r[f].eval(a));var t=a.mediaBlocks&&a.mediaBlocks.length||0;for(f=0;s>f;f++)"MixinCall"===r[f].type?(n=r[f].eval(a).filter(function(a){return a instanceof d&&a.variable?!o.variable(a.name):!0}),r.splice.apply(r,[f,1].concat(n)),s+=n.length-1,f+=n.length-1,o.resetCache()):"RulesetCall"===r[f].type&&(n=r[f].eval(a).rules.filter(function(a){return a instanceof d&&a.variable?!1:!0}),r.splice.apply(r,[f,1].concat(n)),s+=n.length-1,f+=n.length-1,o.resetCache());for(f=0;r.length>f;f++)k=r[f],k.evalFirst||(r[f]=k=k.eval?k.eval(a):k);for(f=0;r.length>f;f++)if(k=r[f],k instanceof l&&k.selectors&&1===k.selectors.length&&k.selectors[0].isJustParentSelector()){r.splice(f--,1);for(var u=0;k.rules.length>u;u++)m=k.rules[u],m instanceof d&&m.variable||r.splice(++f,0,m)}if(p.shift(),q.shift(),a.mediaBlocks)for(f=t;a.mediaBlocks.length>f;f++)a.mediaBlocks[f].bubbleSelectors(b);return o},l.prototype.evalImports=function(a){var b,c,d=this.rules;if(d)for(b=0;d.length>b;b++)"Import"===d[b].type&&(c=d[b].eval(a),c&&c.length?(d.splice.apply(d,[b,1].concat(c)),b+=c.length-1):d.splice(b,1,c),this.resetCache())},l.prototype.makeImportant=function(){var a=new l(this.selectors,this.rules.map(function(a){return a.makeImportant?a.makeImportant():a}),this.strictImports);return a},l.prototype.matchArgs=function(a){return!a||0===a.length},l.prototype.matchCondition=function(a,b){var c=this.selectors[this.selectors.length-1];return c.evaldCondition?c.condition&&!c.condition.eval(new h.Eval(b,b.frames))?!1:!0:!1},l.prototype.resetCache=function(){this._rulesets=null,this._variables=null,this._lookups={}},l.prototype.variables=function(){return this._variables||(this._variables=this.rules?this.rules.reduce(function(a,b){if(b instanceof d&&b.variable===!0&&(a[b.name]=b),"Import"===b.type&&b.root&&b.root.variables){var c=b.root.variables();for(var e in c)c.hasOwnProperty(e)&&(a[e]=c[e])}return a},{}):{}),this._variables},l.prototype.variable=function(a){return this.variables()[a]},l.prototype.rulesets=function(){if(!this.rules)return[];var a,b,c=[],d=this.rules,e=d.length;for(a=0;e>a;a++)b=d[a],b.isRuleset&&c.push(b);return c},l.prototype.prependRule=function(a){var b=this.rules;b?b.unshift(a):this.rules=[a]},l.prototype.find=function(a,b,c){b=b||this;var d,f,g=[],h=a.toCSS();return h in this._lookups?this._lookups[h]:(this.rulesets().forEach(function(h){if(h!==b)for(var i=0;h.selectors.length>i;i++)if(d=a.match(h.selectors[i])){if(a.elements.length>d){if(!c||c(h)){f=h.find(new e(a.elements.slice(d)),b,c);for(var j=0;f.length>j;++j)f[j].path.push(h);Array.prototype.push.apply(g,f)}}else g.push({rule:h,path:[]});break}}),this._lookups[h]=g,g)},l.prototype.genCSS=function(a,b){function c(a){return"boolean"==typeof a.isRulesetLike?a.isRulesetLike:"function"==typeof a.isRulesetLike?a.isRulesetLike():!1}var d,e,f,g,h,i=[],j=[];a.tabLevel=a.tabLevel||0,this.root||a.tabLevel++;var l,m=a.compress?"":Array(a.tabLevel+1).join("  "),n=a.compress?"":Array(a.tabLevel).join("  "),o=0,p=0;for(d=0;this.rules.length>d;d++)g=this.rules[d],"Comment"===g.type?(p===d&&p++,j.push(g)):g.isCharset&&g.isCharset()?(j.splice(o,0,g),o++,p++):"Import"===g.type?(j.splice(p,0,g),p++):j.push(g);if(j=i.concat(j),!this.root){f=k(a,this,n),f&&(b.add(f),b.add(n));var q,r=this.paths,s=r.length;for(l=a.compress?",":",\\n"+n,d=0;s>d;d++)if(h=r[d],q=h.length)for(d>0&&b.add(l),a.firstSelector=!0,h[0].genCSS(a,b),a.firstSelector=!1,e=1;q>e;e++)h[e].genCSS(a,b);b.add((a.compress?"{":" {\\n")+m)}for(d=0;j.length>d;d++){g=j[d],d+1===j.length&&(a.lastRule=!0);var t=a.lastRule;c(g)&&(a.lastRule=!1),g.genCSS?g.genCSS(a,b):g.value&&b.add(g.value.toString()),a.lastRule=t,a.lastRule?a.lastRule=!1:b.add(a.compress?"":"\\n"+m)}this.root||(b.add(a.compress?"}":"\\n"+n+"}"),a.tabLevel--),b.isEmpty()||a.compress||!this.firstRoot||b.add("\\n")},l.prototype.markReferenced=function(){var a;if(this.selectors)for(a=0;this.selectors.length>a;a++)this.selectors[a].markReferenced();if(this.rules)for(a=0;this.rules.length>a;a++)this.rules[a].markReferenced&&this.rules[a].markReferenced()},l.prototype.getIsReferenced=function(){var a,b,c,d;if(this.paths)for(a=0;this.paths.length>a;a++)for(c=this.paths[a],b=0;c.length>b;b++)if(c[b].getIsReferenced&&c[b].getIsReferenced())return!0;if(this.selectors)for(a=0;this.selectors.length>a;a++)if(d=this.selectors[a],d.getIsReferenced&&d.getIsReferenced())return!0;return!1},l.prototype.joinSelectors=function(a,b,c){for(var d=0;c.length>d;d++)this.joinSelector(a,b,c[d])},l.prototype.joinSelector=function(a,b,c){function d(a,b){var c,d;if(0===a.length)c=new g(a[0]);else{var h=[];for(d=0;a.length>d;d++)h.push(new f(null,a[d],b.index,b.currentFileInfo));c=new g(new e(h))}return c}function h(a,b){var c,d;return c=new f(null,a,b.index,b.currentFileInfo),d=new e([c])}function i(a,b,c){function e(a){var b;return"Paren"!==a.value.type?null:(b=a.value.value,"Selector"!==b.type?null:b)}var g,m,n,o,p,q,r,s,t,u,v=!1;for(o=[],p=[[]],g=0;c.elements.length>g;g++)if(s=c.elements[g],"&"!==s.value){var w=e(s);if(null!=w){l(o,p);var x,y=[],z=[];for(x=i(y,b,w),v=v||x,n=0;y.length>n;n++){var A=h(d(y[n],s),s);k(p,[A],s,c,z)}p=z,o=[]}else o.push(s)}else{for(v=!0,q=[],l(o,p),m=0;p.length>m;m++)if(r=p[m],0===b.length)r.length>0&&r[0].elements.push(new f(s.combinator,"",s.index,s.currentFileInfo)),q.push(r);else for(n=0;b.length>n;n++){var B=j(r,b[n],s,c);q.push(B)}p=q,o=[]}for(l(o,p),g=0;p.length>g;g++)t=p[g].length,t>0&&(a.push(p[g]),u=p[g][t-1],p[g][t-1]=u.createDerived(u.elements,c.extendList));return v}function j(a,b,c,d){var e,g,h;if(e=[],a.length>0?(e=a.slice(0),g=e.pop(),h=d.createDerived(g.elements.slice(0))):h=d.createDerived([]),b.length>0){var i=c.combinator,j=b[0].elements[0];i.emptyOrWhitespace&&!j.combinator.emptyOrWhitespace&&(i=j.combinator),h.elements.push(new f(i,j.value,c.index,c.currentFileInfo)),h.elements=h.elements.concat(b[0].elements.slice(1))}return 0!==h.elements.length&&e.push(h),b.length>1&&(e=e.concat(b.slice(1))),e}function k(a,b,c,d,e){var f;for(f=0;a.length>f;f++){var g=j(a[f],b,c,d);e.push(g)}return e}function l(a,b){var c,d;if(0!==a.length){if(0===b.length)return void b.push([new e(a)]);for(c=0;b.length>c;c++)d=b[c],d.length>0?d[d.length-1]=d[d.length-1].createDerived(d[d.length-1].elements.concat(a)):d.push(new e(a))}}var m,n,o;if(n=[],o=i(n,b,c),!o)if(b.length>0)for(n=[],m=0;b.length>m;m++)n.push(b[m].concat(c));else n=[[c]];for(m=0;n.length>m;m++)a.push(n[m])},b.exports=l},{"../contexts":10,"../functions/default":19,"../functions/function-registry":21,"./debug-info":52,"./element":56,"./node":68,"./paren":70,"./rule":72,"./selector":75}],75:[function(a,b){var c=a("./node"),d=a("./element"),e=function(a,b,c,d,e,f){this.elements=a,this.extendList=b,this.condition=c,this.currentFileInfo=e||{},this.isReferenced=f,c||(this.evaldCondition=!0)};e.prototype=new c,e.prototype.type="Selector",e.prototype.accept=function(a){this.elements&&(this.elements=a.visitArray(this.elements)),this.extendList&&(this.extendList=a.visitArray(this.extendList)),this.condition&&(this.condition=a.visit(this.condition))},e.prototype.createDerived=function(a,b,c){c=null!=c?c:this.evaldCondition;var d=new e(a,b||this.extendList,null,this.index,this.currentFileInfo,this.isReferenced);return d.evaldCondition=c,d.mediaEmpty=this.mediaEmpty,d},e.prototype.createEmptySelectors=function(){var a=new d("","&",this.index,this.currentFileInfo),b=[new e([a],null,null,this.index,this.currentFileInfo)];return b[0].mediaEmpty=!0,b},e.prototype.match=function(a){var b,c,d=this.elements,e=d.length;if(a.CacheElements(),b=a._elements.length,0===b||b>e)return 0;for(c=0;b>c;c++)if(d[c].value!==a._elements[c])return 0;return b},e.prototype.CacheElements=function(){if(!this._elements){var a=this.elements.map(function(a){return a.combinator.value+(a.value.value||a.value)}).join("").match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g);a?"&"===a[0]&&a.shift():a=[],this._elements=a}},e.prototype.isJustParentSelector=function(){return!this.mediaEmpty&&1===this.elements.length&&"&"===this.elements[0].value&&(" "===this.elements[0].combinator.value||""===this.elements[0].combinator.value)},e.prototype.eval=function(a){var b=this.condition&&this.condition.eval(a),c=this.elements,d=this.extendList;return c=c&&c.map(function(b){return b.eval(a)}),d=d&&d.map(function(b){return b.eval(a)}),this.createDerived(c,d,b)},e.prototype.genCSS=function(a,b){var c,d;if(a&&a.firstSelector||""!==this.elements[0].combinator.value||b.add(" ",this.currentFileInfo,this.index),!this._css)for(c=0;this.elements.length>c;c++)d=this.elements[c],d.genCSS(a,b)},e.prototype.markReferenced=function(){this.isReferenced=!0},e.prototype.getIsReferenced=function(){return!this.currentFileInfo.reference||this.isReferenced},e.prototype.getIsOutput=function(){return this.evaldCondition},b.exports=e},{"./element":56,"./node":68}],76:[function(a,b){var c=a("./node"),d=function(a){this.value=a};d.prototype=new c,d.prototype.type="UnicodeDescriptor",b.exports=d},{"./node":68}],77:[function(a,b){var c=a("./node"),d=a("../data/unit-conversions"),e=function(a,b,c){this.numerator=a?a.slice(0).sort():[],this.denominator=b?b.slice(0).sort():[],c?this.backupUnit=c:a&&a.length&&(this.backupUnit=a[0])};e.prototype=new c,e.prototype.type="Unit",e.prototype.clone=function(){return new e(this.numerator.slice(0),this.denominator.slice(0),this.backupUnit)},e.prototype.genCSS=function(a,b){var c=a&&a.strictUnits;1===this.numerator.length?b.add(this.numerator[0]):!c&&this.backupUnit?b.add(this.backupUnit):!c&&this.denominator.length&&b.add(this.denominator[0])},e.prototype.toString=function(){var a,b=this.numerator.join("*");for(a=0;this.denominator.length>a;a++)b+="/"+this.denominator[a];return b},e.prototype.compare=function(a){return this.is(a.toString())?0:void 0},e.prototype.is=function(a){return this.toString().toUpperCase()===a.toUpperCase()},e.prototype.isLength=function(){return Boolean(this.toCSS().match(/px|em|%|in|cm|mm|pc|pt|ex/))},e.prototype.isEmpty=function(){return 0===this.numerator.length&&0===this.denominator.length},e.prototype.isSingular=function(){return 1>=this.numerator.length&&0===this.denominator.length},e.prototype.map=function(a){var b;for(b=0;this.numerator.length>b;b++)this.numerator[b]=a(this.numerator[b],!1);for(b=0;this.denominator.length>b;b++)this.denominator[b]=a(this.denominator[b],!0)},e.prototype.usedUnits=function(){var a,b,c={};b=function(b){return a.hasOwnProperty(b)&&!c[e]&&(c[e]=b),b};for(var e in d)d.hasOwnProperty(e)&&(a=d[e],this.map(b));return c},e.prototype.cancel=function(){var a,b,c={};for(b=0;this.numerator.length>b;b++)a=this.numerator[b],c[a]=(c[a]||0)+1;for(b=0;this.denominator.length>b;b++)a=this.denominator[b],c[a]=(c[a]||0)-1;this.numerator=[],this.denominator=[];for(a in c)if(c.hasOwnProperty(a)){var d=c[a];if(d>0)for(b=0;d>b;b++)this.numerator.push(a);else if(0>d)for(b=0;-d>b;b++)this.denominator.push(a)}this.numerator.sort(),this.denominator.sort()},b.exports=e},{"../data/unit-conversions":13,"./node":68}],78:[function(a,b){var c=a("./node"),d=function(a,b,c,d){this.value=a,this.currentFileInfo=c,this.index=b,this.isEvald=d};d.prototype=new c,d.prototype.type="Url",d.prototype.accept=function(a){this.value=a.visit(this.value)},d.prototype.genCSS=function(a,b){b.add("url("),this.value.genCSS(a,b),b.add(")")},d.prototype.eval=function(a){var b,c=this.value.eval(a);if(!this.isEvald&&(b=this.currentFileInfo&&this.currentFileInfo.rootpath,b&&"string"==typeof c.value&&a.isPathRelative(c.value)&&(c.quote||(b=b.replace(/[\\(\\)\'"\\s]/g,function(a){return"\\\\"+a})),c.value=b+c.value),c.value=a.normalizePath(c.value),a.urlArgs&&!c.value.match(/^\\s*data:/))){var e=-1===c.value.indexOf("?")?"?":"&",f=e+a.urlArgs;-1!==c.value.indexOf("#")?c.value=c.value.replace("#",f+"#"):c.value+=f}return new d(c,this.index,this.currentFileInfo,!0)},b.exports=d},{"./node":68}],79:[function(a,b){var c=a("./node"),d=function(a){if(this.value=a,!a)throw new Error("Value requires an array argument")};d.prototype=new c,d.prototype.type="Value",d.prototype.accept=function(a){this.value&&(this.value=a.visitArray(this.value))},d.prototype.eval=function(a){return 1===this.value.length?this.value[0].eval(a):new d(this.value.map(function(b){return b.eval(a)}))},d.prototype.genCSS=function(a,b){var c;for(c=0;this.value.length>c;c++)this.value[c].genCSS(a,b),this.value.length>c+1&&b.add(a&&a.compress?",":", ")},b.exports=d},{"./node":68}],80:[function(a,b){var c=a("./node"),d=function(a,b,c){this.name=a,this.index=b,this.currentFileInfo=c||{}};d.prototype=new c,d.prototype.type="Variable",d.prototype.eval=function(a){var b,c=this.name;if(0===c.indexOf("@@")&&(c="@"+new d(c.slice(1),this.index,this.currentFileInfo).eval(a).value),this.evaluating)throw{type:"Name",message:"Recursive variable definition for "+c,filename:this.currentFileInfo.filename,index:this.index};if(this.evaluating=!0,b=this.find(a.frames,function(b){var d=b.variable(c);if(d){if(d.important){var e=a.importantScope[a.importantScope.length-1];e.important=d.important}return d.value.eval(a)}}))return this.evaluating=!1,b;throw{type:"Name",message:"variable "+c+" is undefined",filename:this.currentFileInfo.filename,index:this.index}},d.prototype.find=function(a,b){for(var c,d=0;a.length>d;d++)if(c=b.call(a,a[d]))return c;return null},b.exports=d},{"./node":68}],81:[function(a,b){b.exports={getLocation:function(a,b){for(var c=a+1,d=null,e=-1;--c>=0&&"\\n"!==b.charAt(c);)e++;return"number"==typeof a&&(d=(b.slice(0,a).match(/\\n/g)||"").length),{line:d,column:e}}}},{}],82:[function(a,b){var c=a("../tree"),d=a("./visitor"),e=a("../logger"),f=function(){this._visitor=new d(this),this.contexts=[],this.allExtendsStack=[[]]};f.prototype={run:function(a){return a=this._visitor.visit(a),a.allExtends=this.allExtendsStack[0],a},visitRule:function(a,b){b.visitDeeper=!1},visitMixinDefinition:function(a,b){b.visitDeeper=!1},visitRuleset:function(a){if(!a.root){var b,d,e,f,g=[],h=a.rules,i=h?h.length:0;for(b=0;i>b;b++)a.rules[b]instanceof c.Extend&&(g.push(h[b]),a.extendOnEveryPath=!0);var j=a.paths;for(b=0;j.length>b;b++){var k=j[b],l=k[k.length-1],m=l.extendList;for(f=m?m.slice(0).concat(g):g,f&&(f=f.map(function(a){return a.clone()})),d=0;f.length>d;d++)this.foundExtends=!0,e=f[d],e.findSelfSelectors(k),e.ruleset=a,0===d&&(e.firstExtendOnThisSelectorPath=!0),this.allExtendsStack[this.allExtendsStack.length-1].push(e)}this.contexts.push(a.selectors)}},visitRulesetOut:function(a){a.root||(this.contexts.length=this.contexts.length-1)},visitMedia:function(a){a.allExtends=[],this.allExtendsStack.push(a.allExtends)},visitMediaOut:function(){this.allExtendsStack.length=this.allExtendsStack.length-1},visitDirective:function(a){a.allExtends=[],this.allExtendsStack.push(a.allExtends)},visitDirectiveOut:function(){this.allExtendsStack.length=this.allExtendsStack.length-1}};var g=function(){this._visitor=new d(this)};g.prototype={run:function(a){var b=new f;if(this.extendIndicies={},b.run(a),!b.foundExtends)return a;a.allExtends=a.allExtends.concat(this.doExtendChaining(a.allExtends,a.allExtends)),this.allExtendsStack=[a.allExtends];var c=this._visitor.visit(a);return this.checkExtendsForNonMatched(a.allExtends),c},checkExtendsForNonMatched:function(a){var b=this.extendIndicies;a.filter(function(a){return!a.hasFoundMatches&&1==a.parent_ids.length}).forEach(function(a){var c="_unknown_";try{c=a.selector.toCSS({})}catch(d){}b[a.index+" "+c]||(b[a.index+" "+c]=!0,e.warn("extend \'"+c+"\' has no matches"))})},doExtendChaining:function(a,b,d){var e,f,g,h,i,j,k,l,m=[],n=this;for(d=d||0,e=0;a.length>e;e++)for(f=0;b.length>f;f++)j=a[e],k=b[f],j.parent_ids.indexOf(k.object_id)>=0||(i=[k.selfSelectors[0]],g=n.findMatch(j,i),g.length&&(j.hasFoundMatches=!0,j.selfSelectors.forEach(function(a){h=n.extendSelector(g,i,a),l=new c.Extend(k.selector,k.option,0),l.selfSelectors=h,h[h.length-1].extendList=[l],m.push(l),l.ruleset=k.ruleset,l.parent_ids=l.parent_ids.concat(k.parent_ids,j.parent_ids),k.firstExtendOnThisSelectorPath&&(l.firstExtendOnThisSelectorPath=!0,k.ruleset.paths.push(h))})));if(m.length){if(this.extendChainCount++,d>100){var o="{unable to calculate}",p="{unable to calculate}";try{o=m[0].selfSelectors[0].toCSS(),p=m[0].selector.toCSS()}catch(q){}throw{message:"extend circular reference detected. One of the circular extends is currently:"+o+":extend("+p+")"}}return m.concat(n.doExtendChaining(m,b,d+1))}return m},visitRule:function(a,b){b.visitDeeper=!1},visitMixinDefinition:function(a,b){b.visitDeeper=!1},visitSelector:function(a,b){b.visitDeeper=!1},visitRuleset:function(a){if(!a.root){var b,c,d,e,f=this.allExtendsStack[this.allExtendsStack.length-1],g=[],h=this;for(d=0;f.length>d;d++)for(c=0;a.paths.length>c;c++)if(e=a.paths[c],!a.extendOnEveryPath){var i=e[e.length-1].extendList;i&&i.length||(b=this.findMatch(f[d],e),b.length&&(f[d].hasFoundMatches=!0,f[d].selfSelectors.forEach(function(a){g.push(h.extendSelector(b,e,a))})))}a.paths=a.paths.concat(g)}},findMatch:function(a,b){var c,d,e,f,g,h,i,j=this,k=a.selector.elements,l=[],m=[];for(c=0;b.length>c;c++)for(d=b[c],e=0;d.elements.length>e;e++)for(f=d.elements[e],(a.allowBefore||0===c&&0===e)&&l.push({pathIndex:c,index:e,matched:0,initialCombinator:f.combinator}),h=0;l.length>h;h++)i=l[h],g=f.combinator.value,""===g&&0===e&&(g=" "),!j.isElementValuesEqual(k[i.matched].value,f.value)||i.matched>0&&k[i.matched].combinator.value!==g?i=null:i.matched++,i&&(i.finished=i.matched===k.length,i.finished&&!a.allowAfter&&(d.elements.length>e+1||b.length>c+1)&&(i=null)),i?i.finished&&(i.length=k.length,i.endPathIndex=c,i.endPathElementIndex=e+1,l.length=0,m.push(i)):(l.splice(h,1),h--);return m},isElementValuesEqual:function(a,b){if("string"==typeof a||"string"==typeof b)return a===b;if(a instanceof c.Attribute)return a.op!==b.op||a.key!==b.key?!1:a.value&&b.value?(a=a.value.value||a.value,b=b.value.value||b.value,a===b):a.value||b.value?!1:!0;if(a=a.value,b=b.value,a instanceof c.Selector){if(!(b instanceof c.Selector)||a.elements.length!==b.elements.length)return!1;for(var d=0;a.elements.length>d;d++){if(a.elements[d].combinator.value!==b.elements[d].combinator.value&&(0!==d||(a.elements[d].combinator.value||" ")!==(b.elements[d].combinator.value||" ")))return!1;if(!this.isElementValuesEqual(a.elements[d].value,b.elements[d].value))return!1}return!0}return!1},extendSelector:function(a,b,d){var e,f,g,h,i,j=0,k=0,l=[];for(e=0;a.length>e;e++)h=a[e],f=b[h.pathIndex],g=new c.Element(h.initialCombinator,d.elements[0].value,d.elements[0].index,d.elements[0].currentFileInfo),h.pathIndex>j&&k>0&&(l[l.length-1].elements=l[l.length-1].elements.concat(b[j].elements.slice(k)),k=0,j++),i=f.elements.slice(k,h.index).concat([g]).concat(d.elements.slice(1)),j===h.pathIndex&&e>0?l[l.length-1].elements=l[l.length-1].elements.concat(i):(l=l.concat(b.slice(j,h.pathIndex)),l.push(new c.Selector(i))),j=h.endPathIndex,k=h.endPathElementIndex,k>=b[j].elements.length&&(k=0,j++);return b.length>j&&k>0&&(l[l.length-1].elements=l[l.length-1].elements.concat(b[j].elements.slice(k)),j++),l=l.concat(b.slice(j,b.length))},visitRulesetOut:function(){},visitMedia:function(a){var b=a.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length-1]);b=b.concat(this.doExtendChaining(b,a.allExtends)),this.allExtendsStack.push(b)},visitMediaOut:function(){var a=this.allExtendsStack.length-1;this.allExtendsStack.length=a},visitDirective:function(a){var b=a.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length-1]);b=b.concat(this.doExtendChaining(b,a.allExtends)),this.allExtendsStack.push(b)},visitDirectiveOut:function(){var a=this.allExtendsStack.length-1;this.allExtendsStack.length=a}},b.exports=g},{"../logger":31,"../tree":60,"./visitor":88}],83:[function(a,b){function c(a){this.imports=[],this.variableImports=[],this._onSequencerEmpty=a,this._currentDepth=0}c.prototype.addImport=function(a){var b=this,c={callback:a,args:null,isReady:!1};return this.imports.push(c),function(){c.args=Array.prototype.slice.call(arguments,0),c.isReady=!0,b.tryRun()}},c.prototype.addVariableImport=function(a){this.variableImports.push(a)},c.prototype.tryRun=function(){this._currentDepth++;try{for(;;){for(;this.imports.length>0;){var a=this.imports[0];if(!a.isReady)return;this.imports=this.imports.slice(1),a.callback.apply(null,a.args)}if(0===this.variableImports.length)break;var b=this.variableImports[0];this.variableImports=this.variableImports.slice(1),b()}}finally{this._currentDepth--}0===this._currentDepth&&this._onSequencerEmpty&&this._onSequencerEmpty()},b.exports=c},{}],84:[function(a,b){var c=a("../contexts"),d=a("./visitor"),e=a("./import-sequencer"),f=function(a,b){this._visitor=new d(this),this._importer=a,this._finish=b,this.context=new c.Eval,this.importCount=0,this.onceFileDetectionMap={},this.recursionDetector={},this._sequencer=new e(this._onSequencerEmpty.bind(this))};f.prototype={isReplacing:!1,run:function(a){try{this._visitor.visit(a)}catch(b){this.error=b}this.isFinished=!0,this._sequencer.tryRun()},_onSequencerEmpty:function(){this.isFinished&&this._finish(this.error)},visitImport:function(a,b){var d=a.options.inline;if(!a.css||d){var e=new c.Eval(this.context,this.context.frames.slice(0)),f=e.frames[0];this.importCount++,a.isVariableImport()?this._sequencer.addVariableImport(this.processImportNode.bind(this,a,e,f)):this.processImportNode(a,e,f)}b.visitDeeper=!1},processImportNode:function(a,b,c){var d,e=a.options.inline;try{d=a.evalForImport(b)}catch(f){f.filename||(f.index=a.index,f.filename=a.currentFileInfo.filename),a.css=!0,a.error=f}if(!d||d.css&&!e)this.importCount--,this.isFinished&&this._sequencer.tryRun();else{d.options.multiple&&(b.importMultiple=!0);for(var g=void 0===d.css,h=0;c.rules.length>h;h++)if(c.rules[h]===a){c.rules[h]=d;break}var i=this.onImported.bind(this,d,b),j=this._sequencer.addImport(i);this._importer.push(d.getPath(),g,d.currentFileInfo,d.options,j)}},onImported:function(a,b,c,d,e,f){c&&(c.filename||(c.index=a.index,c.filename=a.currentFileInfo.filename),this.error=c);var g=this,h=a.options.inline,i=a.options.plugin,j=e||f in g.recursionDetector;if(b.importMultiple||(a.skip=j?!0:function(){return f in g.onceFileDetectionMap?!0:(g.onceFileDetectionMap[f]=!0,!1)}),d&&(a.root=d,a.importedFilename=f,!(h||i||!b.importMultiple&&j))){g.recursionDetector[f]=!0;var k=this.context;this.context=b;try{this._visitor.visit(d)}catch(c){this.error=c}this.context=k}g.importCount--,g.isFinished&&g._sequencer.tryRun()},visitRule:function(a,b){"DetachedRuleset"===a.value.type?this.context.frames.unshift(a):b.visitDeeper=!1},visitRuleOut:function(a){"DetachedRuleset"===a.value.type&&this.context.frames.shift()},visitDirective:function(a){this.context.frames.unshift(a)},visitDirectiveOut:function(){this.context.frames.shift()},visitMixinDefinition:function(a){this.context.frames.unshift(a)},visitMixinDefinitionOut:function(){this.context.frames.shift()},visitRuleset:function(a){this.context.frames.unshift(a)},visitRulesetOut:function(){this.context.frames.shift()},visitMedia:function(a){this.context.frames.unshift(a.rules[0])},visitMediaOut:function(){this.context.frames.shift()}},b.exports=f},{"../contexts":10,"./import-sequencer":83,"./visitor":88}],85:[function(a,b){var c={Visitor:a("./visitor"),ImportVisitor:a("./import-visitor"),ExtendVisitor:a("./extend-visitor"),JoinSelectorVisitor:a("./join-selector-visitor"),ToCSSVisitor:a("./to-css-visitor")};b.exports=c},{"./extend-visitor":82,"./import-visitor":84,"./join-selector-visitor":86,"./to-css-visitor":87,"./visitor":88}],86:[function(a,b){var c=a("./visitor"),d=function(){this.contexts=[[]],this._visitor=new c(this)};d.prototype={run:function(a){return this._visitor.visit(a)},visitRule:function(a,b){b.visitDeeper=!1},visitMixinDefinition:function(a,b){b.visitDeeper=!1},visitRuleset:function(a){var b,c=this.contexts[this.contexts.length-1],d=[];this.contexts.push(d),a.root||(b=a.selectors,b&&(b=b.filter(function(a){return a.getIsOutput()}),a.selectors=b.length?b:b=null,b&&a.joinSelectors(d,c,b)),b||(a.rules=null),a.paths=d)},visitRulesetOut:function(){this.contexts.length=this.contexts.length-1},visitMedia:function(a){var b=this.contexts[this.contexts.length-1];a.rules[0].root=0===b.length||b[0].multiMedia},visitDirective:function(a){var b=this.contexts[this.contexts.length-1];a.rules&&a.rules.length&&(a.rules[0].root=a.isRooted||0===b.length||null)}},b.exports=d},{"./visitor":88}],87:[function(a,b){var c=a("../tree"),d=a("./visitor"),e=function(a){this._visitor=new d(this),this._context=a};e.prototype={isReplacing:!0,run:function(a){return this._visitor.visit(a)},visitRule:function(a){return a.variable?void 0:a},visitMixinDefinition:function(a){\na.frames=[]},visitExtend:function(){},visitComment:function(a){return a.isSilent(this._context)?void 0:a},visitMedia:function(a,b){return a.accept(this._visitor),b.visitDeeper=!1,a.rules.length?a:void 0},visitImport:function(a){return void 0!==a.path.currentFileInfo.reference&&a.css?void 0:a},visitDirective:function(a,b){function d(a){var b,c=a.rules;1!==c.length||c[0].paths&&0!==c[0].paths.length||(c=c[0].rules);for(var d=0;c.length>d;d++)if(b=c[d],b.getIsReferenced&&b.getIsReferenced())return!0;return!1}if("@charset"===a.name){if(!a.getIsReferenced())return;if(this.charset){if(a.debugInfo){var e=new c.Comment("/* "+a.toCSS(this._context).replace(/\\n/g,"")+" */\\n");return e.debugInfo=a.debugInfo,this._visitor.visit(e)}return}this.charset=!0}if(a.rules&&a.rules.length){if(this._mergeRules(a.rules[0].rules),a.accept(this._visitor),b.visitDeeper=!1,a.getIsReferenced())return a;if(!a.rules||!a.rules.length)return;if(d(a))return a.markReferenced(),a}else if(a.getIsReferenced())return a},checkPropertiesInRoot:function(a){for(var b,d=0;a.length>d;d++)if(b=a[d],b instanceof c.Rule&&!b.variable)throw{message:"properties must be inside selector blocks, they cannot be in the root.",index:b.index,filename:b.currentFileInfo?b.currentFileInfo.filename:null}},visitRuleset:function(a,b){var d,e=[];if(a.firstRoot&&this.checkPropertiesInRoot(a.rules),a.root)a.accept(this._visitor),b.visitDeeper=!1,(a.firstRoot||a.rules&&a.rules.length>0)&&e.splice(0,0,a);else{a.paths&&(a.paths=a.paths.filter(function(a){var b;for(" "===a[0].elements[0].combinator.value&&(a[0].elements[0].combinator=new c.Combinator("")),b=0;a.length>b;b++)if(a[b].getIsReferenced()&&a[b].getIsOutput())return!0;return!1}));for(var f=a.rules,g=f?f.length:0,h=0;g>h;)d=f[h],d&&d.rules?(e.push(this._visitor.visit(d)),f.splice(h,1),g--):h++;g>0?a.accept(this._visitor):a.rules=null,b.visitDeeper=!1,f=a.rules,f&&(this._mergeRules(f),f=a.rules),f&&(this._removeDuplicateRules(f),f=a.rules),f&&f.length>0&&a.paths.length>0&&e.splice(0,0,a)}return 1===e.length?e[0]:e},_removeDuplicateRules:function(a){if(a){var b,d,e,f={};for(e=a.length-1;e>=0;e--)if(d=a[e],d instanceof c.Rule)if(f[d.name]){b=f[d.name],b instanceof c.Rule&&(b=f[d.name]=[f[d.name].toCSS(this._context)]);var g=d.toCSS(this._context);-1!==b.indexOf(g)?a.splice(e,1):b.push(g)}else f[d.name]=d}},_mergeRules:function(a){if(a){for(var b,d,e,f={},g=0;a.length>g;g++)d=a[g],d instanceof c.Rule&&d.merge&&(e=[d.name,d.important?"!":""].join(","),f[e]?a.splice(g--,1):f[e]=[],f[e].push(d));Object.keys(f).map(function(a){function e(a){return new c.Expression(a.map(function(a){return a.value}))}function g(a){return new c.Value(a.map(function(a){return a}))}if(b=f[a],b.length>1){d=b[0];var h=[],i=[];b.map(function(a){"+"===a.merge&&(i.length>0&&h.push(e(i)),i=[]),i.push(a)}),h.push(e(i)),d.value=g(h)}})}}},b.exports=e},{"../tree":60,"./visitor":88}],88:[function(a,b){function c(a){return a}function d(a,b){var c,e;for(c in a)if(a.hasOwnProperty(c))switch(e=a[c],typeof e){case"function":e.prototype&&e.prototype.type&&(e.prototype.typeIndex=b++);break;case"object":b=d(e,b)}return b}var e=a("../tree"),f={visitDeeper:!0},g=!1,h=function(a){this._implementation=a,this._visitFnCache=[],g||(d(e,1),g=!0)};h.prototype={visit:function(a){if(!a)return a;var b=a.typeIndex;if(!b)return a;var d,e=this._visitFnCache,g=this._implementation,h=b<<1,i=1|h,j=e[h],k=e[i],l=f;if(l.visitDeeper=!0,j||(d="visit"+a.type,j=g[d]||c,k=g[d+"Out"]||c,e[h]=j,e[i]=k),j!==c){var m=j.call(g,a,l);g.isReplacing&&(a=m)}return l.visitDeeper&&a&&a.accept&&a.accept(this),k!=c&&k.call(g,a),a},visitArray:function(a,b){if(!a)return a;var c,d=a.length;if(b||!this._implementation.isReplacing){for(c=0;d>c;c++)this.visit(a[c]);return a}var e=[];for(c=0;d>c;c++){var f=this.visit(a[c]);void 0!==f&&(f.splice?f.length&&this.flatten(f,e):e.push(f))}return e},flatten:function(a,b){b||(b=[]);var c,d,e,f,g,h;for(d=0,c=a.length;c>d;d++)if(e=a[d],void 0!==e)if(e.splice)for(g=0,f=e.length;f>g;g++)h=e[g],void 0!==h&&(h.splice?h.length&&this.flatten(h,b):b.push(h));else b.push(e);return b}},b.exports=h},{"../tree":60}],89:[function(a,b){function c(){if(!g){g=!0;for(var a,b=f.length;b;){a=f,f=[];for(var c=-1;++c<b;)a[c]();b=f.length}g=!1}}function d(){}var e=b.exports={},f=[],g=!1;e.nextTick=function(a){f.push(a),g||setTimeout(c,0)},e.title="browser",e.browser=!0,e.env={},e.argv=[],e.version="",e.versions={},e.on=d,e.addListener=d,e.once=d,e.off=d,e.removeListener=d,e.removeAllListeners=d,e.emit=d,e.binding=function(){throw new Error("process.binding is not supported")},e.cwd=function(){return"/"},e.chdir=function(){throw new Error("process.chdir is not supported")},e.umask=function(){return 0}},{}],90:[function(a,b){"use strict";function c(a){function b(a){return null===i?void k.push(a):void f(function(){var b=i?a.onFulfilled:a.onRejected;if(null===b)return void(i?a.resolve:a.reject)(j);var c;try{c=b(j)}catch(d){return void a.reject(d)}a.resolve(c)})}function c(a){try{if(a===l)throw new TypeError("A promise cannot be resolved with itself.");if(a&&("object"==typeof a||"function"==typeof a)){var b=a.then;if("function"==typeof b)return void e(b.bind(a),c,g)}i=!0,j=a,h()}catch(d){g(d)}}function g(a){i=!1,j=a,h()}function h(){for(var a=0,c=k.length;c>a;a++)b(k[a]);k=null}if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof a)throw new TypeError("not a function");var i=null,j=null,k=[],l=this;this.then=function(a,c){return new l.constructor(function(e,f){b(new d(a,c,e,f))})},e(a,c,g)}function d(a,b,c,d){this.onFulfilled="function"==typeof a?a:null,this.onRejected="function"==typeof b?b:null,this.resolve=c,this.reject=d}function e(a,b,c){var d=!1;try{a(function(a){d||(d=!0,b(a))},function(a){d||(d=!0,c(a))})}catch(e){if(d)return;d=!0,c(e)}}var f=a("asap");b.exports=c},{asap:92}],91:[function(a,b){"use strict";function c(a){this.then=function(b){return"function"!=typeof b?this:new d(function(c,d){e(function(){try{c(b(a))}catch(e){d(e)}})})}}var d=a("./core.js"),e=a("asap");b.exports=d,c.prototype=d.prototype;var f=new c(!0),g=new c(!1),h=new c(null),i=new c(void 0),j=new c(0),k=new c("");d.resolve=function(a){if(a instanceof d)return a;if(null===a)return h;if(void 0===a)return i;if(a===!0)return f;if(a===!1)return g;if(0===a)return j;if(""===a)return k;if("object"==typeof a||"function"==typeof a)try{var b=a.then;if("function"==typeof b)return new d(b.bind(a))}catch(e){return new d(function(a,b){b(e)})}return new c(a)},d.all=function(a){var b=Array.prototype.slice.call(a);return new d(function(a,c){function d(f,g){try{if(g&&("object"==typeof g||"function"==typeof g)){var h=g.then;if("function"==typeof h)return void h.call(g,function(a){d(f,a)},c)}b[f]=g,0===--e&&a(b)}catch(i){c(i)}}if(0===b.length)return a([]);for(var e=b.length,f=0;b.length>f;f++)d(f,b[f])})},d.reject=function(a){return new d(function(b,c){c(a)})},d.race=function(a){return new d(function(b,c){a.forEach(function(a){d.resolve(a).then(b,c)})})},d.prototype["catch"]=function(a){return this.then(null,a)}},{"./core.js":90,asap:92}],92:[function(a,b){(function(a){function c(){for(;e.next;){e=e.next;var a=e.task;e.task=void 0;var b=e.domain;b&&(e.domain=void 0,b.enter());try{a()}catch(d){if(i)throw b&&b.exit(),setTimeout(c,0),b&&b.enter(),d;setTimeout(function(){throw d},0)}b&&b.exit()}g=!1}function d(b){f=f.next={task:b,domain:i&&a.domain,next:null},g||(g=!0,h())}var e={task:void 0,next:null},f=e,g=!1,h=void 0,i=!1;if("undefined"!=typeof a&&a.nextTick)i=!0,h=function(){a.nextTick(c)};else if("function"==typeof setImmediate)h="undefined"!=typeof window?setImmediate.bind(window,c):function(){setImmediate(c)};else if("undefined"!=typeof MessageChannel){var j=new MessageChannel;j.port1.onmessage=c,h=function(){j.port2.postMessage(0)}}else h=function(){setTimeout(c,0)};b.exports=d}).call(this,a("_process"))},{_process:89}],93:[function(){"function"!=typeof Promise.prototype.done&&(Promise.prototype.done=function(){var a=arguments.length?this.then.apply(this,arguments):this;a.then(null,function(a){setTimeout(function(){throw a},0)})})},{}],94:[function(a){a("asap");"undefined"==typeof Promise&&(Promise=a("./lib/core.js"),a("./lib/es6-extensions.js")),a("./polyfill-done.js")},{"./lib/core.js":90,"./lib/es6-extensions.js":91,"./polyfill-done.js":93,asap:92}]},{},[2])(2)});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/assets/less.js/less.min.js\n')},"./web/assets/spectrum/spectrum.js":
/*!*****************************************!*\
  !*** ./web/assets/spectrum/spectrum.js ***!
  \*****************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Spectrum Colorpicker v1.8.1\n// https://github.com/bgrins/spectrum\n// Author: Brian Grinstead\n// License: MIT\n\n(function (factory) {\n    "use strict";\n\n    if (true) { // AMD\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n    else {}\n})(function($, undefined) {\n    "use strict";\n\n    var defaultOpts = {\n\n        // Callbacks\n        beforeShow: noop,\n        move: noop,\n        change: noop,\n        show: noop,\n        hide: noop,\n\n        // Options\n        color: false,\n        flat: false,\n        showInput: false,\n        allowEmpty: false,\n        showButtons: true,\n        clickoutFiresChange: true,\n        showInitial: false,\n        showPalette: false,\n        showPaletteOnly: false,\n        hideAfterPaletteSelect: false,\n        togglePaletteOnly: false,\n        showSelectionPalette: true,\n        localStorageKey: false,\n        appendTo: "body",\n        maxSelectionSize: 7,\n        cancelText: "cancel",\n        chooseText: "choose",\n        togglePaletteMoreText: "more",\n        togglePaletteLessText: "less",\n        clearText: "Clear Color Selection",\n        noColorSelectedText: "No Color Selected",\n        preferredFormat: false,\n        className: "", // Deprecated - use containerClassName and replacerClassName instead.\n        containerClassName: "",\n        replacerClassName: "",\n        showAlpha: false,\n        theme: "sp-light",\n        palette: [["#ffffff", "#000000", "#ff0000", "#ff8000", "#ffff00", "#008000", "#0000ff", "#4b0082", "#9400d3"]],\n        selectionPalette: [],\n        disabled: false,\n        offset: null\n    },\n    spectrums = [],\n    IE = !!/msie/i.exec( window.navigator.userAgent ),\n    rgbaSupport = (function() {\n        function contains( str, substr ) {\n            return !!~(\'\' + str).indexOf(substr);\n        }\n\n        var elem = document.createElement(\'div\');\n        var style = elem.style;\n        style.cssText = \'background-color:rgba(0,0,0,.5)\';\n        return contains(style.backgroundColor, \'rgba\') || contains(style.backgroundColor, \'hsla\');\n    })(),\n    replaceInput = [\n        "<div class=\'sp-replacer\'>",\n            "<div class=\'sp-preview\'><div class=\'sp-preview-inner\'></div></div>",\n            "<div class=\'sp-dd\'>&#9660;</div>",\n        "</div>"\n    ].join(\'\'),\n    markup = (function () {\n\n        // IE does not support gradients with multiple stops, so we need to simulate\n        //  that for the rainbow slider with 8 divs that each have a single gradient\n        var gradientFix = "";\n        if (IE) {\n            for (var i = 1; i <= 6; i++) {\n                gradientFix += "<div class=\'sp-" + i + "\'></div>";\n            }\n        }\n\n        return [\n            "<div class=\'sp-container sp-hidden\'>",\n                "<div class=\'sp-palette-container\'>",\n                    "<div class=\'sp-palette sp-thumb sp-cf\'></div>",\n                    "<div class=\'sp-palette-button-container sp-cf\'>",\n                        "<button type=\'button\' class=\'sp-palette-toggle\'></button>",\n                    "</div>",\n                "</div>",\n                "<div class=\'sp-picker-container\'>",\n                    "<div class=\'sp-top sp-cf\'>",\n                        "<div class=\'sp-fill\'></div>",\n                        "<div class=\'sp-top-inner\'>",\n                            "<div class=\'sp-color\'>",\n                                "<div class=\'sp-sat\'>",\n                                    "<div class=\'sp-val\'>",\n                                        "<div class=\'sp-dragger\'></div>",\n                                    "</div>",\n                                "</div>",\n                            "</div>",\n                            "<div class=\'sp-clear sp-clear-display\'>",\n                            "</div>",\n                            "<div class=\'sp-hue\'>",\n                                "<div class=\'sp-slider\'></div>",\n                                gradientFix,\n                            "</div>",\n                        "</div>",\n                        "<div class=\'sp-alpha\'><div class=\'sp-alpha-inner\'><div class=\'sp-alpha-handle\'></div></div></div>",\n                    "</div>",\n                    "<div class=\'sp-input-container sp-cf\'>",\n                        "<input class=\'sp-input\' type=\'text\' spellcheck=\'false\'  />",\n                    "</div>",\n                    "<div class=\'sp-initial sp-thumb sp-cf\'></div>",\n                    "<div class=\'sp-button-container sp-cf\'>",\n                        "<a class=\'sp-cancel\' href=\'#\'></a>",\n                        "<button type=\'button\' class=\'sp-choose\'></button>",\n                    "</div>",\n                "</div>",\n            "</div>"\n        ].join("");\n    })();\n\n    function paletteTemplate (p, color, className, opts) {\n        var html = [];\n        for (var i = 0; i < p.length; i++) {\n            var current = p[i];\n            if(current) {\n                var tiny = tinycolor(current);\n                var c = tiny.toHsl().l < 0.5 ? "sp-thumb-el sp-thumb-dark" : "sp-thumb-el sp-thumb-light";\n                c += (tinycolor.equals(color, current)) ? " sp-thumb-active" : "";\n                var formattedString = tiny.toString(opts.preferredFormat || "rgb");\n                var swatchStyle = rgbaSupport ? ("background-color:" + tiny.toRgbString()) : "filter:" + tiny.toFilter();\n                html.push(\'<span title="\' + formattedString + \'" data-color="\' + tiny.toRgbString() + \'" class="\' + c + \'"><span class="sp-thumb-inner" style="\' + swatchStyle + \';"></span></span>\');\n            } else {\n                var cls = \'sp-clear-display\';\n                html.push($(\'<div />\')\n                    .append($(\'<span data-color="" style="background-color:transparent;" class="\' + cls + \'"></span>\')\n                        .attr(\'title\', opts.noColorSelectedText)\n                    )\n                    .html()\n                );\n            }\n        }\n        return "<div class=\'sp-cf " + className + "\'>" + html.join(\'\') + "</div>";\n    }\n\n    function hideAll() {\n        for (var i = 0; i < spectrums.length; i++) {\n            if (spectrums[i]) {\n                spectrums[i].hide();\n            }\n        }\n    }\n\n    function instanceOptions(o, callbackContext) {\n        var opts = $.extend({}, defaultOpts, o);\n        opts.callbacks = {\n            \'move\': bind(opts.move, callbackContext),\n            \'change\': bind(opts.change, callbackContext),\n            \'show\': bind(opts.show, callbackContext),\n            \'hide\': bind(opts.hide, callbackContext),\n            \'beforeShow\': bind(opts.beforeShow, callbackContext)\n        };\n\n        return opts;\n    }\n\n    function spectrum(element, o) {\n\n        var opts = instanceOptions(o, element),\n            flat = opts.flat,\n            showSelectionPalette = opts.showSelectionPalette,\n            localStorageKey = opts.localStorageKey,\n            theme = opts.theme,\n            callbacks = opts.callbacks,\n            resize = throttle(reflow, 10),\n            visible = false,\n            isDragging = false,\n            dragWidth = 0,\n            dragHeight = 0,\n            dragHelperHeight = 0,\n            slideHeight = 0,\n            slideWidth = 0,\n            alphaWidth = 0,\n            alphaSlideHelperWidth = 0,\n            slideHelperHeight = 0,\n            currentHue = 0,\n            currentSaturation = 0,\n            currentValue = 0,\n            currentAlpha = 1,\n            palette = [],\n            paletteArray = [],\n            paletteLookup = {},\n            selectionPalette = opts.selectionPalette.slice(0),\n            maxSelectionSize = opts.maxSelectionSize,\n            draggingClass = "sp-dragging",\n            shiftMovementDirection = null;\n\n        var doc = element.ownerDocument,\n            body = doc.body,\n            boundElement = $(element),\n            disabled = false,\n            container = $(markup, doc).addClass(theme),\n            pickerContainer = container.find(".sp-picker-container"),\n            dragger = container.find(".sp-color"),\n            dragHelper = container.find(".sp-dragger"),\n            slider = container.find(".sp-hue"),\n            slideHelper = container.find(".sp-slider"),\n            alphaSliderInner = container.find(".sp-alpha-inner"),\n            alphaSlider = container.find(".sp-alpha"),\n            alphaSlideHelper = container.find(".sp-alpha-handle"),\n            textInput = container.find(".sp-input"),\n            paletteContainer = container.find(".sp-palette"),\n            initialColorContainer = container.find(".sp-initial"),\n            cancelButton = container.find(".sp-cancel"),\n            clearButton = container.find(".sp-clear"),\n            chooseButton = container.find(".sp-choose"),\n            toggleButton = container.find(".sp-palette-toggle"),\n            isInput = boundElement.is("input"),\n            isInputTypeColor = isInput && boundElement.attr("type") === "color" && inputTypeColorSupport(),\n            shouldReplace = isInput && !flat,\n            replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className).addClass(opts.replacerClassName) : $([]),\n            offsetElement = (shouldReplace) ? replacer : boundElement,\n            previewElement = replacer.find(".sp-preview-inner"),\n            initialColor = opts.color || (isInput && boundElement.val()),\n            colorOnShow = false,\n            currentPreferredFormat = opts.preferredFormat,\n            clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,\n            isEmpty = !initialColor,\n            allowEmpty = opts.allowEmpty && !isInputTypeColor;\n\n        function applyOptions() {\n\n            if (opts.showPaletteOnly) {\n                opts.showPalette = true;\n            }\n\n            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\n\n            if (opts.palette) {\n                palette = opts.palette.slice(0);\n                paletteArray = $.isArray(palette[0]) ? palette : [palette];\n                paletteLookup = {};\n                for (var i = 0; i < paletteArray.length; i++) {\n                    for (var j = 0; j < paletteArray[i].length; j++) {\n                        var rgb = tinycolor(paletteArray[i][j]).toRgbString();\n                        paletteLookup[rgb] = true;\n                    }\n                }\n            }\n\n            container.toggleClass("sp-flat", flat);\n            container.toggleClass("sp-input-disabled", !opts.showInput);\n            container.toggleClass("sp-alpha-enabled", opts.showAlpha);\n            container.toggleClass("sp-clear-enabled", allowEmpty);\n            container.toggleClass("sp-buttons-disabled", !opts.showButtons);\n            container.toggleClass("sp-palette-buttons-disabled", !opts.togglePaletteOnly);\n            container.toggleClass("sp-palette-disabled", !opts.showPalette);\n            container.toggleClass("sp-palette-only", opts.showPaletteOnly);\n            container.toggleClass("sp-initial-disabled", !opts.showInitial);\n            container.addClass(opts.className).addClass(opts.containerClassName);\n\n            reflow();\n        }\n\n        function initialize() {\n\n            if (IE) {\n                container.find("*:not(input)").attr("unselectable", "on");\n            }\n\n            applyOptions();\n\n            if (shouldReplace) {\n                boundElement.after(replacer).hide();\n            }\n\n            if (!allowEmpty) {\n                clearButton.hide();\n            }\n\n            if (flat) {\n                boundElement.after(container).hide();\n            }\n            else {\n\n                var appendTo = opts.appendTo === "parent" ? boundElement.parent() : $(opts.appendTo);\n                if (appendTo.length !== 1) {\n                    appendTo = $("body");\n                }\n\n                appendTo.append(container);\n            }\n\n            updateSelectionPaletteFromStorage();\n\n            offsetElement.on("click.spectrum touchstart.spectrum", function (e) {\n                if (!disabled) {\n                    toggle();\n                }\n\n                e.stopPropagation();\n\n                if (!$(e.target).is("input")) {\n                    e.preventDefault();\n                }\n            });\n\n            if(boundElement.is(":disabled") || (opts.disabled === true)) {\n                disable();\n            }\n\n            // Prevent clicks from bubbling up to document.  This would cause it to be hidden.\n            container.click(stopPropagation);\n\n            // Handle user typed input\n            textInput.change(setFromTextInput);\n            textInput.on("paste", function () {\n                setTimeout(setFromTextInput, 1);\n            });\n            textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\n\n            cancelButton.text(opts.cancelText);\n            cancelButton.on("click.spectrum", function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                revert();\n                hide();\n            });\n\n            clearButton.attr("title", opts.clearText);\n            clearButton.on("click.spectrum", function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                isEmpty = true;\n                move();\n\n                if(flat) {\n                    //for the flat style, this is a change event\n                    updateOriginalInput(true);\n                }\n            });\n\n            chooseButton.text(opts.chooseText);\n            chooseButton.on("click.spectrum", function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n\n                if (IE && textInput.is(":focus")) {\n                    textInput.trigger(\'change\');\n                }\n\n                if (isValid()) {\n                    updateOriginalInput(true);\n                    hide();\n                }\n            });\n\n            toggleButton.text(opts.showPaletteOnly ? opts.togglePaletteMoreText : opts.togglePaletteLessText);\n            toggleButton.on("click.spectrum", function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n\n                opts.showPaletteOnly = !opts.showPaletteOnly;\n\n                // To make sure the Picker area is drawn on the right, next to the\n                // Palette area (and not below the palette), first move the Palette\n                // to the left to make space for the picker, plus 5px extra.\n                // The \'applyOptions\' function puts the whole container back into place\n                // and takes care of the button-text and the sp-palette-only CSS class.\n                if (!opts.showPaletteOnly && !flat) {\n                    container.css(\'left\', \'-=\' + (pickerContainer.outerWidth(true) + 5));\n                }\n                applyOptions();\n            });\n\n            draggable(alphaSlider, function (dragX, dragY, e) {\n                currentAlpha = (dragX / alphaWidth);\n                isEmpty = false;\n                if (e.shiftKey) {\n                    currentAlpha = Math.round(currentAlpha * 10) / 10;\n                }\n\n                move();\n            }, dragStart, dragStop);\n\n            draggable(slider, function (dragX, dragY) {\n                currentHue = parseFloat(dragY / slideHeight);\n                isEmpty = false;\n                if (!opts.showAlpha) {\n                    currentAlpha = 1;\n                }\n                move();\n            }, dragStart, dragStop);\n\n            draggable(dragger, function (dragX, dragY, e) {\n\n                // shift+drag should snap the movement to either the x or y axis.\n                if (!e.shiftKey) {\n                    shiftMovementDirection = null;\n                }\n                else if (!shiftMovementDirection) {\n                    var oldDragX = currentSaturation * dragWidth;\n                    var oldDragY = dragHeight - (currentValue * dragHeight);\n                    var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\n\n                    shiftMovementDirection = furtherFromX ? "x" : "y";\n                }\n\n                var setSaturation = !shiftMovementDirection || shiftMovementDirection === "x";\n                var setValue = !shiftMovementDirection || shiftMovementDirection === "y";\n\n                if (setSaturation) {\n                    currentSaturation = parseFloat(dragX / dragWidth);\n                }\n                if (setValue) {\n                    currentValue = parseFloat((dragHeight - dragY) / dragHeight);\n                }\n\n                isEmpty = false;\n                if (!opts.showAlpha) {\n                    currentAlpha = 1;\n                }\n\n                move();\n\n            }, dragStart, dragStop);\n\n            if (!!initialColor) {\n                set(initialColor);\n\n                // In case color was black - update the preview UI and set the format\n                // since the set function will not run (default color is black).\n                updateUI();\n                currentPreferredFormat = opts.preferredFormat || tinycolor(initialColor).format;\n\n                addColorToSelectionPalette(initialColor);\n            }\n            else {\n                updateUI();\n            }\n\n            if (flat) {\n                show();\n            }\n\n            function paletteElementClick(e) {\n                if (e.data && e.data.ignore) {\n                    set($(e.target).closest(".sp-thumb-el").data("color"));\n                    move();\n                }\n                else {\n                    set($(e.target).closest(".sp-thumb-el").data("color"));\n                    move();\n\n                    // If the picker is going to close immediately, a palette selection\n                    // is a change.  Otherwise, it\'s a move only.\n                    if (opts.hideAfterPaletteSelect) {\n                        updateOriginalInput(true);\n                        hide();\n                    } else {\n                        updateOriginalInput();\n                    }\n                }\n\n                return false;\n            }\n\n            var paletteEvent = IE ? "mousedown.spectrum" : "click.spectrum touchstart.spectrum";\n            paletteContainer.on(paletteEvent, ".sp-thumb-el", paletteElementClick);\n            initialColorContainer.on(paletteEvent, ".sp-thumb-el:nth-child(1)", { ignore: true }, paletteElementClick);\n        }\n\n        function updateSelectionPaletteFromStorage() {\n\n            if (localStorageKey && window.localStorage) {\n\n                // Migrate old palettes over to new format.  May want to remove this eventually.\n                try {\n                    var oldPalette = window.localStorage[localStorageKey].split(",#");\n                    if (oldPalette.length > 1) {\n                        delete window.localStorage[localStorageKey];\n                        $.each(oldPalette, function(i, c) {\n                             addColorToSelectionPalette(c);\n                        });\n                    }\n                }\n                catch(e) { }\n\n                try {\n                    selectionPalette = window.localStorage[localStorageKey].split(";");\n                }\n                catch (e) { }\n            }\n        }\n\n        function addColorToSelectionPalette(color) {\n            if (showSelectionPalette) {\n                var rgb = tinycolor(color).toRgbString();\n                if (!paletteLookup[rgb] && $.inArray(rgb, selectionPalette) === -1) {\n                    selectionPalette.push(rgb);\n                    while(selectionPalette.length > maxSelectionSize) {\n                        selectionPalette.shift();\n                    }\n                }\n\n                if (localStorageKey && window.localStorage) {\n                    try {\n                        window.localStorage[localStorageKey] = selectionPalette.join(";");\n                    }\n                    catch(e) { }\n                }\n            }\n        }\n\n        function getUniqueSelectionPalette() {\n            var unique = [];\n            if (opts.showPalette) {\n                for (var i = 0; i < selectionPalette.length; i++) {\n                    var rgb = tinycolor(selectionPalette[i]).toRgbString();\n\n                    if (!paletteLookup[rgb]) {\n                        unique.push(selectionPalette[i]);\n                    }\n                }\n            }\n\n            return unique.reverse().slice(0, opts.maxSelectionSize);\n        }\n\n        function drawPalette() {\n\n            var currentColor = get();\n\n            var html = $.map(paletteArray, function (palette, i) {\n                return paletteTemplate(palette, currentColor, "sp-palette-row sp-palette-row-" + i, opts);\n            });\n\n            updateSelectionPaletteFromStorage();\n\n            if (selectionPalette) {\n                html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, "sp-palette-row sp-palette-row-selection", opts));\n            }\n\n            paletteContainer.html(html.join(""));\n        }\n\n        function drawInitial() {\n            if (opts.showInitial) {\n                var initial = colorOnShow;\n                var current = get();\n                initialColorContainer.html(paletteTemplate([initial, current], current, "sp-palette-row-initial", opts));\n            }\n        }\n\n        function dragStart() {\n            if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {\n                reflow();\n            }\n            isDragging = true;\n            container.addClass(draggingClass);\n            shiftMovementDirection = null;\n            boundElement.trigger(\'dragstart.spectrum\', [ get() ]);\n        }\n\n        function dragStop() {\n            isDragging = false;\n            container.removeClass(draggingClass);\n            boundElement.trigger(\'dragstop.spectrum\', [ get() ]);\n        }\n\n        function setFromTextInput() {\n\n            var value = textInput.val();\n\n            if ((value === null || value === "") && allowEmpty) {\n                set(null);\n                move();\n                updateOriginalInput();\n            }\n            else {\n                var tiny = tinycolor(value);\n                if (tiny.isValid()) {\n                    set(tiny);\n                    move();\n                    updateOriginalInput();\n                }\n                else {\n                    textInput.addClass("sp-validation-error");\n                }\n            }\n        }\n\n        function toggle() {\n            if (visible) {\n                hide();\n            }\n            else {\n                show();\n            }\n        }\n\n        function show() {\n            var event = $.Event(\'beforeShow.spectrum\');\n\n            if (visible) {\n                reflow();\n                return;\n            }\n\n            boundElement.trigger(event, [ get() ]);\n\n            if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {\n                return;\n            }\n\n            hideAll();\n            visible = true;\n\n            $(doc).on("keydown.spectrum", onkeydown);\n            $(doc).on("click.spectrum", clickout);\n            $(window).on("resize.spectrum", resize);\n            replacer.addClass("sp-active");\n            container.removeClass("sp-hidden");\n\n            reflow();\n            updateUI();\n\n            colorOnShow = get();\n\n            drawInitial();\n            callbacks.show(colorOnShow);\n            boundElement.trigger(\'show.spectrum\', [ colorOnShow ]);\n        }\n\n        function onkeydown(e) {\n            // Close on ESC\n            if (e.keyCode === 27) {\n                hide();\n            }\n        }\n\n        function clickout(e) {\n            // Return on right click.\n            if (e.button == 2) { return; }\n\n            // If a drag event was happening during the mouseup, don\'t hide\n            // on click.\n            if (isDragging) { return; }\n\n            if (clickoutFiresChange) {\n                updateOriginalInput(true);\n            }\n            else {\n                revert();\n            }\n            hide();\n        }\n\n        function hide() {\n            // Return if hiding is unnecessary\n            if (!visible || flat) { return; }\n            visible = false;\n\n            $(doc).off("keydown.spectrum", onkeydown);\n            $(doc).off("click.spectrum", clickout);\n            $(window).off("resize.spectrum", resize);\n\n            replacer.removeClass("sp-active");\n            container.addClass("sp-hidden");\n\n            callbacks.hide(get());\n            boundElement.trigger(\'hide.spectrum\', [ get() ]);\n        }\n\n        function revert() {\n            set(colorOnShow, true);\n            updateOriginalInput(true);\n        }\n\n        function set(color, ignoreFormatChange) {\n            if (tinycolor.equals(color, get())) {\n                // Update UI just in case a validation error needs\n                // to be cleared.\n                updateUI();\n                return;\n            }\n\n            var newColor, newHsv;\n            if (!color && allowEmpty) {\n                isEmpty = true;\n            } else {\n                isEmpty = false;\n                newColor = tinycolor(color);\n                newHsv = newColor.toHsv();\n\n                currentHue = (newHsv.h % 360) / 360;\n                currentSaturation = newHsv.s;\n                currentValue = newHsv.v;\n                currentAlpha = newHsv.a;\n            }\n            updateUI();\n\n            if (newColor && newColor.isValid() && !ignoreFormatChange) {\n                currentPreferredFormat = opts.preferredFormat || newColor.getFormat();\n            }\n        }\n\n        function get(opts) {\n            opts = opts || { };\n\n            if (allowEmpty && isEmpty) {\n                return null;\n            }\n\n            return tinycolor.fromRatio({\n                h: currentHue,\n                s: currentSaturation,\n                v: currentValue,\n                a: Math.round(currentAlpha * 1000) / 1000\n            }, { format: opts.format || currentPreferredFormat });\n        }\n\n        function isValid() {\n            return !textInput.hasClass("sp-validation-error");\n        }\n\n        function move() {\n            updateUI();\n\n            callbacks.move(get());\n            boundElement.trigger(\'move.spectrum\', [ get() ]);\n        }\n\n        function updateUI() {\n\n            textInput.removeClass("sp-validation-error");\n\n            updateHelperLocations();\n\n            // Update dragger background color (gradients take care of saturation and value).\n            var flatColor = tinycolor.fromRatio({ h: currentHue, s: 1, v: 1 });\n            dragger.css("background-color", flatColor.toHexString());\n\n            // Get a format that alpha will be included in (hex and names ignore alpha)\n            var format = currentPreferredFormat;\n            if (currentAlpha < 1 && !(currentAlpha === 0 && format === "name")) {\n                if (format === "hex" || format === "hex3" || format === "hex6" || format === "name") {\n                    format = "rgb";\n                }\n            }\n\n            var realColor = get({ format: format }),\n                displayColor = \'\';\n\n             //reset background info for preview element\n            previewElement.removeClass("sp-clear-display");\n            previewElement.css(\'background-color\', \'transparent\');\n\n            if (!realColor && allowEmpty) {\n                // Update the replaced elements background with icon indicating no color selection\n                previewElement.addClass("sp-clear-display");\n            }\n            else {\n                var realHex = realColor.toHexString(),\n                    realRgb = realColor.toRgbString();\n\n                // Update the replaced elements background color (with actual selected color)\n                if (rgbaSupport || realColor.alpha === 1) {\n                    previewElement.css("background-color", realRgb);\n                }\n                else {\n                    previewElement.css("background-color", "transparent");\n                    previewElement.css("filter", realColor.toFilter());\n                }\n\n                if (opts.showAlpha) {\n                    var rgb = realColor.toRgb();\n                    rgb.a = 0;\n                    var realAlpha = tinycolor(rgb).toRgbString();\n                    var gradient = "linear-gradient(left, " + realAlpha + ", " + realHex + ")";\n\n                    if (IE) {\n                        alphaSliderInner.css("filter", tinycolor(realAlpha).toFilter({ gradientType: 1 }, realHex));\n                    }\n                    else {\n                        alphaSliderInner.css("background", "-webkit-" + gradient);\n                        alphaSliderInner.css("background", "-moz-" + gradient);\n                        alphaSliderInner.css("background", "-ms-" + gradient);\n                        // Use current syntax gradient on unprefixed property.\n                        alphaSliderInner.css("background",\n                            "linear-gradient(to right, " + realAlpha + ", " + realHex + ")");\n                    }\n                }\n\n                displayColor = realColor.toString(format);\n            }\n\n            // Update the text entry input as it changes happen\n            if (opts.showInput) {\n                textInput.val(displayColor);\n            }\n\n            if (opts.showPalette) {\n                drawPalette();\n            }\n\n            drawInitial();\n        }\n\n        function updateHelperLocations() {\n            var s = currentSaturation;\n            var v = currentValue;\n\n            if(allowEmpty && isEmpty) {\n                //if selected color is empty, hide the helpers\n                alphaSlideHelper.hide();\n                slideHelper.hide();\n                dragHelper.hide();\n            }\n            else {\n                //make sure helpers are visible\n                alphaSlideHelper.show();\n                slideHelper.show();\n                dragHelper.show();\n\n                // Where to show the little circle in that displays your current selected color\n                var dragX = s * dragWidth;\n                var dragY = dragHeight - (v * dragHeight);\n                dragX = Math.max(\n                    -dragHelperHeight,\n                    Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight)\n                );\n                dragY = Math.max(\n                    -dragHelperHeight,\n                    Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight)\n                );\n                dragHelper.css({\n                    "top": dragY + "px",\n                    "left": dragX + "px"\n                });\n\n                var alphaX = currentAlpha * alphaWidth;\n                alphaSlideHelper.css({\n                    "left": (alphaX - (alphaSlideHelperWidth / 2)) + "px"\n                });\n\n                // Where to show the bar that displays your current selected hue\n                var slideY = (currentHue) * slideHeight;\n                slideHelper.css({\n                    "top": (slideY - slideHelperHeight) + "px"\n                });\n            }\n        }\n\n        function updateOriginalInput(fireCallback) {\n            var color = get(),\n                displayColor = \'\',\n                hasChanged = !tinycolor.equals(color, colorOnShow);\n\n            if (color) {\n                displayColor = color.toString(currentPreferredFormat);\n                // Update the selection palette with the current color\n                addColorToSelectionPalette(color);\n            }\n\n            if (isInput) {\n                boundElement.val(displayColor);\n            }\n\n            if (fireCallback && hasChanged) {\n                callbacks.change(color);\n                boundElement.trigger(\'change\', [ color ]);\n            }\n        }\n\n        function reflow() {\n            if (!visible) {\n                return; // Calculations would be useless and wouldn\'t be reliable anyways\n            }\n            dragWidth = dragger.width();\n            dragHeight = dragger.height();\n            dragHelperHeight = dragHelper.height();\n            slideWidth = slider.width();\n            slideHeight = slider.height();\n            slideHelperHeight = slideHelper.height();\n            alphaWidth = alphaSlider.width();\n            alphaSlideHelperWidth = alphaSlideHelper.width();\n\n            if (!flat) {\n                container.css("position", "absolute");\n                if (opts.offset) {\n                    container.offset(opts.offset);\n                } else {\n                    container.offset(getOffset(container, offsetElement));\n                }\n            }\n\n            updateHelperLocations();\n\n            if (opts.showPalette) {\n                drawPalette();\n            }\n\n            boundElement.trigger(\'reflow.spectrum\');\n        }\n\n        function destroy() {\n            boundElement.show();\n            offsetElement.off("click.spectrum touchstart.spectrum");\n            container.remove();\n            replacer.remove();\n            spectrums[spect.id] = null;\n        }\n\n        function option(optionName, optionValue) {\n            if (optionName === undefined) {\n                return $.extend({}, opts);\n            }\n            if (optionValue === undefined) {\n                return opts[optionName];\n            }\n\n            opts[optionName] = optionValue;\n\n            if (optionName === "preferredFormat") {\n                currentPreferredFormat = opts.preferredFormat;\n            }\n            applyOptions();\n        }\n\n        function enable() {\n            disabled = false;\n            boundElement.attr("disabled", false);\n            offsetElement.removeClass("sp-disabled");\n        }\n\n        function disable() {\n            hide();\n            disabled = true;\n            boundElement.attr("disabled", true);\n            offsetElement.addClass("sp-disabled");\n        }\n\n        function setOffset(coord) {\n            opts.offset = coord;\n            reflow();\n        }\n\n        initialize();\n\n        var spect = {\n            show: show,\n            hide: hide,\n            toggle: toggle,\n            reflow: reflow,\n            option: option,\n            enable: enable,\n            disable: disable,\n            offset: setOffset,\n            set: function (c) {\n                set(c);\n                updateOriginalInput();\n            },\n            get: get,\n            destroy: destroy,\n            container: container\n        };\n\n        spect.id = spectrums.push(spect) - 1;\n\n        return spect;\n    }\n\n    /**\n    * checkOffset - get the offset below/above and left/right element depending on screen position\n    * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js\n    */\n    function getOffset(picker, input) {\n        var extraY = 0;\n        var dpWidth = picker.outerWidth();\n        var dpHeight = picker.outerHeight();\n        var inputHeight = input.outerHeight();\n        var doc = picker[0].ownerDocument;\n        var docElem = doc.documentElement;\n        var viewWidth = docElem.clientWidth + $(doc).scrollLeft();\n        var viewHeight = docElem.clientHeight + $(doc).scrollTop();\n        var offset = input.offset();\n        var offsetLeft = offset.left;\n        var offsetTop = offset.top;\n\n        offsetTop += inputHeight;\n\n        offsetLeft -=\n            Math.min(offsetLeft, (offsetLeft + dpWidth > viewWidth && viewWidth > dpWidth) ?\n            Math.abs(offsetLeft + dpWidth - viewWidth) : 0);\n\n        offsetTop -=\n            Math.min(offsetTop, ((offsetTop + dpHeight > viewHeight && viewHeight > dpHeight) ?\n            Math.abs(dpHeight + inputHeight - extraY) : extraY));\n\n        return {\n            top: offsetTop,\n            bottom: offset.bottom,\n            left: offsetLeft,\n            right: offset.right,\n            width: offset.width,\n            height: offset.height\n        };\n    }\n\n    /**\n    * noop - do nothing\n    */\n    function noop() {\n\n    }\n\n    /**\n    * stopPropagation - makes the code only doing this a little easier to read in line\n    */\n    function stopPropagation(e) {\n        e.stopPropagation();\n    }\n\n    /**\n    * Create a function bound to a given object\n    * Thanks to underscore.js\n    */\n    function bind(func, obj) {\n        var slice = Array.prototype.slice;\n        var args = slice.call(arguments, 2);\n        return function () {\n            return func.apply(obj, args.concat(slice.call(arguments)));\n        };\n    }\n\n    /**\n    * Lightweight drag helper.  Handles containment within the element, so that\n    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\n    */\n    function draggable(element, onmove, onstart, onstop) {\n        onmove = onmove || function () { };\n        onstart = onstart || function () { };\n        onstop = onstop || function () { };\n        var doc = document;\n        var dragging = false;\n        var offset = {};\n        var maxHeight = 0;\n        var maxWidth = 0;\n        var hasTouch = (\'ontouchstart\' in window);\n\n        var duringDragEvents = {};\n        duringDragEvents["selectstart"] = prevent;\n        duringDragEvents["dragstart"] = prevent;\n        duringDragEvents["touchmove mousemove"] = move;\n        duringDragEvents["touchend mouseup"] = stop;\n\n        function prevent(e) {\n            if (e.stopPropagation) {\n                e.stopPropagation();\n            }\n            if (e.preventDefault) {\n                e.preventDefault();\n            }\n            e.returnValue = false;\n        }\n\n        function move(e) {\n            if (dragging) {\n                // Mouseup happened outside of window\n                if (IE && doc.documentMode < 9 && !e.button) {\n                    return stop();\n                }\n\n                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\n                var pageX = t0 && t0.pageX || e.pageX;\n                var pageY = t0 && t0.pageY || e.pageY;\n\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\n\n                if (hasTouch) {\n                    // Stop scrolling in iOS\n                    prevent(e);\n                }\n\n                onmove.apply(element, [dragX, dragY, e]);\n            }\n        }\n\n        function start(e) {\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\n\n            if (!rightclick && !dragging) {\n                if (onstart.apply(element, arguments) !== false) {\n                    dragging = true;\n                    maxHeight = $(element).height();\n                    maxWidth = $(element).width();\n                    offset = $(element).offset();\n\n                    $(doc).on(duringDragEvents);\n                    $(doc.body).addClass("sp-dragging");\n\n                    move(e);\n\n                    prevent(e);\n                }\n            }\n        }\n\n        function stop() {\n            if (dragging) {\n                $(doc).off(duringDragEvents);\n                $(doc.body).removeClass("sp-dragging");\n\n                // Wait a tick before notifying observers to allow the click event\n                // to fire in Chrome.\n                setTimeout(function() {\n                    onstop.apply(element, arguments);\n                }, 0);\n            }\n            dragging = false;\n        }\n\n        $(element).on("touchstart mousedown", start);\n    }\n\n    function throttle(func, wait, debounce) {\n        var timeout;\n        return function () {\n            var context = this, args = arguments;\n            var throttler = function () {\n                timeout = null;\n                func.apply(context, args);\n            };\n            if (debounce) clearTimeout(timeout);\n            if (debounce || !timeout) timeout = setTimeout(throttler, wait);\n        };\n    }\n\n    function inputTypeColorSupport() {\n        return $.fn.spectrum.inputTypeColorSupport();\n    }\n\n    /**\n    * Define a jQuery plugin\n    */\n    var dataID = "spectrum.id";\n    $.fn.spectrum = function (opts, extra) {\n\n        if (typeof opts == "string") {\n\n            var returnValue = this;\n            var args = Array.prototype.slice.call( arguments, 1 );\n\n            this.each(function () {\n                var spect = spectrums[$(this).data(dataID)];\n                if (spect) {\n                    var method = spect[opts];\n                    if (!method) {\n                        throw new Error( "Spectrum: no such method: \'" + opts + "\'" );\n                    }\n\n                    if (opts == "get") {\n                        returnValue = spect.get();\n                    }\n                    else if (opts == "container") {\n                        returnValue = spect.container;\n                    }\n                    else if (opts == "option") {\n                        returnValue = spect.option.apply(spect, args);\n                    }\n                    else if (opts == "destroy") {\n                        spect.destroy();\n                        $(this).removeData(dataID);\n                    }\n                    else {\n                        method.apply(spect, args);\n                    }\n                }\n            });\n\n            return returnValue;\n        }\n\n        // Initializing a new instance of spectrum\n        return this.spectrum("destroy").each(function () {\n            var options = $.extend({}, $(this).data(), opts);\n            var spect = spectrum(this, options);\n            $(this).data(dataID, spect.id);\n        });\n    };\n\n    $.fn.spectrum.load = true;\n    $.fn.spectrum.loadOpts = {};\n    $.fn.spectrum.draggable = draggable;\n    $.fn.spectrum.defaults = defaultOpts;\n    $.fn.spectrum.inputTypeColorSupport = function inputTypeColorSupport() {\n        if (typeof inputTypeColorSupport._cachedResult === "undefined") {\n            var colorInput = $("<input type=\'color\'/>")[0]; // if color element is supported, value will default to not null\n            inputTypeColorSupport._cachedResult = colorInput.type === "color" && colorInput.value !== "";\n        }\n        return inputTypeColorSupport._cachedResult;\n    };\n\n    $.spectrum = { };\n    $.spectrum.localization = { };\n    $.spectrum.palettes = { };\n\n    $.fn.spectrum.processNativeColorInputs = function () {\n        var colorInputs = $("input[type=color]");\n        if (colorInputs.length && !inputTypeColorSupport()) {\n            colorInputs.spectrum({\n                preferredFormat: "hex6"\n            });\n        }\n    };\n\n    // TinyColor v1.1.2\n    // https://github.com/bgrins/TinyColor\n    // Brian Grinstead, MIT License\n\n    (function() {\n\n    var trimLeft = /^[\\s,#]+/,\n        trimRight = /\\s+$/,\n        tinyCounter = 0,\n        math = Math,\n        mathRound = math.round,\n        mathMin = math.min,\n        mathMax = math.max,\n        mathRandom = math.random;\n\n    var tinycolor = function(color, opts) {\n\n        color = (color) ? color : \'\';\n        opts = opts || { };\n\n        // If input is already a tinycolor, return itself\n        if (color instanceof tinycolor) {\n           return color;\n        }\n        // If we are called as a function, call using new instead\n        if (!(this instanceof tinycolor)) {\n            return new tinycolor(color, opts);\n        }\n\n        var rgb = inputToRGB(color);\n        this._originalInput = color;\n        this._r = rgb.r;\n        this._g = rgb.g;\n        this._b = rgb.b;\n        this._a = rgb.a;\n        this._roundA = mathRound(1000 * this._a) / 1000;\n        this._format = opts.format || rgb.format;\n        this._gradientType = opts.gradientType;\n\n        // Don\'t let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (this._r < 1) { this._r = mathRound(this._r); }\n        if (this._g < 1) { this._g = mathRound(this._g); }\n        if (this._b < 1) { this._b = mathRound(this._b); }\n\n        this._ok = rgb.ok;\n        this._tc_id = tinyCounter++;\n    };\n\n    tinycolor.prototype = {\n        isDark: function() {\n            return this.getBrightness() < 128;\n        },\n        isLight: function() {\n            return !this.isDark();\n        },\n        isValid: function() {\n            return this._ok;\n        },\n        getOriginalInput: function() {\n          return this._originalInput;\n        },\n        getFormat: function() {\n            return this._format;\n        },\n        getAlpha: function() {\n            return this._a;\n        },\n        getBrightness: function() {\n            var rgb = this.toRgb();\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n        },\n        setAlpha: function(value) {\n            this._a = boundAlpha(value);\n            this._roundA = mathRound(1000 * this._a) / 1000;\n            return this;\n        },\n        toHsv: function() {\n            var hsv = rgbToHsv(this._r, this._g, this._b);\n            return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n        },\n        toHsvString: function() {\n            var hsv = rgbToHsv(this._r, this._g, this._b);\n            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n            return (this._a == 1) ?\n              "hsv("  + h + ", " + s + "%, " + v + "%)" :\n              "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";\n        },\n        toHsl: function() {\n            var hsl = rgbToHsl(this._r, this._g, this._b);\n            return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n        },\n        toHslString: function() {\n            var hsl = rgbToHsl(this._r, this._g, this._b);\n            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n            return (this._a == 1) ?\n              "hsl("  + h + ", " + s + "%, " + l + "%)" :\n              "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";\n        },\n        toHex: function(allow3Char) {\n            return rgbToHex(this._r, this._g, this._b, allow3Char);\n        },\n        toHexString: function(allow3Char) {\n            return \'#\' + this.toHex(allow3Char);\n        },\n        toHex8: function() {\n            return rgbaToHex(this._r, this._g, this._b, this._a);\n        },\n        toHex8String: function() {\n            return \'#\' + this.toHex8();\n        },\n        toRgb: function() {\n            return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n        },\n        toRgbString: function() {\n            return (this._a == 1) ?\n              "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :\n              "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";\n        },\n        toPercentageRgb: function() {\n            return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };\n        },\n        toPercentageRgbString: function() {\n            return (this._a == 1) ?\n              "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :\n              "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";\n        },\n        toName: function() {\n            if (this._a === 0) {\n                return "transparent";\n            }\n\n            if (this._a < 1) {\n                return false;\n            }\n\n            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n        },\n        toFilter: function(secondColor) {\n            var hex8String = \'#\' + rgbaToHex(this._r, this._g, this._b, this._a);\n            var secondHex8String = hex8String;\n            var gradientType = this._gradientType ? "GradientType = 1, " : "";\n\n            if (secondColor) {\n                var s = tinycolor(secondColor);\n                secondHex8String = s.toHex8String();\n            }\n\n            return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";\n        },\n        toString: function(format) {\n            var formatSet = !!format;\n            format = format || this._format;\n\n            var formattedString = false;\n            var hasAlpha = this._a < 1 && this._a >= 0;\n            var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "name");\n\n            if (needsAlphaFormat) {\n                // Special case for "transparent", all other non-alpha formats\n                // will return rgba when there is transparency.\n                if (format === "name" && this._a === 0) {\n                    return this.toName();\n                }\n                return this.toRgbString();\n            }\n            if (format === "rgb") {\n                formattedString = this.toRgbString();\n            }\n            if (format === "prgb") {\n                formattedString = this.toPercentageRgbString();\n            }\n            if (format === "hex" || format === "hex6") {\n                formattedString = this.toHexString();\n            }\n            if (format === "hex3") {\n                formattedString = this.toHexString(true);\n            }\n            if (format === "hex8") {\n                formattedString = this.toHex8String();\n            }\n            if (format === "name") {\n                formattedString = this.toName();\n            }\n            if (format === "hsl") {\n                formattedString = this.toHslString();\n            }\n            if (format === "hsv") {\n                formattedString = this.toHsvString();\n            }\n\n            return formattedString || this.toHexString();\n        },\n\n        _applyModification: function(fn, args) {\n            var color = fn.apply(null, [this].concat([].slice.call(args)));\n            this._r = color._r;\n            this._g = color._g;\n            this._b = color._b;\n            this.setAlpha(color._a);\n            return this;\n        },\n        lighten: function() {\n            return this._applyModification(lighten, arguments);\n        },\n        brighten: function() {\n            return this._applyModification(brighten, arguments);\n        },\n        darken: function() {\n            return this._applyModification(darken, arguments);\n        },\n        desaturate: function() {\n            return this._applyModification(desaturate, arguments);\n        },\n        saturate: function() {\n            return this._applyModification(saturate, arguments);\n        },\n        greyscale: function() {\n            return this._applyModification(greyscale, arguments);\n        },\n        spin: function() {\n            return this._applyModification(spin, arguments);\n        },\n\n        _applyCombination: function(fn, args) {\n            return fn.apply(null, [this].concat([].slice.call(args)));\n        },\n        analogous: function() {\n            return this._applyCombination(analogous, arguments);\n        },\n        complement: function() {\n            return this._applyCombination(complement, arguments);\n        },\n        monochromatic: function() {\n            return this._applyCombination(monochromatic, arguments);\n        },\n        splitcomplement: function() {\n            return this._applyCombination(splitcomplement, arguments);\n        },\n        triad: function() {\n            return this._applyCombination(triad, arguments);\n        },\n        tetrad: function() {\n            return this._applyCombination(tetrad, arguments);\n        }\n    };\n\n    // If input is an object, force 1 into "1.0" to handle ratios properly\n    // String input requires "1.0" as input, so 1 will be treated as 1\n    tinycolor.fromRatio = function(color, opts) {\n        if (typeof color == "object") {\n            var newColor = {};\n            for (var i in color) {\n                if (color.hasOwnProperty(i)) {\n                    if (i === "a") {\n                        newColor[i] = color[i];\n                    }\n                    else {\n                        newColor[i] = convertToPercentage(color[i]);\n                    }\n                }\n            }\n            color = newColor;\n        }\n\n        return tinycolor(color, opts);\n    };\n\n    // Given a string or object, convert that input to RGB\n    // Possible string inputs:\n    //\n    //     "red"\n    //     "#f00" or "f00"\n    //     "#ff0000" or "ff0000"\n    //     "#ff000000" or "ff000000"\n    //     "rgb 255 0 0" or "rgb (255, 0, 0)"\n    //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"\n    //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"\n    //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"\n    //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"\n    //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"\n    //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"\n    //\n    function inputToRGB(color) {\n\n        var rgb = { r: 0, g: 0, b: 0 };\n        var a = 1;\n        var ok = false;\n        var format = false;\n\n        if (typeof color == "string") {\n            color = stringInputToObject(color);\n        }\n\n        if (typeof color == "object") {\n            if (color.hasOwnProperty("r") && color.hasOwnProperty("g") && color.hasOwnProperty("b")) {\n                rgb = rgbToRgb(color.r, color.g, color.b);\n                ok = true;\n                format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";\n            }\n            else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("v")) {\n                color.s = convertToPercentage(color.s);\n                color.v = convertToPercentage(color.v);\n                rgb = hsvToRgb(color.h, color.s, color.v);\n                ok = true;\n                format = "hsv";\n            }\n            else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("l")) {\n                color.s = convertToPercentage(color.s);\n                color.l = convertToPercentage(color.l);\n                rgb = hslToRgb(color.h, color.s, color.l);\n                ok = true;\n                format = "hsl";\n            }\n\n            if (color.hasOwnProperty("a")) {\n                a = color.a;\n            }\n        }\n\n        a = boundAlpha(a);\n\n        return {\n            ok: ok,\n            format: color.format || format,\n            r: mathMin(255, mathMax(rgb.r, 0)),\n            g: mathMin(255, mathMax(rgb.g, 0)),\n            b: mathMin(255, mathMax(rgb.b, 0)),\n            a: a\n        };\n    }\n\n\n    // Conversion Functions\n    // --------------------\n\n    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n    // `rgbToRgb`\n    // Handle bounds / percentage checking to conform to CSS color spec\n    // <http://www.w3.org/TR/css3-color/>\n    // *Assumes:* r, g, b in [0, 255] or [0, 1]\n    // *Returns:* { r, g, b } in [0, 255]\n    function rgbToRgb(r, g, b){\n        return {\n            r: bound01(r, 255) * 255,\n            g: bound01(g, 255) * 255,\n            b: bound01(b, 255) * 255\n        };\n    }\n\n    // `rgbToHsl`\n    // Converts an RGB color value to HSL.\n    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n    // *Returns:* { h, s, l } in [0,1]\n    function rgbToHsl(r, g, b) {\n\n        r = bound01(r, 255);\n        g = bound01(g, 255);\n        b = bound01(b, 255);\n\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\n        var h, s, l = (max + min) / 2;\n\n        if(max == min) {\n            h = s = 0; // achromatic\n        }\n        else {\n            var d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch(max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n\n            h /= 6;\n        }\n\n        return { h: h, s: s, l: l };\n    }\n\n    // `hslToRgb`\n    // Converts an HSL color value to RGB.\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n    // *Returns:* { r, g, b } in the set [0, 255]\n    function hslToRgb(h, s, l) {\n        var r, g, b;\n\n        h = bound01(h, 360);\n        s = bound01(s, 100);\n        l = bound01(l, 100);\n\n        function hue2rgb(p, q, t) {\n            if(t < 0) t += 1;\n            if(t > 1) t -= 1;\n            if(t < 1/6) return p + (q - p) * 6 * t;\n            if(t < 1/2) return q;\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n            return p;\n        }\n\n        if(s === 0) {\n            r = g = b = l; // achromatic\n        }\n        else {\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1/3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1/3);\n        }\n\n        return { r: r * 255, g: g * 255, b: b * 255 };\n    }\n\n    // `rgbToHsv`\n    // Converts an RGB color value to HSV\n    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n    // *Returns:* { h, s, v } in [0,1]\n    function rgbToHsv(r, g, b) {\n\n        r = bound01(r, 255);\n        g = bound01(g, 255);\n        b = bound01(b, 255);\n\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\n        var h, s, v = max;\n\n        var d = max - min;\n        s = max === 0 ? 0 : d / max;\n\n        if(max == min) {\n            h = 0; // achromatic\n        }\n        else {\n            switch(max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n        return { h: h, s: s, v: v };\n    }\n\n    // `hsvToRgb`\n    // Converts an HSV color value to RGB.\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n    // *Returns:* { r, g, b } in the set [0, 255]\n     function hsvToRgb(h, s, v) {\n\n        h = bound01(h, 360) * 6;\n        s = bound01(s, 100);\n        v = bound01(v, 100);\n\n        var i = math.floor(h),\n            f = h - i,\n            p = v * (1 - s),\n            q = v * (1 - f * s),\n            t = v * (1 - (1 - f) * s),\n            mod = i % 6,\n            r = [v, q, p, p, t, v][mod],\n            g = [t, v, v, q, p, p][mod],\n            b = [p, p, t, v, v, q][mod];\n\n        return { r: r * 255, g: g * 255, b: b * 255 };\n    }\n\n    // `rgbToHex`\n    // Converts an RGB color to hex\n    // Assumes r, g, and b are contained in the set [0, 255]\n    // Returns a 3 or 6 character hex\n    function rgbToHex(r, g, b, allow3Char) {\n\n        var hex = [\n            pad2(mathRound(r).toString(16)),\n            pad2(mathRound(g).toString(16)),\n            pad2(mathRound(b).toString(16))\n        ];\n\n        // Return a 3 character hex if possible\n        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n        }\n\n        return hex.join("");\n    }\n        // `rgbaToHex`\n        // Converts an RGBA color plus alpha transparency to hex\n        // Assumes r, g, b and a are contained in the set [0, 255]\n        // Returns an 8 character hex\n        function rgbaToHex(r, g, b, a) {\n\n            var hex = [\n                pad2(convertDecimalToHex(a)),\n                pad2(mathRound(r).toString(16)),\n                pad2(mathRound(g).toString(16)),\n                pad2(mathRound(b).toString(16))\n            ];\n\n            return hex.join("");\n        }\n\n    // `equals`\n    // Can be called with any tinycolor input\n    tinycolor.equals = function (color1, color2) {\n        if (!color1 || !color2) { return false; }\n        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n    };\n    tinycolor.random = function() {\n        return tinycolor.fromRatio({\n            r: mathRandom(),\n            g: mathRandom(),\n            b: mathRandom()\n        });\n    };\n\n\n    // Modification Functions\n    // ----------------------\n    // Thanks to less.js for some of the basics here\n    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n    function desaturate(color, amount) {\n        amount = (amount === 0) ? 0 : (amount || 10);\n        var hsl = tinycolor(color).toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return tinycolor(hsl);\n    }\n\n    function saturate(color, amount) {\n        amount = (amount === 0) ? 0 : (amount || 10);\n        var hsl = tinycolor(color).toHsl();\n        hsl.s += amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return tinycolor(hsl);\n    }\n\n    function greyscale(color) {\n        return tinycolor(color).desaturate(100);\n    }\n\n    function lighten (color, amount) {\n        amount = (amount === 0) ? 0 : (amount || 10);\n        var hsl = tinycolor(color).toHsl();\n        hsl.l += amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return tinycolor(hsl);\n    }\n\n    function brighten(color, amount) {\n        amount = (amount === 0) ? 0 : (amount || 10);\n        var rgb = tinycolor(color).toRgb();\n        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n        return tinycolor(rgb);\n    }\n\n    function darken (color, amount) {\n        amount = (amount === 0) ? 0 : (amount || 10);\n        var hsl = tinycolor(color).toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return tinycolor(hsl);\n    }\n\n    // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n    // Values outside of this range will be wrapped into this range.\n    function spin(color, amount) {\n        var hsl = tinycolor(color).toHsl();\n        var hue = (mathRound(hsl.h) + amount) % 360;\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        return tinycolor(hsl);\n    }\n\n    // Combination Functions\n    // ---------------------\n    // Thanks to jQuery xColor for some of the ideas behind these\n    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n    function complement(color) {\n        var hsl = tinycolor(color).toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return tinycolor(hsl);\n    }\n\n    function triad(color) {\n        var hsl = tinycolor(color).toHsl();\n        var h = hsl.h;\n        return [\n            tinycolor(color),\n            tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n            tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n        ];\n    }\n\n    function tetrad(color) {\n        var hsl = tinycolor(color).toHsl();\n        var h = hsl.h;\n        return [\n            tinycolor(color),\n            tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n            tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n            tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n        ];\n    }\n\n    function splitcomplement(color) {\n        var hsl = tinycolor(color).toHsl();\n        var h = hsl.h;\n        return [\n            tinycolor(color),\n            tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n            tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n        ];\n    }\n\n    function analogous(color, results, slices) {\n        results = results || 6;\n        slices = slices || 30;\n\n        var hsl = tinycolor(color).toHsl();\n        var part = 360 / slices;\n        var ret = [tinycolor(color)];\n\n        for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(tinycolor(hsl));\n        }\n        return ret;\n    }\n\n    function monochromatic(color, results) {\n        results = results || 6;\n        var hsv = tinycolor(color).toHsv();\n        var h = hsv.h, s = hsv.s, v = hsv.v;\n        var ret = [];\n        var modification = 1 / results;\n\n        while (results--) {\n            ret.push(tinycolor({ h: h, s: s, v: v}));\n            v = (v + modification) % 1;\n        }\n\n        return ret;\n    }\n\n    // Utility Functions\n    // ---------------------\n\n    tinycolor.mix = function(color1, color2, amount) {\n        amount = (amount === 0) ? 0 : (amount || 50);\n\n        var rgb1 = tinycolor(color1).toRgb();\n        var rgb2 = tinycolor(color2).toRgb();\n\n        var p = amount / 100;\n        var w = p * 2 - 1;\n        var a = rgb2.a - rgb1.a;\n\n        var w1;\n\n        if (w * a == -1) {\n            w1 = w;\n        } else {\n            w1 = (w + a) / (1 + w * a);\n        }\n\n        w1 = (w1 + 1) / 2;\n\n        var w2 = 1 - w1;\n\n        var rgba = {\n            r: rgb2.r * w1 + rgb1.r * w2,\n            g: rgb2.g * w1 + rgb1.g * w2,\n            b: rgb2.b * w1 + rgb1.b * w2,\n            a: rgb2.a * p  + rgb1.a * (1 - p)\n        };\n\n        return tinycolor(rgba);\n    };\n\n\n    // Readability Functions\n    // ---------------------\n    // <http://www.w3.org/TR/AERT#color-contrast>\n\n    // `readability`\n    // Analyze the 2 colors and returns an object with the following properties:\n    //    `brightness`: difference in brightness between the two colors\n    //    `color`: difference in color/hue between the two colors\n    tinycolor.readability = function(color1, color2) {\n        var c1 = tinycolor(color1);\n        var c2 = tinycolor(color2);\n        var rgb1 = c1.toRgb();\n        var rgb2 = c2.toRgb();\n        var brightnessA = c1.getBrightness();\n        var brightnessB = c2.getBrightness();\n        var colorDiff = (\n            Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) +\n            Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) +\n            Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b)\n        );\n\n        return {\n            brightness: Math.abs(brightnessA - brightnessB),\n            color: colorDiff\n        };\n    };\n\n    // `readable`\n    // http://www.w3.org/TR/AERT#color-contrast\n    // Ensure that foreground and background color combinations provide sufficient contrast.\n    // *Example*\n    //    tinycolor.isReadable("#000", "#111") => false\n    tinycolor.isReadable = function(color1, color2) {\n        var readability = tinycolor.readability(color1, color2);\n        return readability.brightness > 125 && readability.color > 500;\n    };\n\n    // `mostReadable`\n    // Given a base color and a list of possible foreground or background\n    // colors for that base, returns the most readable color.\n    // *Example*\n    //    tinycolor.mostReadable("#123", ["#fff", "#000"]) => "#000"\n    tinycolor.mostReadable = function(baseColor, colorList) {\n        var bestColor = null;\n        var bestScore = 0;\n        var bestIsReadable = false;\n        for (var i=0; i < colorList.length; i++) {\n\n            // We normalize both around the "acceptable" breaking point,\n            // but rank brightness constrast higher than hue.\n\n            var readability = tinycolor.readability(baseColor, colorList[i]);\n            var readable = readability.brightness > 125 && readability.color > 500;\n            var score = 3 * (readability.brightness / 125) + (readability.color / 500);\n\n            if ((readable && ! bestIsReadable) ||\n                (readable && bestIsReadable && score > bestScore) ||\n                ((! readable) && (! bestIsReadable) && score > bestScore)) {\n                bestIsReadable = readable;\n                bestScore = score;\n                bestColor = tinycolor(colorList[i]);\n            }\n        }\n        return bestColor;\n    };\n\n\n    // Big List of Colors\n    // ------------------\n    // <http://www.w3.org/TR/css3-color/#svg-color>\n    var names = tinycolor.names = {\n        aliceblue: "f0f8ff",\n        antiquewhite: "faebd7",\n        aqua: "0ff",\n        aquamarine: "7fffd4",\n        azure: "f0ffff",\n        beige: "f5f5dc",\n        bisque: "ffe4c4",\n        black: "000",\n        blanchedalmond: "ffebcd",\n        blue: "00f",\n        blueviolet: "8a2be2",\n        brown: "a52a2a",\n        burlywood: "deb887",\n        burntsienna: "ea7e5d",\n        cadetblue: "5f9ea0",\n        chartreuse: "7fff00",\n        chocolate: "d2691e",\n        coral: "ff7f50",\n        cornflowerblue: "6495ed",\n        cornsilk: "fff8dc",\n        crimson: "dc143c",\n        cyan: "0ff",\n        darkblue: "00008b",\n        darkcyan: "008b8b",\n        darkgoldenrod: "b8860b",\n        darkgray: "a9a9a9",\n        darkgreen: "006400",\n        darkgrey: "a9a9a9",\n        darkkhaki: "bdb76b",\n        darkmagenta: "8b008b",\n        darkolivegreen: "556b2f",\n        darkorange: "ff8c00",\n        darkorchid: "9932cc",\n        darkred: "8b0000",\n        darksalmon: "e9967a",\n        darkseagreen: "8fbc8f",\n        darkslateblue: "483d8b",\n        darkslategray: "2f4f4f",\n        darkslategrey: "2f4f4f",\n        darkturquoise: "00ced1",\n        darkviolet: "9400d3",\n        deeppink: "ff1493",\n        deepskyblue: "00bfff",\n        dimgray: "696969",\n        dimgrey: "696969",\n        dodgerblue: "1e90ff",\n        firebrick: "b22222",\n        floralwhite: "fffaf0",\n        forestgreen: "228b22",\n        fuchsia: "f0f",\n        gainsboro: "dcdcdc",\n        ghostwhite: "f8f8ff",\n        gold: "ffd700",\n        goldenrod: "daa520",\n        gray: "808080",\n        green: "008000",\n        greenyellow: "adff2f",\n        grey: "808080",\n        honeydew: "f0fff0",\n        hotpink: "ff69b4",\n        indianred: "cd5c5c",\n        indigo: "4b0082",\n        ivory: "fffff0",\n        khaki: "f0e68c",\n        lavender: "e6e6fa",\n        lavenderblush: "fff0f5",\n        lawngreen: "7cfc00",\n        lemonchiffon: "fffacd",\n        lightblue: "add8e6",\n        lightcoral: "f08080",\n        lightcyan: "e0ffff",\n        lightgoldenrodyellow: "fafad2",\n        lightgray: "d3d3d3",\n        lightgreen: "90ee90",\n        lightgrey: "d3d3d3",\n        lightpink: "ffb6c1",\n        lightsalmon: "ffa07a",\n        lightseagreen: "20b2aa",\n        lightskyblue: "87cefa",\n        lightslategray: "789",\n        lightslategrey: "789",\n        lightsteelblue: "b0c4de",\n        lightyellow: "ffffe0",\n        lime: "0f0",\n        limegreen: "32cd32",\n        linen: "faf0e6",\n        magenta: "f0f",\n        maroon: "800000",\n        mediumaquamarine: "66cdaa",\n        mediumblue: "0000cd",\n        mediumorchid: "ba55d3",\n        mediumpurple: "9370db",\n        mediumseagreen: "3cb371",\n        mediumslateblue: "7b68ee",\n        mediumspringgreen: "00fa9a",\n        mediumturquoise: "48d1cc",\n        mediumvioletred: "c71585",\n        midnightblue: "191970",\n        mintcream: "f5fffa",\n        mistyrose: "ffe4e1",\n        moccasin: "ffe4b5",\n        navajowhite: "ffdead",\n        navy: "000080",\n        oldlace: "fdf5e6",\n        olive: "808000",\n        olivedrab: "6b8e23",\n        orange: "ffa500",\n        orangered: "ff4500",\n        orchid: "da70d6",\n        palegoldenrod: "eee8aa",\n        palegreen: "98fb98",\n        paleturquoise: "afeeee",\n        palevioletred: "db7093",\n        papayawhip: "ffefd5",\n        peachpuff: "ffdab9",\n        peru: "cd853f",\n        pink: "ffc0cb",\n        plum: "dda0dd",\n        powderblue: "b0e0e6",\n        purple: "800080",\n        rebeccapurple: "663399",\n        red: "f00",\n        rosybrown: "bc8f8f",\n        royalblue: "4169e1",\n        saddlebrown: "8b4513",\n        salmon: "fa8072",\n        sandybrown: "f4a460",\n        seagreen: "2e8b57",\n        seashell: "fff5ee",\n        sienna: "a0522d",\n        silver: "c0c0c0",\n        skyblue: "87ceeb",\n        slateblue: "6a5acd",\n        slategray: "708090",\n        slategrey: "708090",\n        snow: "fffafa",\n        springgreen: "00ff7f",\n        steelblue: "4682b4",\n        tan: "d2b48c",\n        teal: "008080",\n        thistle: "d8bfd8",\n        tomato: "ff6347",\n        turquoise: "40e0d0",\n        violet: "ee82ee",\n        wheat: "f5deb3",\n        white: "fff",\n        whitesmoke: "f5f5f5",\n        yellow: "ff0",\n        yellowgreen: "9acd32"\n    };\n\n    // Make it easy to access colors via `hexNames[hex]`\n    var hexNames = tinycolor.hexNames = flip(names);\n\n\n    // Utilities\n    // ---------\n\n    // `{ \'name1\': \'val1\' }` becomes `{ \'val1\': \'name1\' }`\n    function flip(o) {\n        var flipped = { };\n        for (var i in o) {\n            if (o.hasOwnProperty(i)) {\n                flipped[o[i]] = i;\n            }\n        }\n        return flipped;\n    }\n\n    // Return a valid alpha value [0,1] with all invalid values being set to 1\n    function boundAlpha(a) {\n        a = parseFloat(a);\n\n        if (isNaN(a) || a < 0 || a > 1) {\n            a = 1;\n        }\n\n        return a;\n    }\n\n    // Take input from [0, n] and return it as [0, 1]\n    function bound01(n, max) {\n        if (isOnePointZero(n)) { n = "100%"; }\n\n        var processPercent = isPercentage(n);\n        n = mathMin(max, mathMax(0, parseFloat(n)));\n\n        // Automatically convert percentage into number\n        if (processPercent) {\n            n = parseInt(n * max, 10) / 100;\n        }\n\n        // Handle floating point rounding errors\n        if ((math.abs(n - max) < 0.000001)) {\n            return 1;\n        }\n\n        // Convert into [0, 1] range if it isn\'t already\n        return (n % max) / parseFloat(max);\n    }\n\n    // Force a number between 0 and 1\n    function clamp01(val) {\n        return mathMin(1, mathMax(0, val));\n    }\n\n    // Parse a base-16 hex value into a base-10 integer\n    function parseIntFromHex(val) {\n        return parseInt(val, 16);\n    }\n\n    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n    function isOnePointZero(n) {\n        return typeof n == "string" && n.indexOf(\'.\') != -1 && parseFloat(n) === 1;\n    }\n\n    // Check to see if string passed in is a percentage\n    function isPercentage(n) {\n        return typeof n === "string" && n.indexOf(\'%\') != -1;\n    }\n\n    // Force a hex value to have 2 characters\n    function pad2(c) {\n        return c.length == 1 ? \'0\' + c : \'\' + c;\n    }\n\n    // Replace a decimal with it\'s percentage value\n    function convertToPercentage(n) {\n        if (n <= 1) {\n            n = (n * 100) + "%";\n        }\n\n        return n;\n    }\n\n    // Converts a decimal to a hex value\n    function convertDecimalToHex(d) {\n        return Math.round(parseFloat(d) * 255).toString(16);\n    }\n    // Converts a hex value to a decimal\n    function convertHexToDecimal(h) {\n        return (parseIntFromHex(h) / 255);\n    }\n\n    var matchers = (function() {\n\n        // <http://www.w3.org/TR/css3-values/#integers>\n        var CSS_INTEGER = "[-\\\\+]?\\\\d+%?";\n\n        // <http://www.w3.org/TR/css3-values/#number-value>\n        var CSS_NUMBER = "[-\\\\+]?\\\\d*\\\\.\\\\d+%?";\n\n        // Allow positive/negative integer/number.  Don\'t capture the either/or, just the entire outcome.\n        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";\n\n        // Actual matching.\n        // Parentheses and commas are optional, but not required.\n        // Whitespace can take the place of commas or opening paren\n        var PERMISSIVE_MATCH3 = "[\\\\s|\\\\(]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")\\\\s*\\\\)?";\n        var PERMISSIVE_MATCH4 = "[\\\\s|\\\\(]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")\\\\s*\\\\)?";\n\n        return {\n            rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),\n            rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),\n            hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),\n            hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),\n            hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),\n            hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),\n            hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n            hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n            hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n        };\n    })();\n\n    // `stringInputToObject`\n    // Permissive string parsing.  Take in a number of formats, and output an object\n    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n    function stringInputToObject(color) {\n\n        color = color.replace(trimLeft,\'\').replace(trimRight, \'\').toLowerCase();\n        var named = false;\n        if (names[color]) {\n            color = names[color];\n            named = true;\n        }\n        else if (color == \'transparent\') {\n            return { r: 0, g: 0, b: 0, a: 0, format: "name" };\n        }\n\n        // Try to match string input using regular expressions.\n        // Keep most of the number bounding out of this function - don\'t worry about [0,1] or [0,100] or [0,360]\n        // Just return an object and let the conversion functions handle that.\n        // This way the result will be the same whether the tinycolor is initialized with string or object.\n        var match;\n        if ((match = matchers.rgb.exec(color))) {\n            return { r: match[1], g: match[2], b: match[3] };\n        }\n        if ((match = matchers.rgba.exec(color))) {\n            return { r: match[1], g: match[2], b: match[3], a: match[4] };\n        }\n        if ((match = matchers.hsl.exec(color))) {\n            return { h: match[1], s: match[2], l: match[3] };\n        }\n        if ((match = matchers.hsla.exec(color))) {\n            return { h: match[1], s: match[2], l: match[3], a: match[4] };\n        }\n        if ((match = matchers.hsv.exec(color))) {\n            return { h: match[1], s: match[2], v: match[3] };\n        }\n        if ((match = matchers.hsva.exec(color))) {\n            return { h: match[1], s: match[2], v: match[3], a: match[4] };\n        }\n        if ((match = matchers.hex8.exec(color))) {\n            return {\n                a: convertHexToDecimal(match[1]),\n                r: parseIntFromHex(match[2]),\n                g: parseIntFromHex(match[3]),\n                b: parseIntFromHex(match[4]),\n                format: named ? "name" : "hex8"\n            };\n        }\n        if ((match = matchers.hex6.exec(color))) {\n            return {\n                r: parseIntFromHex(match[1]),\n                g: parseIntFromHex(match[2]),\n                b: parseIntFromHex(match[3]),\n                format: named ? "name" : "hex"\n            };\n        }\n        if ((match = matchers.hex3.exec(color))) {\n            return {\n                r: parseIntFromHex(match[1] + \'\' + match[1]),\n                g: parseIntFromHex(match[2] + \'\' + match[2]),\n                b: parseIntFromHex(match[3] + \'\' + match[3]),\n                format: named ? "name" : "hex"\n            };\n        }\n\n        return false;\n    }\n\n    window.tinycolor = tinycolor;\n    })();\n\n    $(function () {\n        if ($.fn.spectrum.load) {\n            $.fn.spectrum.processNativeColorInputs();\n        }\n    });\n\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/assets/spectrum/spectrum.js\n')},"./web/assets/tooltipster/js/jquery.tooltipster.min.js":
/*!*************************************************************!*\
  !*** ./web/assets/tooltipster/js/jquery.tooltipster.min.js ***!
  \*************************************************************/
/*! no static exports found */function(module,exports){eval('/* Tooltipster v3.3.0 */;(function(e,t,n){function s(t,n){this.bodyOverflowX;this.callbacks={hide:[],show:[]};this.checkInterval=null;this.Content;this.$el=e(t);this.$elProxy;this.elProxyPosition;this.enabled=true;this.options=e.extend({},i,n);this.mouseIsOverProxy=false;this.namespace="tooltipster-"+Math.round(Math.random()*1e5);this.Status="hidden";this.timerHide=null;this.timerShow=null;this.$tooltip;this.options.iconTheme=this.options.iconTheme.replace(".","");this.options.theme=this.options.theme.replace(".","");this._init()}function o(t,n){var r=true;e.each(t,function(e,i){if(typeof n[e]==="undefined"||t[e]!==n[e]){r=false;return false}});return r}function f(){return!a&&u}function l(){var e=n.body||n.documentElement,t=e.style,r="transition";if(typeof t[r]=="string"){return true}v=["Moz","Webkit","Khtml","O","ms"],r=r.charAt(0).toUpperCase()+r.substr(1);for(var i=0;i<v.length;i++){if(typeof t[v[i]+r]=="string"){return true}}return false}var r="tooltipster",i={animation:"fade",arrow:true,arrowColor:"",autoClose:true,content:null,contentAsHTML:false,contentCloning:true,debug:true,delay:200,minWidth:0,maxWidth:null,functionInit:function(e,t){},functionBefore:function(e,t){t()},functionReady:function(e,t){},functionAfter:function(e){},hideOnClick:false,icon:"(?)",iconCloning:true,iconDesktop:false,iconTouch:false,iconTheme:"tooltipster-icon",interactive:false,interactiveTolerance:350,multiple:false,offsetX:0,offsetY:0,onlyOne:false,position:"top",positionTracker:false,positionTrackerCallback:function(e){if(this.option("trigger")=="hover"&&this.option("autoClose")){this.hide()}},restoration:"current",speed:350,timer:0,theme:"tooltipster-default",touchDevices:true,trigger:"hover",updateAnimation:true};s.prototype={_init:function(){var t=this;if(n.querySelector){var r=null;if(t.$el.data("tooltipster-initialTitle")===undefined){r=t.$el.attr("title");if(r===undefined)r=null;t.$el.data("tooltipster-initialTitle",r)}if(t.options.content!==null){t._content_set(t.options.content)}else{t._content_set(r)}var i=t.options.functionInit.call(t.$el,t.$el,t.Content);if(typeof i!=="undefined")t._content_set(i);t.$el.removeAttr("title").addClass("tooltipstered");if(!u&&t.options.iconDesktop||u&&t.options.iconTouch){if(typeof t.options.icon==="string"){t.$elProxy=e(\'<span class="\'+t.options.iconTheme+\'"></span>\');t.$elProxy.text(t.options.icon)}else{if(t.options.iconCloning)t.$elProxy=t.options.icon.clone(true);else t.$elProxy=t.options.icon}t.$elProxy.insertAfter(t.$el)}else{t.$elProxy=t.$el}if(t.options.trigger=="hover"){t.$elProxy.on("mouseenter."+t.namespace,function(){if(!f()||t.options.touchDevices){t.mouseIsOverProxy=true;t._show()}}).on("mouseleave."+t.namespace,function(){if(!f()||t.options.touchDevices){t.mouseIsOverProxy=false}});if(u&&t.options.touchDevices){t.$elProxy.on("touchstart."+t.namespace,function(){t._showNow()})}}else if(t.options.trigger=="click"){t.$elProxy.on("click."+t.namespace,function(){if(!f()||t.options.touchDevices){t._show()}})}}},_show:function(){var e=this;if(e.Status!="shown"&&e.Status!="appearing"){if(e.options.delay){e.timerShow=setTimeout(function(){if(e.options.trigger=="click"||e.options.trigger=="hover"&&e.mouseIsOverProxy){e._showNow()}},e.options.delay)}else e._showNow()}},_showNow:function(n){var r=this;r.options.functionBefore.call(r.$el,r.$el,function(){if(r.enabled&&r.Content!==null){if(n)r.callbacks.show.push(n);r.callbacks.hide=[];clearTimeout(r.timerShow);r.timerShow=null;clearTimeout(r.timerHide);r.timerHide=null;if(r.options.onlyOne){e(".tooltipstered").not(r.$el).each(function(t,n){var r=e(n),i=r.data("tooltipster-ns");e.each(i,function(e,t){var n=r.data(t),i=n.status(),s=n.option("autoClose");if(i!=="hidden"&&i!=="disappearing"&&s){n.hide()}})})}var i=function(){r.Status="shown";e.each(r.callbacks.show,function(e,t){t.call(r.$el)});r.callbacks.show=[]};if(r.Status!=="hidden"){var s=0;if(r.Status==="disappearing"){r.Status="appearing";if(l()){r.$tooltip.clearQueue().removeClass("tooltipster-dying").addClass("tooltipster-"+r.options.animation+"-show");if(r.options.speed>0)r.$tooltip.delay(r.options.speed);r.$tooltip.queue(i)}else{r.$tooltip.stop().fadeIn(i)}}else if(r.Status==="shown"){i()}}else{r.Status="appearing";var s=r.options.speed;r.bodyOverflowX=e("body").css("overflow-x");e("body").css("overflow-x","hidden");var o="tooltipster-"+r.options.animation,a="-webkit-transition-duration: "+r.options.speed+"ms; -webkit-animation-duration: "+r.options.speed+"ms; -moz-transition-duration: "+r.options.speed+"ms; -moz-animation-duration: "+r.options.speed+"ms; -o-transition-duration: "+r.options.speed+"ms; -o-animation-duration: "+r.options.speed+"ms; -ms-transition-duration: "+r.options.speed+"ms; -ms-animation-duration: "+r.options.speed+"ms; transition-duration: "+r.options.speed+"ms; animation-duration: "+r.options.speed+"ms;",f=r.options.minWidth?"min-width:"+Math.round(r.options.minWidth)+"px;":"",c=r.options.maxWidth?"max-width:"+Math.round(r.options.maxWidth)+"px;":"",h=r.options.interactive?"pointer-events: auto;":"";r.$tooltip=e(\'<div class="tooltipster-base \'+r.options.theme+\'" style="\'+f+" "+c+" "+h+" "+a+\'"><div class="tooltipster-content"></div></div>\');if(l())r.$tooltip.addClass(o);r._content_insert();r.$tooltip.appendTo("body");r.reposition();r.options.functionReady.call(r.$el,r.$el,r.$tooltip);if(l()){r.$tooltip.addClass(o+"-show");if(r.options.speed>0)r.$tooltip.delay(r.options.speed);r.$tooltip.queue(i)}else{r.$tooltip.css("display","none").fadeIn(r.options.speed,i)}r._interval_set();e(t).on("scroll."+r.namespace+" resize."+r.namespace,function(){r.reposition()});if(r.options.autoClose){e("body").off("."+r.namespace);if(r.options.trigger=="hover"){if(u){setTimeout(function(){e("body").on("touchstart."+r.namespace,function(){r.hide()})},0)}if(r.options.interactive){if(u){r.$tooltip.on("touchstart."+r.namespace,function(e){e.stopPropagation()})}var p=null;r.$elProxy.add(r.$tooltip).on("mouseleave."+r.namespace+"-autoClose",function(){clearTimeout(p);p=setTimeout(function(){r.hide()},r.options.interactiveTolerance)}).on("mouseenter."+r.namespace+"-autoClose",function(){clearTimeout(p)})}else{r.$elProxy.on("mouseleave."+r.namespace+"-autoClose",function(){r.hide()})}if(r.options.hideOnClick){r.$elProxy.on("click."+r.namespace+"-autoClose",function(){r.hide()})}}else if(r.options.trigger=="click"){setTimeout(function(){e("body").on("click."+r.namespace+" touchstart."+r.namespace,function(){r.hide()})},0);if(r.options.interactive){r.$tooltip.on("click."+r.namespace+" touchstart."+r.namespace,function(e){e.stopPropagation()})}}}}if(r.options.timer>0){r.timerHide=setTimeout(function(){r.timerHide=null;r.hide()},r.options.timer+s)}}})},_interval_set:function(){var t=this;t.checkInterval=setInterval(function(){if(e("body").find(t.$el).length===0||e("body").find(t.$elProxy).length===0||t.Status=="hidden"||e("body").find(t.$tooltip).length===0){if(t.Status=="shown"||t.Status=="appearing")t.hide();t._interval_cancel()}else{if(t.options.positionTracker){var n=t._repositionInfo(t.$elProxy),r=false;if(o(n.dimension,t.elProxyPosition.dimension)){if(t.$elProxy.css("position")==="fixed"){if(o(n.position,t.elProxyPosition.position))r=true}else{if(o(n.offset,t.elProxyPosition.offset))r=true}}if(!r){t.reposition();t.options.positionTrackerCallback.call(t,t.$el)}}}},200)},_interval_cancel:function(){clearInterval(this.checkInterval);this.checkInterval=null},_content_set:function(e){if(typeof e==="object"&&e!==null&&this.options.contentCloning){e=e.clone(true)}this.Content=e},_content_insert:function(){var e=this,t=this.$tooltip.find(".tooltipster-content");if(typeof e.Content==="string"&&!e.options.contentAsHTML){t.text(e.Content)}else{t.empty().append(e.Content)}},_update:function(e){var t=this;t._content_set(e);if(t.Content!==null){if(t.Status!=="hidden"){t._content_insert();t.reposition();if(t.options.updateAnimation){if(l()){t.$tooltip.css({width:"","-webkit-transition":"all "+t.options.speed+"ms, width 0ms, height 0ms, left 0ms, top 0ms","-moz-transition":"all "+t.options.speed+"ms, width 0ms, height 0ms, left 0ms, top 0ms","-o-transition":"all "+t.options.speed+"ms, width 0ms, height 0ms, left 0ms, top 0ms","-ms-transition":"all "+t.options.speed+"ms, width 0ms, height 0ms, left 0ms, top 0ms",transition:"all "+t.options.speed+"ms, width 0ms, height 0ms, left 0ms, top 0ms"}).addClass("tooltipster-content-changing");setTimeout(function(){if(t.Status!="hidden"){t.$tooltip.removeClass("tooltipster-content-changing");setTimeout(function(){if(t.Status!=="hidden"){t.$tooltip.css({"-webkit-transition":t.options.speed+"ms","-moz-transition":t.options.speed+"ms","-o-transition":t.options.speed+"ms","-ms-transition":t.options.speed+"ms",transition:t.options.speed+"ms"})}},t.options.speed)}},t.options.speed)}else{t.$tooltip.fadeTo(t.options.speed,.5,function(){if(t.Status!="hidden"){t.$tooltip.fadeTo(t.options.speed,1)}})}}}}else{t.hide()}},_repositionInfo:function(e){return{dimension:{height:e.outerHeight(false),width:e.outerWidth(false)},offset:e.offset(),position:{left:parseInt(e.css("left")),top:parseInt(e.css("top"))}}},hide:function(n){var r=this;if(n)r.callbacks.hide.push(n);r.callbacks.show=[];clearTimeout(r.timerShow);r.timerShow=null;clearTimeout(r.timerHide);r.timerHide=null;var i=function(){e.each(r.callbacks.hide,function(e,t){t.call(r.$el)});r.callbacks.hide=[]};if(r.Status=="shown"||r.Status=="appearing"){r.Status="disappearing";var s=function(){r.Status="hidden";if(typeof r.Content=="object"&&r.Content!==null){r.Content.detach()}r.$tooltip.remove();r.$tooltip=null;e(t).off("."+r.namespace);e("body").off("."+r.namespace).css("overflow-x",r.bodyOverflowX);e("body").off("."+r.namespace);r.$elProxy.off("."+r.namespace+"-autoClose");r.options.functionAfter.call(r.$el,r.$el);i()};if(l()){r.$tooltip.clearQueue().removeClass("tooltipster-"+r.options.animation+"-show").addClass("tooltipster-dying");if(r.options.speed>0)r.$tooltip.delay(r.options.speed);r.$tooltip.queue(s)}else{r.$tooltip.stop().fadeOut(r.options.speed,s)}}else if(r.Status=="hidden"){i()}return r},show:function(e){this._showNow(e);return this},update:function(e){return this.content(e)},content:function(e){if(typeof e==="undefined"){return this.Content}else{this._update(e);return this}},reposition:function(){var n=this;if(e("body").find(n.$tooltip).length!==0){n.$tooltip.css("width","");n.elProxyPosition=n._repositionInfo(n.$elProxy);var r=null,i=e(t).width(),s=n.elProxyPosition,o=n.$tooltip.outerWidth(false),u=n.$tooltip.innerWidth()+1,a=n.$tooltip.outerHeight(false);if(n.$elProxy.is("area")){var f=n.$elProxy.attr("shape"),l=n.$elProxy.parent().attr("name"),c=e(\'img[usemap="#\'+l+\'"]\'),h=c.offset().left,p=c.offset().top,d=n.$elProxy.attr("coords")!==undefined?n.$elProxy.attr("coords").split(","):undefined;if(f=="circle"){var v=parseInt(d[0]),m=parseInt(d[1]),g=parseInt(d[2]);s.dimension.height=g*2;s.dimension.width=g*2;s.offset.top=p+m-g;s.offset.left=h+v-g}else if(f=="rect"){var v=parseInt(d[0]),m=parseInt(d[1]),y=parseInt(d[2]),b=parseInt(d[3]);s.dimension.height=b-m;s.dimension.width=y-v;s.offset.top=p+m;s.offset.left=h+v}else if(f=="poly"){var w=[],E=[],S=0,x=0,T=0,N=0,C="even";for(var k=0;k<d.length;k++){var L=parseInt(d[k]);if(C=="even"){if(L>T){T=L;if(k===0){S=T}}if(L<S){S=L}C="odd"}else{if(L>N){N=L;if(k==1){x=N}}if(L<x){x=L}C="even"}}s.dimension.height=N-x;s.dimension.width=T-S;s.offset.top=p+x;s.offset.left=h+S}else{s.dimension.height=c.outerHeight(false);s.dimension.width=c.outerWidth(false);s.offset.top=p;s.offset.left=h}}var A=0,O=0,M=0,_=parseInt(n.options.offsetY),D=parseInt(n.options.offsetX),P=n.options.position;function H(){var n=e(t).scrollLeft();if(A-n<0){r=A-n;A=n}if(A+o-n>i){r=A-(i+n-o);A=i+n-o}}function B(n,r){if(s.offset.top-e(t).scrollTop()-a-_-12<0&&r.indexOf("top")>-1){P=n}if(s.offset.top+s.dimension.height+a+12+_>e(t).scrollTop()+e(t).height()&&r.indexOf("bottom")>-1){P=n;M=s.offset.top-a-_-12}}if(P=="top"){var j=s.offset.left+o-(s.offset.left+s.dimension.width);A=s.offset.left+D-j/2;M=s.offset.top-a-_-12;H();B("bottom","top")}if(P=="top-left"){A=s.offset.left+D;M=s.offset.top-a-_-12;H();B("bottom-left","top-left")}if(P=="top-right"){A=s.offset.left+s.dimension.width+D-o;M=s.offset.top-a-_-12;H();B("bottom-right","top-right")}if(P=="bottom"){var j=s.offset.left+o-(s.offset.left+s.dimension.width);A=s.offset.left-j/2+D;M=s.offset.top+s.dimension.height+_+12;H();B("top","bottom")}if(P=="bottom-left"){A=s.offset.left+D;M=s.offset.top+s.dimension.height+_+12;H();B("top-left","bottom-left")}if(P=="bottom-right"){A=s.offset.left+s.dimension.width+D-o;M=s.offset.top+s.dimension.height+_+12;H();B("top-right","bottom-right")}if(P=="left"){A=s.offset.left-D-o-12;O=s.offset.left+D+s.dimension.width+12;var F=s.offset.top+a-(s.offset.top+s.dimension.height);M=s.offset.top-F/2-_;if(A<0&&O+o>i){var I=parseFloat(n.$tooltip.css("border-width"))*2,q=o+A-I;n.$tooltip.css("width",q+"px");a=n.$tooltip.outerHeight(false);A=s.offset.left-D-q-12-I;F=s.offset.top+a-(s.offset.top+s.dimension.height);M=s.offset.top-F/2-_}else if(A<0){A=s.offset.left+D+s.dimension.width+12;r="left"}}if(P=="right"){A=s.offset.left+D+s.dimension.width+12;O=s.offset.left-D-o-12;var F=s.offset.top+a-(s.offset.top+s.dimension.height);M=s.offset.top-F/2-_;if(A+o>i&&O<0){var I=parseFloat(n.$tooltip.css("border-width"))*2,q=i-A-I;n.$tooltip.css("width",q+"px");a=n.$tooltip.outerHeight(false);F=s.offset.top+a-(s.offset.top+s.dimension.height);M=s.offset.top-F/2-_}else if(A+o>i){A=s.offset.left-D-o-12;r="right"}}if(n.options.arrow){var R="tooltipster-arrow-"+P;if(n.options.arrowColor.length<1){var U=n.$tooltip.css("background-color")}else{var U=n.options.arrowColor}if(!r){r=""}else if(r=="left"){R="tooltipster-arrow-right";r=""}else if(r=="right"){R="tooltipster-arrow-left";r=""}else{r="left:"+Math.round(r)+"px;"}if(P=="top"||P=="top-left"||P=="top-right"){var z=parseFloat(n.$tooltip.css("border-bottom-width")),W=n.$tooltip.css("border-bottom-color")}else if(P=="bottom"||P=="bottom-left"||P=="bottom-right"){var z=parseFloat(n.$tooltip.css("border-top-width")),W=n.$tooltip.css("border-top-color")}else if(P=="left"){var z=parseFloat(n.$tooltip.css("border-right-width")),W=n.$tooltip.css("border-right-color")}else if(P=="right"){var z=parseFloat(n.$tooltip.css("border-left-width")),W=n.$tooltip.css("border-left-color")}else{var z=parseFloat(n.$tooltip.css("border-bottom-width")),W=n.$tooltip.css("border-bottom-color")}if(z>1){z++}var X="";if(z!==0){var V="",J="border-color: "+W+";";if(R.indexOf("bottom")!==-1){V="margin-top: -"+Math.round(z)+"px;"}else if(R.indexOf("top")!==-1){V="margin-bottom: -"+Math.round(z)+"px;"}else if(R.indexOf("left")!==-1){V="margin-right: -"+Math.round(z)+"px;"}else if(R.indexOf("right")!==-1){V="margin-left: -"+Math.round(z)+"px;"}X=\'<span class="tooltipster-arrow-border" style="\'+V+" "+J+\';"></span>\'}n.$tooltip.find(".tooltipster-arrow").remove();var K=\'<div class="\'+R+\' tooltipster-arrow" style="\'+r+\'">\'+X+\'<span style="border-color:\'+U+\';"></span></div>\';n.$tooltip.append(K)}n.$tooltip.css({top:Math.round(M)+"px",left:Math.round(A)+"px"})}return n},enable:function(){this.enabled=true;return this},disable:function(){this.hide();this.enabled=false;return this},destroy:function(){var t=this;t.hide();if(t.$el[0]!==t.$elProxy[0]){t.$elProxy.remove()}t.$el.removeData(t.namespace).off("."+t.namespace);var n=t.$el.data("tooltipster-ns");if(n.length===1){var r=null;if(t.options.restoration==="previous"){r=t.$el.data("tooltipster-initialTitle")}else if(t.options.restoration==="current"){r=typeof t.Content==="string"?t.Content:e("<div></div>").append(t.Content).html()}if(r){t.$el.attr("title",r)}t.$el.removeClass("tooltipstered").removeData("tooltipster-ns").removeData("tooltipster-initialTitle")}else{n=e.grep(n,function(e,n){return e!==t.namespace});t.$el.data("tooltipster-ns",n)}return t},elementIcon:function(){return this.$el[0]!==this.$elProxy[0]?this.$elProxy[0]:undefined},elementTooltip:function(){return this.$tooltip?this.$tooltip[0]:undefined},option:function(e,t){if(typeof t=="undefined")return this.options[e];else{this.options[e]=t;return this}},status:function(){return this.Status}};e.fn[r]=function(){var t=arguments;if(this.length===0){if(typeof t[0]==="string"){var n=true;switch(t[0]){case"setDefaults":e.extend(i,t[1]);break;default:n=false;break}if(n)return true;else return this}else{return this}}else{if(typeof t[0]==="string"){var r="#*$~&";this.each(function(){var n=e(this).data("tooltipster-ns"),i=n?e(this).data(n[0]):null;if(i){if(typeof i[t[0]]==="function"){var s=i[t[0]](t[1],t[2])}else{throw new Error(\'Unknown method .tooltipster("\'+t[0]+\'")\')}if(s!==i){r=s;return false}}else{throw new Error("You called Tooltipster\'s \\""+t[0]+\'" method on an uninitialized element\')}});return r!=="#*$~&"?r:this}else{var o=[],u=t[0]&&typeof t[0].multiple!=="undefined",a=u&&t[0].multiple||!u&&i.multiple,f=t[0]&&typeof t[0].debug!=="undefined",l=f&&t[0].debug||!f&&i.debug;this.each(function(){var n=false,r=e(this).data("tooltipster-ns"),i=null;if(!r){n=true}else if(a){n=true}else if(l){console.log(\'Tooltipster: one or more tooltips are already attached to this element: ignoring. Use the "multiple" option to attach more tooltips.\')}if(n){i=new s(this,t[0]);if(!r)r=[];r.push(i.namespace);e(this).data("tooltipster-ns",r);e(this).data(i.namespace,i)}o.push(i)});if(a)return o;else return this}}};var u=!!("ontouchstart"in t);var a=false;e("body").one("mousemove",function(){a=true})})(jQuery,window,document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./web/assets/tooltipster/js/jquery.tooltipster.min.js\n')},0:
/*!*****************************************************!*\
  !*** multi whatwg-fetch ./web/app/builder/build.js ***!
  \*****************************************************/
/*! no static exports found */function(I,g,C){C(/*! whatwg-fetch */"./node_modules/whatwg-fetch/fetch.js"),I.exports=C(/*! /home/serkoz/Bitbucket/desktop/mbr-online/web/app/builder/build.js */"./web/app/builder/build.js")},CodeMirror:
/*!*****************************!*\
  !*** external "CodeMirror" ***!
  \*****************************/
/*! no static exports found */function(module,exports){eval("module.exports = CodeMirror;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJDb2RlTWlycm9yXCI/MTc4MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJDb2RlTWlycm9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBDb2RlTWlycm9yOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///CodeMirror\n")},jquery:
/*!********************************!*\
  !*** external "window.jQuery" ***!
  \********************************/
/*! no static exports found */function(module,exports){eval("module.exports = window.jQuery;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ3aW5kb3cualF1ZXJ5XCI/ZjEzYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJqcXVlcnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy5qUXVlcnk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///jquery\n")}});
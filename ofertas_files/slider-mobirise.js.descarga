(function($, APP) {
    'use strict';

    // youtube or vimeo
    function checkPlayerName(url) {
        if (url === 'false') return false;

        var result = url.match(/(http:|https:|)\/\/(player.|www.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com))\/(video\/|embed\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(&\S+)?/);

        if (result && /youtube/g.test(result[3])) {
            return 'youtube';
        } else if (result && /vimeo/g.test(result[3])) {
            return 'vimeo';
        }

        return false;
    }

    // youtube or vimeo
    function getVideoId(url) {
        if (url === 'false') return false;

        var result = url.match(/(http:|https:|)\/\/(player.|www.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com))\/(video\/|embed\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(&\S+)?/);

        return result ? result[6] : false;
    }

    function getYTPreviewUrl(videoId, quality) {
        return 'https://img.youtube.com/vi/' + videoId + '/' +
            (quality || '') + 'default.jpg';
    }

    // get large and small thumbnails
    function getVimeoPreviewUrl(vimeoId, callback) {
        var request = new XMLHttpRequest();
        request.open('GET', 'https://vimeo.com/api/v2/video/' + vimeoId + '.json', true);
        request.onreadystatechange = function() {
            if (this.readyState === 4) {
                if (this.status >= 200 && this.status < 400) {
                    var response = JSON.parse(this.responseText);

                    callback(response[0].thumbnail_large, response[0].thumbnail_small);
                }
            }
        };
        request.send();
        request = null;
    }

    var getYTPreviewUrlWithBestQuality = (function() {
        var cache = {};

        return function(id) {
            var def = $.Deferred();
            if (id in cache) {
                if (cache[id]) {
                    def.resolve(cache[id]);
                } else {
                    def.reject('Preview image not found.');
                }
            } else {
                $('<img>').on('load', function() {
                    if (120 === (this.naturalWidth || this.width)) {
                        // selection of preview in the best quality
                        var file = this.src.split('/').pop();
                        switch (file) {
                            case 'maxresdefault.jpg':
                                this.src = this.src.replace(file, 'sddefault.jpg');
                                break;
                            case 'sddefault.jpg':
                                this.src = this.src.replace(file, 'hqdefault.jpg');
                                break;
                            case 'hqdefault.jpg':
                                this.src = this.src.replace(file, 'default.jpg');
                                break;
                            default:
                                cache[id] = null;
                                def.reject('Preview image not found.');
                                break;
                        }
                    } else {
                        def.resolve(cache[id] = this.src);
                    }
                }).attr('src', getYTPreviewUrl(id, 'maxres'));
            }

            return def;
        };
    })();

    function updateVideoPreview(component) {
        var $component = APP.$template.find('[data-app-component-id=' + component._id + '] > .app-component-content section');
        var carouselName = $component.find('[mbr-carousel]').attr('mbr-carousel');

        if (carouselName) {
            var $params = APP.$body.find('#edit-component-params');

            $params.find('.image-tabs li:not(.add-item)').each(function(i, el) {
                var slide = component._params[carouselName][i];

                if (!slide || !slide.playVideo) return;

                var playerName = checkPlayerName(slide.videoUrl);
                var videoId = getVideoId(slide.videoUrl);

                if (videoId) {
                    if (playerName === 'youtube') {
                        $(el).css('background-image', 'url(' + getYTPreviewUrl(videoId) + ')');
                    } else {
                        getVimeoPreviewUrl(videoId, function(maxUrl, smallUrl) {
                            $(el).css('background-image', 'url(' + smallUrl + ')');
                        });
                    }
                }
            });
        }
    }

    function updateVideoBackground(component) {
        var $component = APP.$template.find('[data-app-component-id=' + component._id + '] > .app-component-content section [mbr-carousel]'),
            carouselName = $component.attr('mbr-carousel');

        $(component._params[carouselName]).each(function(i, el) {
            var activeSlide = $component.find('.carousel-item').eq(i);
            if (this.playVideo) {
                var playerName = checkPlayerName(this.videoUrl);
                var videoId = getVideoId(this.videoUrl);
                var $preview = $('<div class="mbr-background-video-preview"></div>').css({
                    display: 'none',
                    backgroundSize: 'cover',
                    backgroundPosition: 'center'
                });

                 if(!APP.isSecondaryComponent(component._id)){
                    $component.find('.carousel-item').eq(i).find('.mbr-overlay').before($preview);
                 } else {
                    $component.find('.carousel-item').eq(i).find('.container-slide').parent().find('.mbr-background-video-preview').remove();
                    $component.find('.carousel-item').eq(i).find('.container-slide').before($preview);
                 }

                if (playerName === 'youtube') {
                    getYTPreviewUrlWithBestQuality(videoId).done(function(url) {
                        $component.find('.carousel-item').eq(i).find('.mbr-background-video-preview').css('background-image', 'url(' + url + ')').show();
                    });
                } else if (playerName === 'vimeo') {
                    getVimeoPreviewUrl(videoId, function(maxUrl, smallUrl) {
                        $component.find('.carousel-item').eq(i).find('.mbr-background-video-preview').css('background-image', 'url(' + maxUrl + ')').show();
                    });
                }
                activeSlide.find('.image_wrapper img').css('opacity', '0');
                activeSlide.find('.image_wrapper .mbr-overlay').css('display', 'none');
            } else {
                activeSlide.find('.mbr-background-video-preview').remove();
                activeSlide.css('background-image', 'url("' + this.image + '")');
                activeSlide.find('.image_wrapper img').css('opacity', '1');
                if (this.overlay){ activeSlide.find('.image_wrapper .mbr-overlay').css('display', 'block') };
            }
        });
    }

    APP.regExtension({
        name: 'sliders',
        events: {
            load: function() {
                var _this = this;
                _this.on('preparedComponentParams', function(id) {
                    var $component = _this.$template.find('[data-app-component-id=' + id + '] > .app-component-content section [mbr-carousel]');
                    var index = $component.find('.carousel-item.active').index();
                    if($component.length){
                        $('.image-tabs .images ul li').eq(index).click();
                    }
                });
                _this.Core.on('loadedComponent', function(component, page, context, publish) {
                    updateVideoBackground(component);
                    $(document).off('sortstop').on('sortstop', function() {
                        updateVideoBackground(component);
                    });
                });
                 _this.Core.on('addComponentParamsTab', function(id) {
                    var component = _this.Core.getComponent(id);
                    updateVideoBackground(component);
                });
                _this.Core.addFilter('changeComponentParams', function(value, paramName, params, id) {
                    var component = _this.Core.getComponent(id),
                        $component = _this.$template.find('[data-app-component-id=' + id + '] > .app-component-content section [mbr-carousel]'),
                        carouselName = $component.attr('mbr-carousel');
                    if (paramName === carouselName) {
                        var key = Object.keys(value);
                        if (key.length === 1) {
                            var _value = value[key[0]];
                            if ('playVideo' in _value || 'videoUrl' in _value) {
                                var $params = _this.$body.find('#edit-component-params'),
                                    $curSlide = $params.find('.image-tabs li.active'),
                                    curSlide = params[carouselName][$curSlide.index()],
                                    playerName = checkPlayerName(curSlide.videoUrl),
                                    videoId = getVideoId(curSlide.videoUrl);

                                if ('playVideo' in _value) {
                                    if (_value.playVideo) {
                                        $component.find('.carousel-item.active .image_wrapper img').css('opacity', '0');
                                        $component.find('.carousel-item.active .image_wrapper .mbr-overlay').css('display', 'none');
                                        if (videoId) {
                                            var $preview = $('<div class="mbr-background-video-preview"></div>').css({
                                                display: 'none',
                                                backgroundSize: 'cover',
                                                backgroundPosition: 'center'
                                            });
                                            if(!APP.isSecondaryComponent(id)){
                                                $('.mbr-overlay, .container-slide', $component.find('.carousel-item.active')).before($preview);
                                            } else {
                                                $('.container-slide', $component.find('.carousel-item.active')).before($preview);
                                            };
                                            if (playerName === 'youtube') {
                                                $curSlide.css('background-image', 'url(' + getYTPreviewUrl(videoId) + ')');
                                                getYTPreviewUrlWithBestQuality(videoId).done(function(url) {
                                                    $component.find('.carousel-item.active .mbr-background-video-preview').css('background-image', 'url(' + url + ')').show();
                                                });
                                            } else {
                                                getVimeoPreviewUrl(videoId, function(maxUrl, smallUrl) {
                                                    $curSlide.css('background-image', 'url(' + smallUrl + ')');
                                                    $component.find('.carousel-item.active .mbr-background-video-preview').css('background-image', 'url(' + maxUrl + ')').show();
                                                });
                                            }
                                        }
                                    } else {
                                        $component.find('.carousel-item.active .image_wrapper img').css('opacity', '1');
                                        $component.find('.carousel-item.active .image_wrapper .mbr-overlay').css('display', 'block');
                                        $component.find('.carousel-item.active .mbr-background-video-preview').remove();
                                        var path = APP.core2path(curSlide.image);
                                        $curSlide.css('background-image', 'url("' + path + '")');
                                    }
                                }

                                if ('videoUrl' in _value) {
                                    if (videoId) {
                                        if (playerName === 'youtube') {
                                            $curSlide.css('background-image', 'url(' + getYTPreviewUrl(videoId) + ')');
                                            getYTPreviewUrlWithBestQuality(videoId).done(function(url) {
                                                $component.find('.carousel-item.active .mbr-background-video-preview').css('background-image', 'url(' + url + ')').show();
                                            });
                                        } else {
                                            getVimeoPreviewUrl(videoId, function(maxUrl, smallUrl) {
                                                $curSlide.css('background-image', 'url(' + smallUrl + ')');
                                                $component.find('.carousel-item.active .mbr-background-video-preview').css('background-image', 'url(' + maxUrl + ')').show();
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    }

                    return value;
                });
            },

            preparedComponentParams: function(id) {
                var component = APP.Core.getComponent(id);
                updateVideoPreview(component);
            }
        }
    });
}(jQuery, mbrApp));

//# sourceMappingURL=slider-mobirise.js.map
